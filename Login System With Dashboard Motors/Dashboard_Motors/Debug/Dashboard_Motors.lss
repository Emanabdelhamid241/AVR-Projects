
Dashboard_Motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003eac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00800060  00003eac  00003f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080013c  0080013c  0000401c  2**0
                  ALLOC
  3 .stab         000045b4  00000000  00000000  0000401c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000188c  00000000  00000000  000085d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a14b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c190  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d291  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e214  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e394  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e656  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_10>
      2c:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 34       	cpi	r26, 0x49	; 73
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 1a 	call	0x3588	; 0x3588 <main>
      8a:	0c 94 54 1f 	jmp	0x3ea8	; 0x3ea8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e1       	ldi	r26, 0x1B	; 27
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e1       	ldi	r24, 0x1B	; 27
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 1f 	jmp	0x3e4a	; 0x3e4a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e1       	ldi	r22, 0x1B	; 27
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 41 1f 	jmp	0x3e82	; 0x3e82 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 45 1f 	jmp	0x3e8a	; 0x3e8a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2d 1f 	jmp	0x3e5a	; 0x3e5a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <WDT_enum_WDT_Enable>:

//MCAL Layer
#include "WDT_config.h"
#include "WDT_private.h"

ES_t  WDT_enum_WDT_Enable (void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State= ES_OK;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	/*ENABLE WDT =2.1Sec */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_BIT0);
     caa:	a1 e4       	ldi	r26, 0x41	; 65
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e1 e4       	ldi	r30, 0x41	; 65
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	81 60       	ori	r24, 0x01	; 1
     cb6:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_BIT1);
     cb8:	a1 e4       	ldi	r26, 0x41	; 65
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e1 e4       	ldi	r30, 0x41	; 65
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	82 60       	ori	r24, 0x02	; 2
     cc4:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_BIT2);
     cc6:	a1 e4       	ldi	r26, 0x41	; 65
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e1 e4       	ldi	r30, 0x41	; 65
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	84 60       	ori	r24, 0x04	; 4
     cd2:	8c 93       	st	X, r24
//	WDT_u8_WDTCR_REG= 0b00001111;
return Local_enu_Erorr_State;
     cd4:	89 81       	ldd	r24, Y+1	; 0x01

}
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <WDT_enum_WDT_Disable>:
ES_t  WDT_enum_WDT_Disable (void){
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	0f 92       	push	r0
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State= ES_OK;
     ce8:	19 82       	std	Y+1, r1	; 0x01
		/*DISABLE WDT =2.1Sec */
	WDT_u8_WDTCR_REG |= ((1<<WDT_WDTOE_BIT4) | (1<<WDT_WDE_BIT3));
     cea:	a1 e4       	ldi	r26, 0x41	; 65
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e1 e4       	ldi	r30, 0x41	; 65
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	88 61       	ori	r24, 0x18	; 24
     cf6:	8c 93       	st	X, r24
	WDT_u8_WDTCR_REG = 0x00;
     cf8:	e1 e4       	ldi	r30, 0x41	; 65
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	10 82       	st	Z, r1
//	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDE_BIT3);
//	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDTOE_BIT4);


	return Local_enu_Erorr_State;
     cfe:	89 81       	ldd	r24, Y+1	; 0x01

}
     d00:	0f 90       	pop	r0
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <TIMERS_enum_TIMER0_INIT>:

/*Global pointer to function to TIMER0 OVF*/
static void (*TIMERS_pf_TIMER0_OVF)(void) = NULL;
/*Global pointer to function to TIMER0 CTC MODE*/
static void (*TIMERS_pf_TIMER0_CTC)(void) = NULL;
ES_t TIMERS_enum_TIMER0_INIT(void){
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	0f 92       	push	r0
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	 ES_t Local_enu_Erorr_State = ES_OK ;
     d12:	19 82       	std	Y+1, r1	; 0x01
		/*set compare match unit register*/
		TIMERS_u8_OCR0_REG=COMPARE_MATCH_VALUE;

#elif TIMER_MODE == FAST_PWM_MODE
	/*Select FAST PWM mode*/
		 SET_BIT(TIMERS_u8_TCCR0_REG,timers_WGM01_BIT3);
     d14:	a3 e5       	ldi	r26, 0x53	; 83
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e3 e5       	ldi	r30, 0x53	; 83
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	88 60       	ori	r24, 0x08	; 8
     d20:	8c 93       	st	X, r24
		 SET_BIT(TIMERS_u8_TCCR0_REG,timers_WGM00_BIT6);
     d22:	a3 e5       	ldi	r26, 0x53	; 83
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e3 e5       	ldi	r30, 0x53	; 83
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	80 64       	ori	r24, 0x40	; 64
     d2e:	8c 93       	st	X, r24

		 /*Select HW Action on oc0 pin to non interting*/
		SET_BIT(TIMERS_u8_TCCR0_REG,timers_COM01_BIT5);
     d30:	a3 e5       	ldi	r26, 0x53	; 83
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e3 e5       	ldi	r30, 0x53	; 83
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 62       	ori	r24, 0x20	; 32
     d3c:	8c 93       	st	X, r24
		CLR_BIT(TIMERS_u8_TCCR0_REG,timers_COM00_BIT4);
     d3e:	a3 e5       	ldi	r26, 0x53	; 83
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e3 e5       	ldi	r30, 0x53	; 83
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8f 7e       	andi	r24, 0xEF	; 239
     d4a:	8c 93       	st	X, r24
		CLR_BIT(TIMERS_u8_TCCR0_REG,timers_COM00_BIT4);


#endif
/*set prescaler value CLK/8 */
CLR_BIT(TIMERS_u8_TCCR0_REG,timers_CS00_BIT0);
     d4c:	a3 e5       	ldi	r26, 0x53	; 83
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e3 e5       	ldi	r30, 0x53	; 83
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8e 7f       	andi	r24, 0xFE	; 254
     d58:	8c 93       	st	X, r24
SET_BIT(TIMERS_u8_TCCR0_REG,timers_CS01_BIT1);
     d5a:	a3 e5       	ldi	r26, 0x53	; 83
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e3 e5       	ldi	r30, 0x53	; 83
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	82 60       	ori	r24, 0x02	; 2
     d66:	8c 93       	st	X, r24
CLR_BIT(TIMERS_u8_TCCR0_REG,timers_CS02_BIT2);
     d68:	a3 e5       	ldi	r26, 0x53	; 83
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e3 e5       	ldi	r30, 0x53	; 83
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8b 7f       	andi	r24, 0xFB	; 251
     d74:	8c 93       	st	X, r24


return Local_enu_Erorr_State;
     d76:	89 81       	ldd	r24, Y+1	; 0x01
}
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <TIMERS_enum_TIMER1_INIT>:
ES_t TIMERS_enum_TIMER1_INIT(void)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	0f 92       	push	r0
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State = ES_OK ;
     d8a:	19 82       	std	Y+1, r1	; 0x01
	/*select timer1 mode --> 14(fast PWM) (ICR1=Top Value)*/
	CLR_BIT(TIMERS_u8_TCCR1A_REG,timers_WGM10_BIT0);
     d8c:	af e4       	ldi	r26, 0x4F	; 79
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	ef e4       	ldi	r30, 0x4F	; 79
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8e 7f       	andi	r24, 0xFE	; 254
     d98:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,timers_WGM11_BIT1);
     d9a:	af e4       	ldi	r26, 0x4F	; 79
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ef e4       	ldi	r30, 0x4F	; 79
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	82 60       	ori	r24, 0x02	; 2
     da6:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,timers_WGM12_BIT3);
     da8:	ae e4       	ldi	r26, 0x4E	; 78
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ee e4       	ldi	r30, 0x4E	; 78
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	88 60       	ori	r24, 0x08	; 8
     db4:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,timers_WGM13_BIT4);
     db6:	ae e4       	ldi	r26, 0x4E	; 78
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	ee e4       	ldi	r30, 0x4E	; 78
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 61       	ori	r24, 0x10	; 16
     dc2:	8c 93       	st	X, r24

	/*SELECT HM Action on OC1A Pin --> non inverting*/
	CLR_BIT(TIMERS_u8_TCCR1A_REG,timers_COM1A0_BIT6);
     dc4:	af e4       	ldi	r26, 0x4F	; 79
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	ef e4       	ldi	r30, 0x4F	; 79
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	8f 7b       	andi	r24, 0xBF	; 191
     dd0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,timers_COM1A1_BIT7);
     dd2:	af e4       	ldi	r26, 0x4F	; 79
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ef e4       	ldi	r30, 0x4F	; 79
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	80 68       	ori	r24, 0x80	; 128
     dde:	8c 93       	st	X, r24

	/*SET TOP Value IN OCI1 */
	TIMERS_u16_ICR1_REG = TIMER1_u16_TOP_Value_IN_OCI1;
     de0:	e6 e4       	ldi	r30, 0x46	; 70
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	8f e1       	ldi	r24, 0x1F	; 31
     de6:	9e e4       	ldi	r25, 0x4E	; 78
     de8:	91 83       	std	Z+1, r25	; 0x01
     dea:	80 83       	st	Z, r24
	/*Angle of servo motor = 180 */
//		TIMERS_u16_OCR1A_REG = TIMER1_u16_angle_180  ;


	/*set prescaler value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG,timers_CS10_BIT0);
     dec:	ae e4       	ldi	r26, 0x4E	; 78
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	ee e4       	ldi	r30, 0x4E	; 78
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8e 7f       	andi	r24, 0xFE	; 254
     df8:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,timers_CS11_BIT1);
     dfa:	ae e4       	ldi	r26, 0x4E	; 78
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	ee e4       	ldi	r30, 0x4E	; 78
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,timers_CS12_BIT2);
     e08:	ae e4       	ldi	r26, 0x4E	; 78
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ee e4       	ldi	r30, 0x4E	; 78
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8b 7f       	andi	r24, 0xFB	; 251
     e14:	8c 93       	st	X, r24

	return Local_enu_Erorr_State;
     e16:	89 81       	ldd	r24, Y+1	; 0x01

}
     e18:	0f 90       	pop	r0
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <TIMERS_enum_TIMER0_SET_CALL_BACK>:
ES_t TIMERS_enum_TIMER0_SET_CALL_BACK(void(*Copy_pf_TIMER0_OVF)(void)){
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	00 d0       	rcall	.+0      	; 0xe26 <TIMERS_enum_TIMER0_SET_CALL_BACK+0x6>
     e26:	0f 92       	push	r0
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9b 83       	std	Y+3, r25	; 0x03
     e2e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State = ES_OK ;
     e30:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pf_TIMER0_OVF !=NULL)
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	9b 81       	ldd	r25, Y+3	; 0x03
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	39 f0       	breq	.+14     	; 0xe48 <TIMERS_enum_TIMER0_SET_CALL_BACK+0x28>
	{
		TIMERS_pf_TIMER0_OVF=Copy_pf_TIMER0_OVF;
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	9b 81       	ldd	r25, Y+3	; 0x03
     e3e:	90 93 3d 01 	sts	0x013D, r25
     e42:	80 93 3c 01 	sts	0x013C, r24
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <TIMERS_enum_TIMER0_SET_CALL_BACK+0x2c>

	}
	else
	{
		Local_enu_Erorr_State=ES_NOK;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enu_Erorr_State;
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK>:
ES_t TIMERS_enum_TIMER0_CTC_SET_CALL_BACK(void(*Copy_pf_TIMERO_CTC)(void))
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK+0x6>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9b 83       	std	Y+3, r25	; 0x03
     e68:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State = ES_OK ;
     e6a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pf_TIMERO_CTC !=NULL)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	9b 81       	ldd	r25, Y+3	; 0x03
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	39 f0       	breq	.+14     	; 0xe82 <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK+0x28>
		{
		TIMERS_pf_TIMER0_CTC=Copy_pf_TIMERO_CTC;
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	90 93 3f 01 	sts	0x013F, r25
     e7c:	80 93 3e 01 	sts	0x013E, r24
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <TIMERS_enum_TIMER0_CTC_SET_CALL_BACK+0x2c>

		}
		else
		{
			Local_enu_Erorr_State=ES_NOK;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enu_Erorr_State;
     e86:	89 81       	ldd	r24, Y+1	; 0x01

}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE>:
ES_t TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE(u8 Copy_u8_OCR0_Value)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <TIMERS_enum_TIMER0_SET_COMPARE_MATCH_VALUE+0x6>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     ea0:	19 82       	std	Y+1, r1	; 0x01
    TIMERS_u8_OCR0_REG = Copy_u8_OCR0_Value;
     ea2:	ec e5       	ldi	r30, 0x5C	; 92
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	80 83       	st	Z, r24

	return Local_enu_Erorr_State;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01

}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A>:
ES_t TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A(u16 Copy_u16_OCR1_Value)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <TIMERS_enum_TIMER1_SET_COMPARE_MATCH_VALUE_A+0x6>
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	9b 83       	std	Y+3, r25	; 0x03
     ec4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     ec6:	19 82       	std	Y+1, r1	; 0x01
	TIMERS_u16_ICR1_REG = Copy_u16_OCR1_Value;
     ec8:	e6 e4       	ldi	r30, 0x46	; 70
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24

		return Local_enu_Erorr_State;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01

}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle>:
ES_t TIMERS_enum_TIMER1_SET_Servo_Motor_Angle(u16 Copy_u16_Servo_Motor_Angle)
{
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle+0xa>
     eec:	0f 92       	push	r0
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	9b 83       	std	Y+3, r25	; 0x03
     ef4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
     ef6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16_Servo_Motor_Angle <= TIMERS_SERVO_u8_MAX_ANGLE){
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	9b 81       	ldd	r25, Y+3	; 0x03
     efc:	85 3b       	cpi	r24, 0xB5	; 181
     efe:	91 05       	cpc	r25, r1
     f00:	08 f5       	brcc	.+66     	; 0xf44 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle+0x62>
		TIMERS_u16_OCR1A_REG = ((Copy_u16_Servo_Motor_Angle*1000UL)/TIMERS_SERVO_u8_MAX_ANGLE)+999;
     f02:	0a e4       	ldi	r16, 0x4A	; 74
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	cc 01       	movw	r24, r24
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	28 ee       	ldi	r18, 0xE8	; 232
     f12:	33 e0       	ldi	r19, 0x03	; 3
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	bc 01       	movw	r22, r24
     f1a:	cd 01       	movw	r24, r26
     f1c:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsi3>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	24 eb       	ldi	r18, 0xB4	; 180
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	bc 01       	movw	r22, r24
     f2e:	cd 01       	movw	r24, r26
     f30:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__udivmodsi4>
     f34:	da 01       	movw	r26, r20
     f36:	c9 01       	movw	r24, r18
     f38:	89 51       	subi	r24, 0x19	; 25
     f3a:	9c 4f       	sbci	r25, 0xFC	; 252
     f3c:	f8 01       	movw	r30, r16
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <TIMERS_enum_TIMER1_SET_Servo_Motor_Angle+0x66>

	}
	else{
		Local_enu_Erorr_State= ES_NOK;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	89 83       	std	Y+1, r24	; 0x01

	}
			return Local_enu_Erorr_State;
     f48:	89 81       	ldd	r24, Y+1	; 0x01

}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <__vector_11>:

/* prototype FOR ISR of TIMER0 OVF */
void __vector_11(void)        __attribute__((signal));
void __vector_11(void)
{
     f5a:	1f 92       	push	r1
     f5c:	0f 92       	push	r0
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	2f 93       	push	r18
     f66:	3f 93       	push	r19
     f68:	4f 93       	push	r20
     f6a:	5f 93       	push	r21
     f6c:	6f 93       	push	r22
     f6e:	7f 93       	push	r23
     f70:	8f 93       	push	r24
     f72:	9f 93       	push	r25
     f74:	af 93       	push	r26
     f76:	bf 93       	push	r27
     f78:	ef 93       	push	r30
     f7a:	ff 93       	push	r31
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
static u16 Local_TIMERS_u16_Counter_OVF =TIMERS_u8_intial_counter_value;
Local_TIMERS_u16_Counter_OVF++;
     f84:	80 91 40 01 	lds	r24, 0x0140
     f88:	90 91 41 01 	lds	r25, 0x0141
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	90 93 41 01 	sts	0x0141, r25
     f92:	80 93 40 01 	sts	0x0140, r24
if(Local_TIMERS_u16_Counter_OVF==TIMER0_u8_Counter_of_OVF)
     f96:	80 91 40 01 	lds	r24, 0x0140
     f9a:	90 91 41 01 	lds	r25, 0x0141
     f9e:	2f e0       	ldi	r18, 0x0F	; 15
     fa0:	83 34       	cpi	r24, 0x43	; 67
     fa2:	92 07       	cpc	r25, r18
     fa4:	99 f4       	brne	.+38     	; 0xfcc <__vector_11+0x72>
{
	/*update preload value*/
	TIMERS_u8_TCNT0_REG=TIMERO_u8_preload_value;
     fa6:	e2 e5       	ldi	r30, 0x52	; 82
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 ec       	ldi	r24, 0xC0	; 192
     fac:	80 83       	st	Z, r24
	/*Clear OVF counter*/
	Local_TIMERS_u16_Counter_OVF=TIMERS_u8_intial_counter_value;
     fae:	10 92 41 01 	sts	0x0141, r1
     fb2:	10 92 40 01 	sts	0x0140, r1
	/*Call APP Function*/
	if(TIMERS_pf_TIMER0_OVF != NULL)
     fb6:	80 91 3c 01 	lds	r24, 0x013C
     fba:	90 91 3d 01 	lds	r25, 0x013D
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	29 f0       	breq	.+10     	; 0xfcc <__vector_11+0x72>
	{
		TIMERS_pf_TIMER0_OVF();
     fc2:	e0 91 3c 01 	lds	r30, 0x013C
     fc6:	f0 91 3d 01 	lds	r31, 0x013D
     fca:	09 95       	icall
	}

}
}
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__vector_10>:
/* prototype FOR ISR of CTC MODE */
void __vector_10(void)        __attribute__((signal));
void __vector_10(void)
{
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	2f 93       	push	r18
     ffe:	3f 93       	push	r19
    1000:	4f 93       	push	r20
    1002:	5f 93       	push	r21
    1004:	6f 93       	push	r22
    1006:	7f 93       	push	r23
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
static u16 Local_TIMERS_u16_Counter_OVF_CTC =TIMERS_u8_intial_counter_value;
Local_TIMERS_u16_Counter_OVF_CTC++;
    101c:	80 91 42 01 	lds	r24, 0x0142
    1020:	90 91 43 01 	lds	r25, 0x0143
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	90 93 43 01 	sts	0x0143, r25
    102a:	80 93 42 01 	sts	0x0142, r24
if(Local_TIMERS_u16_Counter_OVF_CTC==TIMER0_u8_Counter_of_OVF_CTC)
    102e:	80 91 42 01 	lds	r24, 0x0142
    1032:	90 91 43 01 	lds	r25, 0x0143
    1036:	27 e2       	ldi	r18, 0x27	; 39
    1038:	80 31       	cpi	r24, 0x10	; 16
    103a:	92 07       	cpc	r25, r18
    103c:	79 f4       	brne	.+30     	; 0x105c <__vector_10+0x6a>
{

	/*Clear OVF counter*/
	Local_TIMERS_u16_Counter_OVF_CTC=TIMERS_u8_intial_counter_value;
    103e:	10 92 43 01 	sts	0x0143, r1
    1042:	10 92 42 01 	sts	0x0142, r1
	/*Call APP Function*/
	if(TIMERS_pf_TIMER0_CTC != NULL)
    1046:	80 91 3e 01 	lds	r24, 0x013E
    104a:	90 91 3f 01 	lds	r25, 0x013F
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	29 f0       	breq	.+10     	; 0x105c <__vector_10+0x6a>
	{
		TIMERS_pf_TIMER0_CTC();
    1052:	e0 91 3e 01 	lds	r30, 0x013E
    1056:	f0 91 3f 01 	lds	r31, 0x013F
    105a:	09 95       	icall
	}

}
}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	ff 91       	pop	r31
    1062:	ef 91       	pop	r30
    1064:	bf 91       	pop	r27
    1066:	af 91       	pop	r26
    1068:	9f 91       	pop	r25
    106a:	8f 91       	pop	r24
    106c:	7f 91       	pop	r23
    106e:	6f 91       	pop	r22
    1070:	5f 91       	pop	r21
    1072:	4f 91       	pop	r20
    1074:	3f 91       	pop	r19
    1076:	2f 91       	pop	r18
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <GI_enum_GI_Enable>:

//MCAL
#include "GI_config.h"
#include "GI_private.h"

ES_t  GI_enum_GI_Enable(void){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
    108a:	af e5       	ldi	r26, 0x5F	; 95
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ef e5       	ldi	r30, 0x5F	; 95
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 68       	ori	r24, 0x80	; 128
    1096:	8c 93       	st	X, r24
return ES_OK;
    1098:	80 e0       	ldi	r24, 0x00	; 0
}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <GI_enum_GI_Disable>:
ES_t  GI_enum_GI_Disable(void){
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG_REG,GI_u8_PIN7);
    10a8:	af e5       	ldi	r26, 0x5F	; 95
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ef e5       	ldi	r30, 0x5F	; 95
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 77       	andi	r24, 0x7F	; 127
    10b4:	8c 93       	st	X, r24
	return ES_OK;
    10b6:	80 e0       	ldi	r24, 0x00	; 0

}
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <DIO_voidInit>:
//MCAL Layer
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_interface.h"

void DIO_voidInit(void){
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = CONC(DIO_U8_PA7_INTIAL_DIRECTION, DIO_U8_PA6_INTIAL_DIRECTION, DIO_U8_PA5_INTIAL_DIRECTION, DIO_U8_PA4_INTIAL_DIRECTION,
    10c6:	ea e3       	ldi	r30, 0x3A	; 58
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	80 83       	st	Z, r24
		                   DIO_U8_PA3_INTIAL_DIRECTION, DIO_U8_PA2_INTIAL_DIRECTION, DIO_U8_PA1_INTIAL_DIRECTION, DIO_U8_PA0_INTIAL_DIRECTION);
		                 			
	DIO_u8_DDRB_REG = CONC(DIO_U8_PB7_INTIAL_DIRECTION, DIO_U8_PB6_INTIAL_DIRECTION, DIO_U8_PB5_INTIAL_DIRECTION, DIO_U8_PB4_INTIAL_DIRECTION,
    10ce:	e7 e3       	ldi	r30, 0x37	; 55
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	87 e2       	ldi	r24, 0x27	; 39
    10d4:	80 83       	st	Z, r24
				           DIO_U8_PB3_INTIAL_DIRECTION, DIO_U8_PB2_INTIAL_DIRECTION, DIO_U8_PB1_INTIAL_DIRECTION, DIO_U8_PB0_INTIAL_DIRECTION);
					                                                                                                                      
	DIO_u8_DDRC_REG = CONC(DIO_U8_PC7_INTIAL_DIRECTION, DIO_U8_PC6_INTIAL_DIRECTION, DIO_U8_PC5_INTIAL_DIRECTION, DIO_U8_PC4_INTIAL_DIRECTION,
    10d6:	e4 e3       	ldi	r30, 0x34	; 52
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	10 82       	st	Z, r1
		                   DIO_U8_PC3_INTIAL_DIRECTION, DIO_U8_PC2_INTIAL_DIRECTION, DIO_U8_PC1_INTIAL_DIRECTION, DIO_U8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = CONC(DIO_U8_PD7_INTIAL_DIRECTION, DIO_U8_PD6_INTIAL_DIRECTION, DIO_U8_PD5_INTIAL_DIRECTION, DIO_U8_PD4_INTIAL_DIRECTION,
    10dc:	e1 e3       	ldi	r30, 0x31	; 49
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	80 83       	st	Z, r24
				           DIO_U8_PD3_INTIAL_DIRECTION, DIO_U8_PD2_INTIAL_DIRECTION, DIO_U8_PD1_INTIAL_DIRECTION, DIO_U8_PD0_INTIAL_DIRECTION);

	DIO_u8_PORTA_REG = CONC(DIO_U8_PA7_INTIAL_VALUE, DIO_U8_PA6_INTIAL_VALUE, DIO_U8_PA5_INTIAL_VALUE, DIO_U8_PA4_INTIAL_VALUE,
    10e4:	eb e3       	ldi	r30, 0x3B	; 59
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	10 82       	st	Z, r1
						    DIO_U8_PA3_INTIAL_VALUE, DIO_U8_PA2_INTIAL_VALUE, DIO_U8_PA1_INTIAL_VALUE, DIO_U8_PA0_INTIAL_VALUE);

    DIO_u8_PORTB_REG = CONC(DIO_U8_PB7_INTIAL_VALUE, DIO_U8_PB6_INTIAL_VALUE, DIO_U8_PB5_INTIAL_VALUE, DIO_U8_PB4_INTIAL_VALUE,
    10ea:	e8 e3       	ldi	r30, 0x38	; 56
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	10 82       	st	Z, r1
						   	DIO_U8_PB3_INTIAL_VALUE, DIO_U8_PB2_INTIAL_VALUE, DIO_U8_PB1_INTIAL_VALUE, DIO_U8_PB0_INTIAL_VALUE);
												 
    DIO_u8_PORTC_REG = CONC(DIO_U8_PC7_INTIAL_VALUE, DIO_U8_PC6_INTIAL_VALUE, DIO_U8_PC5_INTIAL_VALUE, DIO_U8_PC4_INTIAL_VALUE,
    10f0:	e5 e3       	ldi	r30, 0x35	; 53
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	10 82       	st	Z, r1
					        DIO_U8_PC3_INTIAL_VALUE, DIO_U8_PC2_INTIAL_VALUE, DIO_U8_PC1_INTIAL_VALUE, DIO_U8_PC0_INTIAL_VALUE);
																		   
    DIO_u8_PORTD_REG = CONC(DIO_U8_PD7_INTIAL_VALUE, DIO_U8_PD6_INTIAL_VALUE, DIO_U8_PD5_INTIAL_VALUE, DIO_U8_PD4_INTIAL_VALUE,
    10f6:	e2 e3       	ldi	r30, 0x32	; 50
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	10 82       	st	Z, r1
						    DIO_U8_PD3_INTIAL_VALUE, DIO_U8_PD2_INTIAL_VALUE, DIO_U8_PD1_INTIAL_VALUE, DIO_U8_PD0_INTIAL_VALUE);
    }
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <DIO_u8_Set_Pin_Direction>:

u8 DIO_u8_Set_Pin_Direction  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Direction ){
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	2e 97       	sbiw	r28, 0x0e	; 14
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	8a 83       	std	Y+2, r24	; 0x02
    1118:	6b 83       	std	Y+3, r22	; 0x03
    111a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    111c:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Direction == DIO_u8_INTIAL_INPUT)||(Copy_u8_Pin_Direction == DIO_u8_INTIAL_OUTPUT)))
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	84 30       	cpi	r24, 0x04	; 4
    1122:	08 f0       	brcs	.+2      	; 0x1126 <DIO_u8_Set_Pin_Direction+0x24>
    1124:	15 c1       	rjmp	.+554    	; 0x1350 <DIO_u8_Set_Pin_Direction+0x24e>
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	88 30       	cpi	r24, 0x08	; 8
    112a:	08 f0       	brcs	.+2      	; 0x112e <DIO_u8_Set_Pin_Direction+0x2c>
    112c:	11 c1       	rjmp	.+546    	; 0x1350 <DIO_u8_Set_Pin_Direction+0x24e>
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	88 23       	and	r24, r24
    1132:	21 f0       	breq	.+8      	; 0x113c <DIO_u8_Set_Pin_Direction+0x3a>
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	09 f0       	breq	.+2      	; 0x113c <DIO_u8_Set_Pin_Direction+0x3a>
    113a:	0a c1       	rjmp	.+532    	; 0x1350 <DIO_u8_Set_Pin_Direction+0x24e>
	{
        switch (Copy_u8_Port_ID)
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3e 87       	std	Y+14, r19	; 0x0e
    1144:	2d 87       	std	Y+13, r18	; 0x0d
    1146:	8d 85       	ldd	r24, Y+13	; 0x0d
    1148:	9e 85       	ldd	r25, Y+14	; 0x0e
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <DIO_u8_Set_Pin_Direction+0x50>
    1150:	51 c0       	rjmp	.+162    	; 0x11f4 <DIO_u8_Set_Pin_Direction+0xf2>
    1152:	2d 85       	ldd	r18, Y+13	; 0x0d
    1154:	3e 85       	ldd	r19, Y+14	; 0x0e
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <DIO_u8_Set_Pin_Direction+0x64>
    115c:	8d 85       	ldd	r24, Y+13	; 0x0d
    115e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	71 f0       	breq	.+28     	; 0x1180 <DIO_u8_Set_Pin_Direction+0x7e>
    1164:	f7 c0       	rjmp	.+494    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
    1166:	2d 85       	ldd	r18, Y+13	; 0x0d
    1168:	3e 85       	ldd	r19, Y+14	; 0x0e
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <DIO_u8_Set_Pin_Direction+0x70>
    1170:	7b c0       	rjmp	.+246    	; 0x1268 <DIO_u8_Set_Pin_Direction+0x166>
    1172:	8d 85       	ldd	r24, Y+13	; 0x0d
    1174:	9e 85       	ldd	r25, Y+14	; 0x0e
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <DIO_u8_Set_Pin_Direction+0x7c>
    117c:	af c0       	rjmp	.+350    	; 0x12dc <DIO_u8_Set_Pin_Direction+0x1da>
    117e:	ea c0       	rjmp	.+468    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
        {
               case DIO_u8_PORTA:
            	   switch (Copy_u8_Pin_Direction)
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	3c 87       	std	Y+12, r19	; 0x0c
    1188:	2b 87       	std	Y+11, r18	; 0x0b
    118a:	8b 85       	ldd	r24, Y+11	; 0x0b
    118c:	9c 85       	ldd	r25, Y+12	; 0x0c
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	c9 f0       	breq	.+50     	; 0x11c4 <DIO_u8_Set_Pin_Direction+0xc2>
    1192:	2b 85       	ldd	r18, Y+11	; 0x0b
    1194:	3c 85       	ldd	r19, Y+12	; 0x0c
    1196:	21 30       	cpi	r18, 0x01	; 1
    1198:	31 05       	cpc	r19, r1
    119a:	49 f5       	brne	.+82     	; 0x11ee <DIO_u8_Set_Pin_Direction+0xec>
            	   {
                    	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    119c:	aa e3       	ldi	r26, 0x3A	; 58
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ea e3       	ldi	r30, 0x3A	; 58
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_u8_Set_Pin_Direction+0xb8>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_u8_Set_Pin_Direction+0xb4>
    11be:	84 2b       	or	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	c8 c0       	rjmp	.+400    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
                    	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8_Pin_ID);break;
    11c4:	aa e3       	ldi	r26, 0x3A	; 58
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	ea e3       	ldi	r30, 0x3A	; 58
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_u8_Set_Pin_Direction+0xe0>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_u8_Set_Pin_Direction+0xdc>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	b3 c0       	rjmp	.+358    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	b0 c0       	rjmp	.+352    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>

            	   }
                  break;
               case DIO_u8_PORTB:
             	   switch (Copy_u8_Pin_Direction)
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3a 87       	std	Y+10, r19	; 0x0a
    11fc:	29 87       	std	Y+9, r18	; 0x09
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	c9 f0       	breq	.+50     	; 0x1238 <DIO_u8_Set_Pin_Direction+0x136>
    1206:	29 85       	ldd	r18, Y+9	; 0x09
    1208:	3a 85       	ldd	r19, Y+10	; 0x0a
    120a:	21 30       	cpi	r18, 0x01	; 1
    120c:	31 05       	cpc	r19, r1
    120e:	49 f5       	brne	.+82     	; 0x1262 <DIO_u8_Set_Pin_Direction+0x160>
             	   {
                     	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    1210:	a7 e3       	ldi	r26, 0x37	; 55
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e7 e3       	ldi	r30, 0x37	; 55
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <DIO_u8_Set_Pin_Direction+0x12c>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <DIO_u8_Set_Pin_Direction+0x128>
    1232:	84 2b       	or	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	8e c0       	rjmp	.+284    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
                     	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8_Pin_ID);break;
    1238:	a7 e3       	ldi	r26, 0x37	; 55
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e7 e3       	ldi	r30, 0x37	; 55
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_u8_Set_Pin_Direction+0x154>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_u8_Set_Pin_Direction+0x150>
    125a:	80 95       	com	r24
    125c:	84 23       	and	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	79 c0       	rjmp	.+242    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	76 c0       	rjmp	.+236    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>

             	   }
                   break;
               case DIO_u8_PORTC:
                   switch (Copy_u8_Pin_Direction)
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	38 87       	std	Y+8, r19	; 0x08
    1270:	2f 83       	std	Y+7, r18	; 0x07
    1272:	8f 81       	ldd	r24, Y+7	; 0x07
    1274:	98 85       	ldd	r25, Y+8	; 0x08
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	c9 f0       	breq	.+50     	; 0x12ac <DIO_u8_Set_Pin_Direction+0x1aa>
    127a:	2f 81       	ldd	r18, Y+7	; 0x07
    127c:	38 85       	ldd	r19, Y+8	; 0x08
    127e:	21 30       	cpi	r18, 0x01	; 1
    1280:	31 05       	cpc	r19, r1
    1282:	49 f5       	brne	.+82     	; 0x12d6 <DIO_u8_Set_Pin_Direction+0x1d4>
                 	   {
                         	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    1284:	a4 e3       	ldi	r26, 0x34	; 52
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e4 e3       	ldi	r30, 0x34	; 52
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 2e       	mov	r0, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_u8_Set_Pin_Direction+0x1a0>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_u8_Set_Pin_Direction+0x19c>
    12a6:	84 2b       	or	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	54 c0       	rjmp	.+168    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
                         	   case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8_Pin_ID);break;
    12ac:	a4 e3       	ldi	r26, 0x34	; 52
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e4 e3       	ldi	r30, 0x34	; 52
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_u8_Set_Pin_Direction+0x1c8>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_u8_Set_Pin_Direction+0x1c4>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	3f c0       	rjmp	.+126    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
  			           	     default :Local_u8_Erorr_State = ES_NOK ;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	3c c0       	rjmp	.+120    	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>

                 	   }
                       break;

               case DIO_u8_PORTD:
                    switch (Copy_u8_Pin_Direction)
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3e 83       	std	Y+6, r19	; 0x06
    12e4:	2d 83       	std	Y+5, r18	; 0x05
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	c9 f0       	breq	.+50     	; 0x1320 <DIO_u8_Set_Pin_Direction+0x21e>
    12ee:	2d 81       	ldd	r18, Y+5	; 0x05
    12f0:	3e 81       	ldd	r19, Y+6	; 0x06
    12f2:	21 30       	cpi	r18, 0x01	; 1
    12f4:	31 05       	cpc	r19, r1
    12f6:	49 f5       	brne	.+82     	; 0x134a <DIO_u8_Set_Pin_Direction+0x248>
                     	   {
                             	   case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    12f8:	a1 e3       	ldi	r26, 0x31	; 49
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e1 e3       	ldi	r30, 0x31	; 49
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_u8_Set_Pin_Direction+0x214>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_u8_Set_Pin_Direction+0x210>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	1a c0       	rjmp	.+52     	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
                             	   case DIO_u8_INPUT:CLR_BIT (DIO_u8_DDRD_REG,Copy_u8_Pin_ID);break;
    1320:	a1 e3       	ldi	r26, 0x31	; 49
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e1 e3       	ldi	r30, 0x31	; 49
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_u8_Set_Pin_Direction+0x23c>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_u8_Set_Pin_Direction+0x238>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
      			           	     default :Local_u8_Erorr_State = ES_NOK ;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_u8_Set_Pin_Direction+0x252>
                     	   }
                           break;
        }
	}
	else {
		Local_u8_Erorr_State = ES_NOK ;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_Erorr_State ;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	2e 96       	adiw	r28, 0x0e	; 14
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <DIO_u8_Set_Pin_Value>:

u8 DIO_u8_Set_Pin_Value  (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 Copy_u8_Pin_Value ){
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	2e 97       	sbiw	r28, 0x0e	; 14
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	8a 83       	std	Y+2, r24	; 0x02
    137e:	6b 83       	std	Y+3, r22	; 0x03
    1380:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_Erorr_State = ES_OK ;
    1382:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && ((Copy_u8_Pin_Value == DIO_u8_INPUT)||(Copy_u8_Pin_Value == DIO_u8_OUTPUT)))
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	08 f0       	brcs	.+2      	; 0x138c <DIO_u8_Set_Pin_Value+0x24>
    138a:	15 c1       	rjmp	.+554    	; 0x15b6 <DIO_u8_Set_Pin_Value+0x24e>
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	88 30       	cpi	r24, 0x08	; 8
    1390:	08 f0       	brcs	.+2      	; 0x1394 <DIO_u8_Set_Pin_Value+0x2c>
    1392:	11 c1       	rjmp	.+546    	; 0x15b6 <DIO_u8_Set_Pin_Value+0x24e>
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	88 23       	and	r24, r24
    1398:	21 f0       	breq	.+8      	; 0x13a2 <DIO_u8_Set_Pin_Value+0x3a>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	09 f0       	breq	.+2      	; 0x13a2 <DIO_u8_Set_Pin_Value+0x3a>
    13a0:	0a c1       	rjmp	.+532    	; 0x15b6 <DIO_u8_Set_Pin_Value+0x24e>
	{
		switch (Copy_u8_Port_ID)
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3e 87       	std	Y+14, r19	; 0x0e
    13aa:	2d 87       	std	Y+13, r18	; 0x0d
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <DIO_u8_Set_Pin_Value+0x50>
    13b6:	51 c0       	rjmp	.+162    	; 0x145a <DIO_u8_Set_Pin_Value+0xf2>
    13b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    13ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	2c f4       	brge	.+10     	; 0x13cc <DIO_u8_Set_Pin_Value+0x64>
    13c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	71 f0       	breq	.+28     	; 0x13e6 <DIO_u8_Set_Pin_Value+0x7e>
    13ca:	f7 c0       	rjmp	.+494    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
    13cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    13ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <DIO_u8_Set_Pin_Value+0x70>
    13d6:	7b c0       	rjmp	.+246    	; 0x14ce <DIO_u8_Set_Pin_Value+0x166>
    13d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13da:	9e 85       	ldd	r25, Y+14	; 0x0e
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_u8_Set_Pin_Value+0x7c>
    13e2:	af c0       	rjmp	.+350    	; 0x1542 <DIO_u8_Set_Pin_Value+0x1da>
    13e4:	ea c0       	rjmp	.+468    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Pin_Value)
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	3c 87       	std	Y+12, r19	; 0x0c
    13ee:	2b 87       	std	Y+11, r18	; 0x0b
    13f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	c9 f0       	breq	.+50     	; 0x142a <DIO_u8_Set_Pin_Value+0xc2>
    13f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    13fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    13fc:	21 30       	cpi	r18, 0x01	; 1
    13fe:	31 05       	cpc	r19, r1
    1400:	49 f5       	brne	.+82     	; 0x1454 <DIO_u8_Set_Pin_Value+0xec>
			{
			     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    1402:	ab e3       	ldi	r26, 0x3B	; 59
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_u8_Set_Pin_Value+0xb8>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_u8_Set_Pin_Value+0xb4>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	c8 c0       	rjmp	.+400    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTA_REG,Copy_u8_Pin_ID);break;
    142a:	ab e3       	ldi	r26, 0x3B	; 59
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e3       	ldi	r30, 0x3B	; 59
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_u8_Set_Pin_Value+0xe0>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_u8_Set_Pin_Value+0xdc>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	b3 c0       	rjmp	.+358    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
           	     default :Local_u8_Erorr_State = ES_NOK ;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	b0 c0       	rjmp	.+352    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>

			}
			break;
		case DIO_u8_PORTB :
			switch (Copy_u8_Pin_Value)
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	3a 87       	std	Y+10, r19	; 0x0a
    1462:	29 87       	std	Y+9, r18	; 0x09
    1464:	89 85       	ldd	r24, Y+9	; 0x09
    1466:	9a 85       	ldd	r25, Y+10	; 0x0a
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	c9 f0       	breq	.+50     	; 0x149e <DIO_u8_Set_Pin_Value+0x136>
    146c:	29 85       	ldd	r18, Y+9	; 0x09
    146e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1470:	21 30       	cpi	r18, 0x01	; 1
    1472:	31 05       	cpc	r19, r1
    1474:	49 f5       	brne	.+82     	; 0x14c8 <DIO_u8_Set_Pin_Value+0x160>
				{
				     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    1476:	a8 e3       	ldi	r26, 0x38	; 56
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e8 e3       	ldi	r30, 0x38	; 56
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_u8_Set_Pin_Value+0x12c>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_u8_Set_Pin_Value+0x128>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	8e c0       	rjmp	.+284    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
	           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTB_REG,Copy_u8_Pin_ID);break;
    149e:	a8 e3       	ldi	r26, 0x38	; 56
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e8 e3       	ldi	r30, 0x38	; 56
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_u8_Set_Pin_Value+0x154>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_u8_Set_Pin_Value+0x150>
    14c0:	80 95       	com	r24
    14c2:	84 23       	and	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	79 c0       	rjmp	.+242    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
	           	     default :Local_u8_Erorr_State = ES_NOK ;
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	76 c0       	rjmp	.+236    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>

				}
	     	break;
		case DIO_u8_PORTC :
			switch (Copy_u8_Pin_Value)
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	38 87       	std	Y+8, r19	; 0x08
    14d6:	2f 83       	std	Y+7, r18	; 0x07
    14d8:	8f 81       	ldd	r24, Y+7	; 0x07
    14da:	98 85       	ldd	r25, Y+8	; 0x08
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	c9 f0       	breq	.+50     	; 0x1512 <DIO_u8_Set_Pin_Value+0x1aa>
    14e0:	2f 81       	ldd	r18, Y+7	; 0x07
    14e2:	38 85       	ldd	r19, Y+8	; 0x08
    14e4:	21 30       	cpi	r18, 0x01	; 1
    14e6:	31 05       	cpc	r19, r1
    14e8:	49 f5       	brne	.+82     	; 0x153c <DIO_u8_Set_Pin_Value+0x1d4>
					{
					     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    14ea:	a5 e3       	ldi	r26, 0x35	; 53
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e3       	ldi	r30, 0x35	; 53
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_u8_Set_Pin_Value+0x1a0>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_u8_Set_Pin_Value+0x19c>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	54 c0       	rjmp	.+168    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
		           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTC_REG,Copy_u8_Pin_ID);break;
    1512:	a5 e3       	ldi	r26, 0x35	; 53
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e3       	ldi	r30, 0x35	; 53
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_u8_Set_Pin_Value+0x1c8>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_u8_Set_Pin_Value+0x1c4>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	3f c0       	rjmp	.+126    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
		           	     default :Local_u8_Erorr_State = ES_NOK ;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	3c c0       	rjmp	.+120    	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>

					}
		   break;
		case DIO_u8_PORTD :
			switch (Copy_u8_Pin_Value)
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	3e 83       	std	Y+6, r19	; 0x06
    154a:	2d 83       	std	Y+5, r18	; 0x05
    154c:	8d 81       	ldd	r24, Y+5	; 0x05
    154e:	9e 81       	ldd	r25, Y+6	; 0x06
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	c9 f0       	breq	.+50     	; 0x1586 <DIO_u8_Set_Pin_Value+0x21e>
    1554:	2d 81       	ldd	r18, Y+5	; 0x05
    1556:	3e 81       	ldd	r19, Y+6	; 0x06
    1558:	21 30       	cpi	r18, 0x01	; 1
    155a:	31 05       	cpc	r19, r1
    155c:	49 f5       	brne	.+82     	; 0x15b0 <DIO_u8_Set_Pin_Value+0x248>
						{
						     case DIO_u8_HIGH :SET_BIT(DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    155e:	a2 e3       	ldi	r26, 0x32	; 50
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e2 e3       	ldi	r30, 0x32	; 50
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_u8_Set_Pin_Value+0x214>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_u8_Set_Pin_Value+0x210>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	1a c0       	rjmp	.+52     	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
			           	     case DIO_u8_LOW:CLR_BIT (DIO_u8_PORTD_REG,Copy_u8_Pin_ID);break;
    1586:	a2 e3       	ldi	r26, 0x32	; 50
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e2 e3       	ldi	r30, 0x32	; 50
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_u8_Set_Pin_Value+0x23c>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_u8_Set_Pin_Value+0x238>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
			           	     default :Local_u8_Erorr_State = ES_NOK ;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_u8_Set_Pin_Value+0x252>
						}
			break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_u8_Erorr_State ;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    15bc:	2e 96       	adiw	r28, 0x0e	; 14
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <DIO_u8_Get_Pin_Value>:

u8 DIO_u8_Get_Pin_Value      (u8 Copy_u8_Port_ID, u8 Copy_u8_Pin_ID, u8 *Copy_u8_Returned_Pin_Value ){
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	28 97       	sbiw	r28, 0x08	; 8
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	6c 83       	std	Y+4, r22	; 0x04
    15e6:	5e 83       	std	Y+6, r21	; 0x06
    15e8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_Erorr_State = ES_OK ;
    15ea:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_Pin_Value ;
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && (Copy_u8_Pin_ID <= DIO_u8_PIN7) && (Copy_u8_Returned_Pin_Value != NULL)){
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	84 30       	cpi	r24, 0x04	; 4
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <DIO_u8_Get_Pin_Value+0x26>
    15f2:	9e c0       	rjmp	.+316    	; 0x1730 <DIO_u8_Get_Pin_Value+0x162>
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	88 30       	cpi	r24, 0x08	; 8
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <DIO_u8_Get_Pin_Value+0x2e>
    15fa:	9a c0       	rjmp	.+308    	; 0x1730 <DIO_u8_Get_Pin_Value+0x162>
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	09 f4       	brne	.+2      	; 0x1606 <DIO_u8_Get_Pin_Value+0x38>
    1604:	95 c0       	rjmp	.+298    	; 0x1730 <DIO_u8_Get_Pin_Value+0x162>
		switch (Copy_u8_Port_ID)
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	38 87       	std	Y+8, r19	; 0x08
    160e:	2f 83       	std	Y+7, r18	; 0x07
    1610:	8f 81       	ldd	r24, Y+7	; 0x07
    1612:	98 85       	ldd	r25, Y+8	; 0x08
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	91 05       	cpc	r25, r1
    1618:	a1 f1       	breq	.+104    	; 0x1682 <DIO_u8_Get_Pin_Value+0xb4>
    161a:	2f 81       	ldd	r18, Y+7	; 0x07
    161c:	38 85       	ldd	r19, Y+8	; 0x08
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	2c f4       	brge	.+10     	; 0x162e <DIO_u8_Get_Pin_Value+0x60>
    1624:	8f 81       	ldd	r24, Y+7	; 0x07
    1626:	98 85       	ldd	r25, Y+8	; 0x08
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	71 f0       	breq	.+28     	; 0x1648 <DIO_u8_Get_Pin_Value+0x7a>
    162c:	83 c0       	rjmp	.+262    	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
    162e:	2f 81       	ldd	r18, Y+7	; 0x07
    1630:	38 85       	ldd	r19, Y+8	; 0x08
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <DIO_u8_Get_Pin_Value+0x6c>
    1638:	41 c0       	rjmp	.+130    	; 0x16bc <DIO_u8_Get_Pin_Value+0xee>
    163a:	8f 81       	ldd	r24, Y+7	; 0x07
    163c:	98 85       	ldd	r25, Y+8	; 0x08
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <DIO_u8_Get_Pin_Value+0x78>
    1644:	58 c0       	rjmp	.+176    	; 0x16f6 <DIO_u8_Get_Pin_Value+0x128>
    1646:	76 c0       	rjmp	.+236    	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
		{
		     case DIO_u8_PORTA :
		      Local_u8_Pin_Value = GET_BIT (DIO_u8_PINA_REG, Copy_u8_Pin_ID) ;
    1648:	e9 e3       	ldi	r30, 0x39	; 57
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	02 2e       	mov	r0, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_u8_Get_Pin_Value+0x94>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_u8_Get_Pin_Value+0x90>
    1666:	84 23       	and	r24, r20
    1668:	89 83       	std	Y+1, r24	; 0x01

		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	88 23       	and	r24, r24
    166e:	21 f4       	brne	.+8      	; 0x1678 <DIO_u8_Get_Pin_Value+0xaa>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    1670:	ed 81       	ldd	r30, Y+5	; 0x05
    1672:	fe 81       	ldd	r31, Y+6	; 0x06
    1674:	10 82       	st	Z, r1
    1676:	5e c0       	rjmp	.+188    	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		    	 else
		    	 {
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1678:	ed 81       	ldd	r30, Y+5	; 0x05
    167a:	fe 81       	ldd	r31, Y+6	; 0x06
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	80 83       	st	Z, r24
    1680:	59 c0       	rjmp	.+178    	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
		    	 }
		     break;
		     case DIO_u8_PORTB :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINB_REG,Copy_u8_Pin_ID ) ;
    1682:	e6 e3       	ldi	r30, 0x36	; 54
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <DIO_u8_Get_Pin_Value+0xce>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <DIO_u8_Get_Pin_Value+0xca>
    16a0:	84 23       	and	r24, r20
    16a2:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value == DIO_u8_LOW){
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	88 23       	and	r24, r24
    16a8:	21 f4       	brne	.+8      	; 0x16b2 <DIO_u8_Get_Pin_Value+0xe4>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    16aa:	ed 81       	ldd	r30, Y+5	; 0x05
    16ac:	fe 81       	ldd	r31, Y+6	; 0x06
    16ae:	10 82       	st	Z, r1
    16b0:	41 c0       	rjmp	.+130    	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    16b2:	ed 81       	ldd	r30, Y+5	; 0x05
    16b4:	fe 81       	ldd	r31, Y+6	; 0x06
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	80 83       	st	Z, r24
    16ba:	3c c0       	rjmp	.+120    	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTC :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PINC_REG,Copy_u8_Pin_ID ) ;
    16bc:	e3 e3       	ldi	r30, 0x33	; 51
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_u8_Get_Pin_Value+0x108>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <DIO_u8_Get_Pin_Value+0x104>
    16da:	84 23       	and	r24, r20
    16dc:	89 83       	std	Y+1, r24	; 0x01
		    		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	88 23       	and	r24, r24
    16e2:	21 f4       	brne	.+8      	; 0x16ec <DIO_u8_Get_Pin_Value+0x11e>
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    16e4:	ed 81       	ldd	r30, Y+5	; 0x05
    16e6:	fe 81       	ldd	r31, Y+6	; 0x06
    16e8:	10 82       	st	Z, r1
    16ea:	24 c0       	rjmp	.+72     	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 * Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    16ec:	ed 81       	ldd	r30, Y+5	; 0x05
    16ee:	fe 81       	ldd	r31, Y+6	; 0x06
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	80 83       	st	Z, r24
    16f4:	1f c0       	rjmp	.+62     	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		     case DIO_u8_PORTD :
		    	 Local_u8_Pin_Value = GET_BIT(DIO_u8_PIND_REG,Copy_u8_Pin_ID ) ;
    16f6:	e0 e3       	ldi	r30, 0x30	; 48
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_u8_Get_Pin_Value+0x142>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_u8_Get_Pin_Value+0x13e>
    1714:	84 23       	and	r24, r20
    1716:	89 83       	std	Y+1, r24	; 0x01
		    	 if (Local_u8_Pin_Value ==DIO_u8_LOW){
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	88 23       	and	r24, r24
    171c:	21 f4       	brne	.+8      	; 0x1726 <DIO_u8_Get_Pin_Value+0x158>
		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_LOW ;
    171e:	ed 81       	ldd	r30, Y+5	; 0x05
    1720:	fe 81       	ldd	r31, Y+6	; 0x06
    1722:	10 82       	st	Z, r1
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		    	 else
		    		    	 {
		    		    		 *Copy_u8_Returned_Pin_Value = DIO_u8_HIGH ;
    1726:	ed 81       	ldd	r30, Y+5	; 0x05
    1728:	fe 81       	ldd	r31, Y+6	; 0x06
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	80 83       	st	Z, r24
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_u8_Get_Pin_Value+0x166>
		    		    	 }
		    		     break;
		}
	}
	else {
			Local_u8_Erorr_State = ES_NOK ;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	8a 83       	std	Y+2, r24	; 0x02
		}
		return Local_u8_Erorr_State ;
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1736:	28 96       	adiw	r28, 0x08	; 8
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <DIO_u8_Set_Port_Direction>:

u8 DIO_u8_Set_Port_Direction (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Direction ){
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	2d 97       	sbiw	r28, 0x0d	; 13
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	8a 83       	std	Y+2, r24	; 0x02
    175e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1760:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8_Port_ID <= DIO_u8_PORTD ) && ((Copy_u8_Port_Direction == DIO_u8_INPUT)||(Copy_u8_Port_Direction == DIO_u8_OUTPUT)))
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	84 30       	cpi	r24, 0x04	; 4
    1766:	08 f0       	brcs	.+2      	; 0x176a <DIO_u8_Set_Port_Direction+0x22>
    1768:	87 c0       	rjmp	.+270    	; 0x1878 <DIO_u8_Set_Port_Direction+0x130>
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	88 23       	and	r24, r24
    176e:	21 f0       	breq	.+8      	; 0x1778 <DIO_u8_Set_Port_Direction+0x30>
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	09 f0       	breq	.+2      	; 0x1778 <DIO_u8_Set_Port_Direction+0x30>
    1776:	80 c0       	rjmp	.+256    	; 0x1878 <DIO_u8_Set_Port_Direction+0x130>
	{
		switch (Copy_u8_Port_ID)
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	3d 87       	std	Y+13, r19	; 0x0d
    1780:	2c 87       	std	Y+12, r18	; 0x0c
    1782:	8c 85       	ldd	r24, Y+12	; 0x0c
    1784:	9d 85       	ldd	r25, Y+13	; 0x0d
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	91 05       	cpc	r25, r1
    178a:	71 f1       	breq	.+92     	; 0x17e8 <DIO_u8_Set_Port_Direction+0xa0>
    178c:	2c 85       	ldd	r18, Y+12	; 0x0c
    178e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1790:	22 30       	cpi	r18, 0x02	; 2
    1792:	31 05       	cpc	r19, r1
    1794:	2c f4       	brge	.+10     	; 0x17a0 <DIO_u8_Set_Port_Direction+0x58>
    1796:	8c 85       	ldd	r24, Y+12	; 0x0c
    1798:	9d 85       	ldd	r25, Y+13	; 0x0d
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f0       	breq	.+26     	; 0x17b8 <DIO_u8_Set_Port_Direction+0x70>
    179e:	69 c0       	rjmp	.+210    	; 0x1872 <DIO_u8_Set_Port_Direction+0x12a>
    17a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    17a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	b1 f1       	breq	.+108    	; 0x1816 <DIO_u8_Set_Port_Direction+0xce>
    17aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	91 05       	cpc	r25, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <DIO_u8_Set_Port_Direction+0x6e>
    17b4:	47 c0       	rjmp	.+142    	; 0x1844 <DIO_u8_Set_Port_Direction+0xfc>
    17b6:	5d c0       	rjmp	.+186    	; 0x1872 <DIO_u8_Set_Port_Direction+0x12a>
		{
		case DIO_u8_PORTA :
			switch (Copy_u8_Port_Direction)
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	3b 87       	std	Y+11, r19	; 0x0b
    17c0:	2a 87       	std	Y+10, r18	; 0x0a
    17c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    17c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	59 f0       	breq	.+22     	; 0x17e0 <DIO_u8_Set_Port_Direction+0x98>
    17ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    17cc:	3b 85       	ldd	r19, Y+11	; 0x0b
    17ce:	21 30       	cpi	r18, 0x01	; 1
    17d0:	31 05       	cpc	r19, r1
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <DIO_u8_Set_Port_Direction+0x8e>
    17d4:	53 c0       	rjmp	.+166    	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
			{
			    case DIO_u8_OUTPUT : DIO_u8_PORTA_REG = 0xff;break;
    17d6:	eb e3       	ldi	r30, 0x3B	; 59
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	80 83       	st	Z, r24
    17de:	4e c0       	rjmp	.+156    	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
			    case DIO_u8_INPUT : DIO_u8_PORTA_REG = 0x00;break;
    17e0:	eb e3       	ldi	r30, 0x3B	; 59
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	10 82       	st	Z, r1
    17e6:	4a c0       	rjmp	.+148    	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
			}
			break;
			case DIO_u8_PORTB :
				switch (Copy_u8_Port_Direction)
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	39 87       	std	Y+9, r19	; 0x09
    17f0:	28 87       	std	Y+8, r18	; 0x08
    17f2:	88 85       	ldd	r24, Y+8	; 0x08
    17f4:	99 85       	ldd	r25, Y+9	; 0x09
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	51 f0       	breq	.+20     	; 0x180e <DIO_u8_Set_Port_Direction+0xc6>
    17fa:	28 85       	ldd	r18, Y+8	; 0x08
    17fc:	39 85       	ldd	r19, Y+9	; 0x09
    17fe:	21 30       	cpi	r18, 0x01	; 1
    1800:	31 05       	cpc	r19, r1
    1802:	e1 f5       	brne	.+120    	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
				{
				    case DIO_u8_OUTPUT : DIO_u8_PORTB_REG = 0xff;break;
    1804:	e8 e3       	ldi	r30, 0x38	; 56
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	8f ef       	ldi	r24, 0xFF	; 255
    180a:	80 83       	st	Z, r24
    180c:	37 c0       	rjmp	.+110    	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
				    case DIO_u8_INPUT : DIO_u8_PORTB_REG = 0x00;break;
    180e:	e8 e3       	ldi	r30, 0x38	; 56
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	10 82       	st	Z, r1
    1814:	33 c0       	rjmp	.+102    	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
				}
				break;
				case DIO_u8_PORTC :
					switch (Copy_u8_Port_Direction)
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3f 83       	std	Y+7, r19	; 0x07
    181e:	2e 83       	std	Y+6, r18	; 0x06
    1820:	8e 81       	ldd	r24, Y+6	; 0x06
    1822:	9f 81       	ldd	r25, Y+7	; 0x07
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	51 f0       	breq	.+20     	; 0x183c <DIO_u8_Set_Port_Direction+0xf4>
    1828:	2e 81       	ldd	r18, Y+6	; 0x06
    182a:	3f 81       	ldd	r19, Y+7	; 0x07
    182c:	21 30       	cpi	r18, 0x01	; 1
    182e:	31 05       	cpc	r19, r1
    1830:	29 f5       	brne	.+74     	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
					{
					    case DIO_u8_OUTPUT : DIO_u8_PORTC_REG = 0xff;break;
    1832:	e5 e3       	ldi	r30, 0x35	; 53
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	80 83       	st	Z, r24
    183a:	20 c0       	rjmp	.+64     	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
					    case DIO_u8_INPUT : DIO_u8_PORTC_REG = 0x00;break;
    183c:	e5 e3       	ldi	r30, 0x35	; 53
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	10 82       	st	Z, r1
    1842:	1c c0       	rjmp	.+56     	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
					}
					break;
					case DIO_u8_PORTD :
						switch (Copy_u8_Port_Direction)
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3d 83       	std	Y+5, r19	; 0x05
    184c:	2c 83       	std	Y+4, r18	; 0x04
    184e:	8c 81       	ldd	r24, Y+4	; 0x04
    1850:	9d 81       	ldd	r25, Y+5	; 0x05
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	51 f0       	breq	.+20     	; 0x186a <DIO_u8_Set_Port_Direction+0x122>
    1856:	2c 81       	ldd	r18, Y+4	; 0x04
    1858:	3d 81       	ldd	r19, Y+5	; 0x05
    185a:	21 30       	cpi	r18, 0x01	; 1
    185c:	31 05       	cpc	r19, r1
    185e:	71 f4       	brne	.+28     	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
						{
						    case DIO_u8_OUTPUT : DIO_u8_PORTD_REG = 0xff;break;
    1860:	e2 e3       	ldi	r30, 0x32	; 50
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	80 83       	st	Z, r24
    1868:	09 c0       	rjmp	.+18     	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
						    case DIO_u8_INPUT : DIO_u8_PORTD_REG = 0x00;break;
    186a:	e2 e3       	ldi	r30, 0x32	; 50
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	10 82       	st	Z, r1
    1870:	05 c0       	rjmp	.+10     	; 0x187c <DIO_u8_Set_Port_Direction+0x134>
						}
						break;
						default:Local_u8_Erorr_State = ES_NOK ;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_u8_Set_Port_Direction+0x134>

		}
	}
	else {
				Local_u8_Erorr_State = ES_NOK ;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    187c:	89 81       	ldd	r24, Y+1	; 0x01

}
    187e:	2d 96       	adiw	r28, 0x0d	; 13
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <DIO_u8_Set_Port_Value>:

u8 DIO_u8_Set_Port_Value     (u8 Copy_u8_Port_ID, u8 Copy_u8_Port_Value ){
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <DIO_u8_Set_Port_Value+0x6>
    1896:	00 d0       	rcall	.+0      	; 0x1898 <DIO_u8_Set_Port_Value+0x8>
    1898:	0f 92       	push	r0
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	8a 83       	std	Y+2, r24	; 0x02
    18a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    18a2:	19 82       	std	Y+1, r1	; 0x01

			switch (Copy_u8_Port_ID)
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	3d 83       	std	Y+5, r19	; 0x05
    18ac:	2c 83       	std	Y+4, r18	; 0x04
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	9d 81       	ldd	r25, Y+5	; 0x05
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	91 05       	cpc	r25, r1
    18b6:	d1 f0       	breq	.+52     	; 0x18ec <DIO_u8_Set_Port_Value+0x5c>
    18b8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ba:	3d 81       	ldd	r19, Y+5	; 0x05
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	2c f4       	brge	.+10     	; 0x18cc <DIO_u8_Set_Port_Value+0x3c>
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <DIO_u8_Set_Port_Value+0x52>
    18ca:	1f c0       	rjmp	.+62     	; 0x190a <DIO_u8_Set_Port_Value+0x7a>
    18cc:	2c 81       	ldd	r18, Y+4	; 0x04
    18ce:	3d 81       	ldd	r19, Y+5	; 0x05
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <DIO_u8_Set_Port_Value+0x66>
    18d6:	8c 81       	ldd	r24, Y+4	; 0x04
    18d8:	9d 81       	ldd	r25, Y+5	; 0x05
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	81 f0       	breq	.+32     	; 0x1900 <DIO_u8_Set_Port_Value+0x70>
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <DIO_u8_Set_Port_Value+0x7a>
			{
			case DIO_u8_PORTA:DIO_u8_PORTA_REG =Copy_u8_Port_Value; break;
    18e2:	eb e3       	ldi	r30, 0x3B	; 59
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	80 83       	st	Z, r24
    18ea:	11 c0       	rjmp	.+34     	; 0x190e <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTB:DIO_u8_PORTB_REG =Copy_u8_Port_Value; break;
    18ec:	e8 e3       	ldi	r30, 0x38	; 56
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	80 83       	st	Z, r24
    18f4:	0c c0       	rjmp	.+24     	; 0x190e <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTC:DIO_u8_PORTC_REG =Copy_u8_Port_Value; break;
    18f6:	e5 e3       	ldi	r30, 0x35	; 53
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	80 83       	st	Z, r24
    18fe:	07 c0       	rjmp	.+14     	; 0x190e <DIO_u8_Set_Port_Value+0x7e>
			case DIO_u8_PORTD:DIO_u8_PORTD_REG =Copy_u8_Port_Value; break;
    1900:	e2 e3       	ldi	r30, 0x32	; 50
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	80 83       	st	Z, r24
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_u8_Set_Port_Value+0x7e>
			default :Local_u8_Erorr_State = ES_NOK;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	89 83       	std	Y+1, r24	; 0x01
			}
			return Local_u8_Erorr_State ;
    190e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <DIO_u8_Get_Port_Value>:

u8 DIO_u8_Get_Port_Value     (u8 Copy_u8_Port_ID, u8 * Copy_u8_Returned_Port_Value ){
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <DIO_u8_Get_Port_Value+0x6>
    1926:	00 d0       	rcall	.+0      	; 0x1928 <DIO_u8_Get_Port_Value+0x8>
    1928:	00 d0       	rcall	.+0      	; 0x192a <DIO_u8_Get_Port_Value+0xa>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	8a 83       	std	Y+2, r24	; 0x02
    1930:	7c 83       	std	Y+4, r23	; 0x04
    1932:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Erorr_State = ES_OK ;
    1934:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8_Returned_Port_Value != NULL){
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	09 f4       	brne	.+2      	; 0x1940 <DIO_u8_Get_Port_Value+0x20>
    193e:	3e c0       	rjmp	.+124    	; 0x19bc <DIO_u8_Get_Port_Value+0x9c>
		switch (Copy_u8_Port_ID)
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	3e 83       	std	Y+6, r19	; 0x06
    1948:	2d 83       	std	Y+5, r18	; 0x05
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	9e 81       	ldd	r25, Y+6	; 0x06
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	91 05       	cpc	r25, r1
    1952:	e1 f0       	breq	.+56     	; 0x198c <DIO_u8_Get_Port_Value+0x6c>
    1954:	2d 81       	ldd	r18, Y+5	; 0x05
    1956:	3e 81       	ldd	r19, Y+6	; 0x06
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	2c f4       	brge	.+10     	; 0x1968 <DIO_u8_Get_Port_Value+0x48>
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	61 f0       	breq	.+24     	; 0x197e <DIO_u8_Get_Port_Value+0x5e>
    1966:	27 c0       	rjmp	.+78     	; 0x19b6 <DIO_u8_Get_Port_Value+0x96>
    1968:	2d 81       	ldd	r18, Y+5	; 0x05
    196a:	3e 81       	ldd	r19, Y+6	; 0x06
    196c:	22 30       	cpi	r18, 0x02	; 2
    196e:	31 05       	cpc	r19, r1
    1970:	a1 f0       	breq	.+40     	; 0x199a <DIO_u8_Get_Port_Value+0x7a>
    1972:	8d 81       	ldd	r24, Y+5	; 0x05
    1974:	9e 81       	ldd	r25, Y+6	; 0x06
    1976:	83 30       	cpi	r24, 0x03	; 3
    1978:	91 05       	cpc	r25, r1
    197a:	b1 f0       	breq	.+44     	; 0x19a8 <DIO_u8_Get_Port_Value+0x88>
    197c:	1c c0       	rjmp	.+56     	; 0x19b6 <DIO_u8_Get_Port_Value+0x96>
		{
		case DIO_u8_PORTA :* Copy_u8_Returned_Port_Value =DIO_u8_PORTA_REG; break;
    197e:	eb e3       	ldi	r30, 0x3B	; 59
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	eb 81       	ldd	r30, Y+3	; 0x03
    1986:	fc 81       	ldd	r31, Y+4	; 0x04
    1988:	80 83       	st	Z, r24
    198a:	1a c0       	rjmp	.+52     	; 0x19c0 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTB :* Copy_u8_Returned_Port_Value =DIO_u8_PORTB_REG; break;
    198c:	e8 e3       	ldi	r30, 0x38	; 56
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	eb 81       	ldd	r30, Y+3	; 0x03
    1994:	fc 81       	ldd	r31, Y+4	; 0x04
    1996:	80 83       	st	Z, r24
    1998:	13 c0       	rjmp	.+38     	; 0x19c0 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTC :* Copy_u8_Returned_Port_Value =DIO_u8_PORTC_REG; break;
    199a:	e5 e3       	ldi	r30, 0x35	; 53
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	eb 81       	ldd	r30, Y+3	; 0x03
    19a2:	fc 81       	ldd	r31, Y+4	; 0x04
    19a4:	80 83       	st	Z, r24
    19a6:	0c c0       	rjmp	.+24     	; 0x19c0 <DIO_u8_Get_Port_Value+0xa0>
		case DIO_u8_PORTD :* Copy_u8_Returned_Port_Value =DIO_u8_PORTD_REG; break;
    19a8:	e2 e3       	ldi	r30, 0x32	; 50
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	eb 81       	ldd	r30, Y+3	; 0x03
    19b0:	fc 81       	ldd	r31, Y+4	; 0x04
    19b2:	80 83       	st	Z, r24
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <DIO_u8_Get_Port_Value+0xa0>
		default :Local_u8_Erorr_State = ES_NOK;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_u8_Get_Port_Value+0xa0>
		}}
		else {
			Local_u8_Erorr_State = ES_NOK ;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_u8_Erorr_State ;
    19c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    19c2:	26 96       	adiw	r28, 0x06	; 6
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <SERVO_motor_enum_INIT>:
#include "SERVO_MOTOR_private.h"

#include<util/delay.h>

ES_t SERVO_motor_enum_INIT (void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	0f 92       	push	r0
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
ES_t  Local_enu_Erorr_State = ES_OK ;
    19de:	19 82       	std	Y+1, r1	; 0x01
DIO_u8_Set_Pin_Direction(DIO_u8_PORTD,DIO_u8_PIN5,DIO_u8_OUTPUT);
    19e0:	83 e0       	ldi	r24, 0x03	; 3
    19e2:	65 e0       	ldi	r22, 0x05	; 5
    19e4:	41 e0       	ldi	r20, 0x01	; 1
    19e6:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
TIMERS_enum_TIMER1_INIT();
    19ea:	0e 94 c0 06 	call	0xd80	; 0xd80 <TIMERS_enum_TIMER1_INIT>

return Local_enu_Erorr_State;
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f0:	0f 90       	pop	r0
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <SERVO_MOTOR_enum_SET_Servo_Motor_Angle>:

ES_t SERVO_MOTOR_enum_SET_Servo_Motor_Angle(u16 Copy_u16_Servo_Motor_Angle)
{
    19f8:	0f 93       	push	r16
    19fa:	1f 93       	push	r17
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <SERVO_MOTOR_enum_SET_Servo_Motor_Angle+0xa>
    1a02:	0f 92       	push	r0
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	9b 83       	std	Y+3, r25	; 0x03
    1a0a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State= ES_OK;
    1a0c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u16_Servo_Motor_Angle <= TIMERS_SERVO_u8_MAX_ANGLE)
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	9b 81       	ldd	r25, Y+3	; 0x03
    1a12:	85 3b       	cpi	r24, 0xB5	; 181
    1a14:	91 05       	cpc	r25, r1
    1a16:	08 f5       	brcc	.+66     	; 0x1a5a <SERVO_MOTOR_enum_SET_Servo_Motor_Angle+0x62>
	{

		TIMERS_u16_OCR1A_REG = ((Copy_u16_Servo_Motor_Angle*1000UL)/TIMERS_SERVO_u8_MAX_ANGLE)+999;
    1a18:	0a e4       	ldi	r16, 0x4A	; 74
    1a1a:	10 e0       	ldi	r17, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a20:	cc 01       	movw	r24, r24
    1a22:	a0 e0       	ldi	r26, 0x00	; 0
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	28 ee       	ldi	r18, 0xE8	; 232
    1a28:	33 e0       	ldi	r19, 0x03	; 3
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__mulsi3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	24 eb       	ldi	r18, 0xB4	; 180
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e0       	ldi	r20, 0x00	; 0
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__udivmodsi4>
    1a4a:	da 01       	movw	r26, r20
    1a4c:	c9 01       	movw	r24, r18
    1a4e:	89 51       	subi	r24, 0x19	; 25
    1a50:	9c 4f       	sbci	r25, 0xFC	; 252
    1a52:	f8 01       	movw	r30, r16
    1a54:	91 83       	std	Z+1, r25	; 0x01
    1a56:	80 83       	st	Z, r24
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <SERVO_MOTOR_enum_SET_Servo_Motor_Angle+0x66>

	}
	else{
		Local_enu_Erorr_State= ES_NOK;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	89 83       	std	Y+1, r24	; 0x01

	}
			return Local_enu_Erorr_State;
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	1f 91       	pop	r17
    1a6c:	0f 91       	pop	r16
    1a6e:	08 95       	ret

00001a70 <Stepper_motor_enum_INIT>:
#include "STEPPER_MOTOR_interface.h"
#include "STEPPER_MOTOR_private.h"

#include<util/delay.h>

ES_t Stepper_motor_enum_INIT (){
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK;
    1a7a:	19 82       	std	Y+1, r1	; 0x01

	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_BLUE_PORT, STEPPER_MOTOR_BLUE_PIN, DIO_u8_OUTPUT );
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN, DIO_u8_OUTPUT );
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN , DIO_u8_OUTPUT );
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	64 e0       	ldi	r22, 0x04	; 4
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
	 DIO_u8_Set_Pin_Direction  (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN, DIO_u8_OUTPUT );
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	63 e0       	ldi	r22, 0x03	; 3
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>


	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
     DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    1ab8:	83 e0       	ldi	r24, 0x03	; 3
    1aba:	64 e0       	ldi	r22, 0x04	; 4
    1abc:	41 e0       	ldi	r20, 0x01	; 1
    1abe:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
     DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1ac2:	83 e0       	ldi	r24, 0x03	; 3
    1ac4:	63 e0       	ldi	r22, 0x03	; 3
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
return Local_enu_Erorr_State;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ace:	0f 90       	pop	r0
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <Stepper_moter_enum_Move>:


ES_t Stepper_moter_enum_Move(u8 copy_u8_direction,f32 copy_u8_Angle){
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	ce 57       	subi	r28, 0x7E	; 126
    1ae4:	d0 40       	sbci	r29, 0x00	; 0
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	fe 01       	movw	r30, r28
    1af2:	e6 58       	subi	r30, 0x86	; 134
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 83       	st	Z, r24
    1af8:	fe 01       	movw	r30, r28
    1afa:	e5 58       	subi	r30, 0x85	; 133
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	40 83       	st	Z, r20
    1b00:	51 83       	std	Z+1, r21	; 0x01
    1b02:	62 83       	std	Z+2, r22	; 0x02
    1b04:	73 83       	std	Z+3, r23	; 0x03
ES_t Local_enu_Erorr_State=ES_OK;
    1b06:	fe 01       	movw	r30, r28
    1b08:	e7 58       	subi	r30, 0x87	; 135
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	10 82       	st	Z, r1

//to calculate number of steps for custom angle
f32 Number_Of_Steps = ((copy_u8_Angle*Namber_Of_Steps_for_360degree)/degree_360);
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e5 58       	subi	r30, 0x85	; 133
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	55 e4       	ldi	r21, 0x45	; 69
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8e 01       	movw	r16, r28
    1b2e:	0b 58       	subi	r16, 0x8B	; 139
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	44 eb       	ldi	r20, 0xB4	; 180
    1b3c:	53 e4       	ldi	r21, 0x43	; 67
    1b3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	f8 01       	movw	r30, r16
    1b48:	80 83       	st	Z, r24
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	a2 83       	std	Z+2, r26	; 0x02
    1b4e:	b3 83       	std	Z+3, r27	; 0x03
u16 Number_Of_Forloop =Number_Of_Steps/number_of_steps_in_full_step;
    1b50:	fe 01       	movw	r30, r28
    1b52:	eb 58       	subi	r30, 0x8B	; 139
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	60 81       	ld	r22, Z
    1b58:	71 81       	ldd	r23, Z+1	; 0x01
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	93 81       	ldd	r25, Z+3	; 0x03
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e8       	ldi	r20, 0x80	; 128
    1b64:	50 e4       	ldi	r21, 0x40	; 64
    1b66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8e 01       	movw	r16, r28
    1b70:	0d 58       	subi	r16, 0x8D	; 141
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	f8 01       	movw	r30, r16
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
//FOR LOOP TO ROTATE AT CUSTOM ANGLE

if(copy_u8_direction==CW){
    1b86:	fe 01       	movw	r30, r28
    1b88:	e6 58       	subi	r30, 0x86	; 134
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <Stepper_moter_enum_Move+0xbe>
    1b92:	0c c3       	rjmp	.+1560   	; 0x21ac <Stepper_moter_enum_Move+0x6d6>
for (u8 Local_u8_step_Counter=start;Local_u8_step_Counter<Number_Of_Forloop;Local_u8_step_Counter++){
    1b94:	fe 01       	movw	r30, r28
    1b96:	ee 58       	subi	r30, 0x8E	; 142
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	10 82       	st	Z, r1
    1b9c:	f7 c2       	rjmp	.+1518   	; 0x218c <Stepper_moter_enum_Move+0x6b6>

     //step1 -------->BLUE PIN IS LOW
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_LOW );
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	64 e0       	ldi	r22, 0x04	; 4
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1bbc:	83 e0       	ldi	r24, 0x03	; 3
    1bbe:	63 e0       	ldi	r22, 0x03	; 3
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e3 59       	subi	r30, 0x93	; 147
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	a0 e2       	ldi	r26, 0x20	; 32
    1bd2:	b1 e4       	ldi	r27, 0x41	; 65
    1bd4:	80 83       	st	Z, r24
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	a2 83       	std	Z+2, r26	; 0x02
    1bda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bdc:	8e 01       	movw	r16, r28
    1bde:	07 59       	subi	r16, 0x97	; 151
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	fe 01       	movw	r30, r28
    1be4:	e3 59       	subi	r30, 0x93	; 147
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a e7       	ldi	r20, 0x7A	; 122
    1bf6:	53 e4       	ldi	r21, 0x43	; 67
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	f8 01       	movw	r30, r16
    1c02:	80 83       	st	Z, r24
    1c04:	91 83       	std	Z+1, r25	; 0x01
    1c06:	a2 83       	std	Z+2, r26	; 0x02
    1c08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e7 59       	subi	r30, 0x97	; 151
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	44 f4       	brge	.+16     	; 0x1c38 <Stepper_moter_enum_Move+0x162>
		__ticks = 1;
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e9 59       	subi	r30, 0x99	; 153
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
    1c36:	64 c0       	rjmp	.+200    	; 0x1d00 <Stepper_moter_enum_Move+0x22a>
	else if (__tmp > 65535)
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e7 59       	subi	r30, 0x97	; 151
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	3f ef       	ldi	r19, 0xFF	; 255
    1c4a:	4f e7       	ldi	r20, 0x7F	; 127
    1c4c:	57 e4       	ldi	r21, 0x47	; 71
    1c4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c52:	18 16       	cp	r1, r24
    1c54:	0c f0       	brlt	.+2      	; 0x1c58 <Stepper_moter_enum_Move+0x182>
    1c56:	43 c0       	rjmp	.+134    	; 0x1cde <Stepper_moter_enum_Move+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e3 59       	subi	r30, 0x93	; 147
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	40 e2       	ldi	r20, 0x20	; 32
    1c6c:	51 e4       	ldi	r21, 0x41	; 65
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8e 01       	movw	r16, r28
    1c78:	09 59       	subi	r16, 0x99	; 153
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	1f c0       	rjmp	.+62     	; 0x1cce <Stepper_moter_enum_Move+0x1f8>
    1c90:	fe 01       	movw	r30, r28
    1c92:	eb 59       	subi	r30, 0x9B	; 155
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	89 e1       	ldi	r24, 0x19	; 25
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	eb 59       	subi	r30, 0x9B	; 155
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <Stepper_moter_enum_Move+0x1d2>
    1cac:	fe 01       	movw	r30, r28
    1cae:	eb 59       	subi	r30, 0x9B	; 155
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	de 01       	movw	r26, r28
    1cb8:	a9 59       	subi	r26, 0x99	; 153
    1cba:	bf 4f       	sbci	r27, 0xFF	; 255
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e9 59       	subi	r30, 0x99	; 153
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	80 81       	ld	r24, Z
    1cc4:	91 81       	ldd	r25, Z+1	; 0x01
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	11 96       	adiw	r26, 0x01	; 1
    1cca:	9c 93       	st	X, r25
    1ccc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	fe 01       	movw	r30, r28
    1cd0:	e9 59       	subi	r30, 0x99	; 153
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	80 81       	ld	r24, Z
    1cd6:	91 81       	ldd	r25, Z+1	; 0x01
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	d1 f6       	brne	.-76     	; 0x1c90 <Stepper_moter_enum_Move+0x1ba>
    1cdc:	27 c0       	rjmp	.+78     	; 0x1d2c <Stepper_moter_enum_Move+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	8e 01       	movw	r16, r28
    1ce0:	09 59       	subi	r16, 0x99	; 153
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	e7 59       	subi	r30, 0x97	; 151
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	60 81       	ld	r22, Z
    1cec:	71 81       	ldd	r23, Z+1	; 0x01
    1cee:	82 81       	ldd	r24, Z+2	; 0x02
    1cf0:	93 81       	ldd	r25, Z+3	; 0x03
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	80 83       	st	Z, r24
    1d00:	de 01       	movw	r26, r28
    1d02:	ad 59       	subi	r26, 0x9D	; 157
    1d04:	bf 4f       	sbci	r27, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	e9 59       	subi	r30, 0x99	; 153
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	8d 93       	st	X+, r24
    1d12:	9c 93       	st	X, r25
    1d14:	fe 01       	movw	r30, r28
    1d16:	ed 59       	subi	r30, 0x9D	; 157
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	91 81       	ldd	r25, Z+1	; 0x01
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <Stepper_moter_enum_Move+0x248>
    1d22:	fe 01       	movw	r30, r28
    1d24:	ed 59       	subi	r30, 0x9D	; 157
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
	_delay_ms(periodic_time_delay);
    //step1 -------->PINK PIN IS LOW
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1d2c:	83 e0       	ldi	r24, 0x03	; 3
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_LOW );
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	61 e0       	ldi	r22, 0x01	; 1
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	64 e0       	ldi	r22, 0x04	; 4
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	63 e0       	ldi	r22, 0x03	; 3
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    1d54:	fe 01       	movw	r30, r28
    1d56:	e1 5a       	subi	r30, 0xA1	; 161
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a0 e2       	ldi	r26, 0x20	; 32
    1d60:	b1 e4       	ldi	r27, 0x41	; 65
    1d62:	80 83       	st	Z, r24
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	a2 83       	std	Z+2, r26	; 0x02
    1d68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6a:	8e 01       	movw	r16, r28
    1d6c:	05 5a       	subi	r16, 0xA5	; 165
    1d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d70:	fe 01       	movw	r30, r28
    1d72:	e1 5a       	subi	r30, 0xA1	; 161
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4a e7       	ldi	r20, 0x7A	; 122
    1d84:	53 e4       	ldi	r21, 0x43	; 67
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	f8 01       	movw	r30, r16
    1d90:	80 83       	st	Z, r24
    1d92:	91 83       	std	Z+1, r25	; 0x01
    1d94:	a2 83       	std	Z+2, r26	; 0x02
    1d96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e5 5a       	subi	r30, 0xA5	; 165
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	60 81       	ld	r22, Z
    1da0:	71 81       	ldd	r23, Z+1	; 0x01
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	93 81       	ldd	r25, Z+3	; 0x03
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e8       	ldi	r20, 0x80	; 128
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db2:	88 23       	and	r24, r24
    1db4:	44 f4       	brge	.+16     	; 0x1dc6 <Stepper_moter_enum_Move+0x2f0>
		__ticks = 1;
    1db6:	fe 01       	movw	r30, r28
    1db8:	e7 5a       	subi	r30, 0xA7	; 167
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	80 83       	st	Z, r24
    1dc4:	64 c0       	rjmp	.+200    	; 0x1e8e <Stepper_moter_enum_Move+0x3b8>
	else if (__tmp > 65535)
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e5 5a       	subi	r30, 0xA5	; 165
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	60 81       	ld	r22, Z
    1dce:	71 81       	ldd	r23, Z+1	; 0x01
    1dd0:	82 81       	ldd	r24, Z+2	; 0x02
    1dd2:	93 81       	ldd	r25, Z+3	; 0x03
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	0c f0       	brlt	.+2      	; 0x1de6 <Stepper_moter_enum_Move+0x310>
    1de4:	43 c0       	rjmp	.+134    	; 0x1e6c <Stepper_moter_enum_Move+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de6:	fe 01       	movw	r30, r28
    1de8:	e1 5a       	subi	r30, 0xA1	; 161
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	51 e4       	ldi	r21, 0x41	; 65
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	8e 01       	movw	r16, r28
    1e06:	07 5a       	subi	r16, 0xA7	; 167
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	f8 01       	movw	r30, r16
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	80 83       	st	Z, r24
    1e1c:	1f c0       	rjmp	.+62     	; 0x1e5c <Stepper_moter_enum_Move+0x386>
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e9 5a       	subi	r30, 0xA9	; 169
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	89 e1       	ldi	r24, 0x19	; 25
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	80 83       	st	Z, r24
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e9 5a       	subi	r30, 0xA9	; 169
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <Stepper_moter_enum_Move+0x360>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e9 5a       	subi	r30, 0xA9	; 169
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e44:	de 01       	movw	r26, r28
    1e46:	a7 5a       	subi	r26, 0xA7	; 167
    1e48:	bf 4f       	sbci	r27, 0xFF	; 255
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e7 5a       	subi	r30, 0xA7	; 167
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	11 96       	adiw	r26, 0x01	; 1
    1e58:	9c 93       	st	X, r25
    1e5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e7 5a       	subi	r30, 0xA7	; 167
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	d1 f6       	brne	.-76     	; 0x1e1e <Stepper_moter_enum_Move+0x348>
    1e6a:	27 c0       	rjmp	.+78     	; 0x1eba <Stepper_moter_enum_Move+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	8e 01       	movw	r16, r28
    1e6e:	07 5a       	subi	r16, 0xA7	; 167
    1e70:	1f 4f       	sbci	r17, 0xFF	; 255
    1e72:	fe 01       	movw	r30, r28
    1e74:	e5 5a       	subi	r30, 0xA5	; 165
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	f8 01       	movw	r30, r16
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
    1e8e:	de 01       	movw	r26, r28
    1e90:	ab 5a       	subi	r26, 0xAB	; 171
    1e92:	bf 4f       	sbci	r27, 0xFF	; 255
    1e94:	fe 01       	movw	r30, r28
    1e96:	e7 5a       	subi	r30, 0xA7	; 167
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	80 81       	ld	r24, Z
    1e9c:	91 81       	ldd	r25, Z+1	; 0x01
    1e9e:	8d 93       	st	X+, r24
    1ea0:	9c 93       	st	X, r25
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	eb 5a       	subi	r30, 0xAB	; 171
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	91 81       	ldd	r25, Z+1	; 0x01
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <Stepper_moter_enum_Move+0x3d6>
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	eb 5a       	subi	r30, 0xAB	; 171
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
	_delay_ms(periodic_time_delay);
	//step1 -------->YELLOW PIN IS LOW
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    1ec4:	83 e0       	ldi	r24, 0x03	; 3
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_LOW );
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	64 e0       	ldi	r22, 0x04	; 4
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    1ed8:	83 e0       	ldi	r24, 0x03	; 3
    1eda:	63 e0       	ldi	r22, 0x03	; 3
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ef 5a       	subi	r30, 0xAF	; 175
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e2       	ldi	r26, 0x20	; 32
    1eee:	b1 e4       	ldi	r27, 0x41	; 65
    1ef0:	80 83       	st	Z, r24
    1ef2:	91 83       	std	Z+1, r25	; 0x01
    1ef4:	a2 83       	std	Z+2, r26	; 0x02
    1ef6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef8:	8e 01       	movw	r16, r28
    1efa:	03 5b       	subi	r16, 0xB3	; 179
    1efc:	1f 4f       	sbci	r17, 0xFF	; 255
    1efe:	fe 01       	movw	r30, r28
    1f00:	ef 5a       	subi	r30, 0xAF	; 175
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	4a e7       	ldi	r20, 0x7A	; 122
    1f12:	53 e4       	ldi	r21, 0x43	; 67
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	80 83       	st	Z, r24
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	a2 83       	std	Z+2, r26	; 0x02
    1f24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f26:	fe 01       	movw	r30, r28
    1f28:	e3 5b       	subi	r30, 0xB3	; 179
    1f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2c:	60 81       	ld	r22, Z
    1f2e:	71 81       	ldd	r23, Z+1	; 0x01
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	44 f4       	brge	.+16     	; 0x1f54 <Stepper_moter_enum_Move+0x47e>
		__ticks = 1;
    1f44:	fe 01       	movw	r30, r28
    1f46:	e5 5b       	subi	r30, 0xB5	; 181
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
    1f52:	64 c0       	rjmp	.+200    	; 0x201c <Stepper_moter_enum_Move+0x546>
	else if (__tmp > 65535)
    1f54:	fe 01       	movw	r30, r28
    1f56:	e3 5b       	subi	r30, 0xB3	; 179
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	60 81       	ld	r22, Z
    1f5c:	71 81       	ldd	r23, Z+1	; 0x01
    1f5e:	82 81       	ldd	r24, Z+2	; 0x02
    1f60:	93 81       	ldd	r25, Z+3	; 0x03
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	0c f0       	brlt	.+2      	; 0x1f74 <Stepper_moter_enum_Move+0x49e>
    1f72:	43 c0       	rjmp	.+134    	; 0x1ffa <Stepper_moter_enum_Move+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f74:	fe 01       	movw	r30, r28
    1f76:	ef 5a       	subi	r30, 0xAF	; 175
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8e 01       	movw	r16, r28
    1f94:	05 5b       	subi	r16, 0xB5	; 181
    1f96:	1f 4f       	sbci	r17, 0xFF	; 255
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
    1faa:	1f c0       	rjmp	.+62     	; 0x1fea <Stepper_moter_enum_Move+0x514>
    1fac:	fe 01       	movw	r30, r28
    1fae:	e7 5b       	subi	r30, 0xB7	; 183
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	89 e1       	ldi	r24, 0x19	; 25
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	80 83       	st	Z, r24
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e7 5b       	subi	r30, 0xB7	; 183
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <Stepper_moter_enum_Move+0x4ee>
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e7 5b       	subi	r30, 0xB7	; 183
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd2:	de 01       	movw	r26, r28
    1fd4:	a5 5b       	subi	r26, 0xB5	; 181
    1fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e5 5b       	subi	r30, 0xB5	; 181
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	91 81       	ldd	r25, Z+1	; 0x01
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	11 96       	adiw	r26, 0x01	; 1
    1fe6:	9c 93       	st	X, r25
    1fe8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fea:	fe 01       	movw	r30, r28
    1fec:	e5 5b       	subi	r30, 0xB5	; 181
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	d1 f6       	brne	.-76     	; 0x1fac <Stepper_moter_enum_Move+0x4d6>
    1ff8:	27 c0       	rjmp	.+78     	; 0x2048 <Stepper_moter_enum_Move+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	8e 01       	movw	r16, r28
    1ffc:	05 5b       	subi	r16, 0xB5	; 181
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	fe 01       	movw	r30, r28
    2002:	e3 5b       	subi	r30, 0xB3	; 179
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	60 81       	ld	r22, Z
    2008:	71 81       	ldd	r23, Z+1	; 0x01
    200a:	82 81       	ldd	r24, Z+2	; 0x02
    200c:	93 81       	ldd	r25, Z+3	; 0x03
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	f8 01       	movw	r30, r16
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	80 83       	st	Z, r24
    201c:	de 01       	movw	r26, r28
    201e:	a9 5b       	subi	r26, 0xB9	; 185
    2020:	bf 4f       	sbci	r27, 0xFF	; 255
    2022:	fe 01       	movw	r30, r28
    2024:	e5 5b       	subi	r30, 0xB5	; 181
    2026:	ff 4f       	sbci	r31, 0xFF	; 255
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	8d 93       	st	X+, r24
    202e:	9c 93       	st	X, r25
    2030:	fe 01       	movw	r30, r28
    2032:	e9 5b       	subi	r30, 0xB9	; 185
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <Stepper_moter_enum_Move+0x564>
    203e:	fe 01       	movw	r30, r28
    2040:	e9 5b       	subi	r30, 0xB9	; 185
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
	_delay_ms(periodic_time_delay);
	//step1 -------->ORANGE PIN IS LOW
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	41 e0       	ldi	r20, 0x01	; 1
    2058:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	64 e0       	ldi	r22, 0x04	; 4
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	63 e0       	ldi	r22, 0x03	; 3
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    2070:	fe 01       	movw	r30, r28
    2072:	ed 5b       	subi	r30, 0xBD	; 189
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a0 e2       	ldi	r26, 0x20	; 32
    207c:	b1 e4       	ldi	r27, 0x41	; 65
    207e:	80 83       	st	Z, r24
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	a2 83       	std	Z+2, r26	; 0x02
    2084:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2086:	8e 01       	movw	r16, r28
    2088:	01 5c       	subi	r16, 0xC1	; 193
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	fe 01       	movw	r30, r28
    208e:	ed 5b       	subi	r30, 0xBD	; 189
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	53 e4       	ldi	r21, 0x43	; 67
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	f8 01       	movw	r30, r16
    20ac:	80 83       	st	Z, r24
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	a2 83       	std	Z+2, r26	; 0x02
    20b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20b4:	fe 01       	movw	r30, r28
    20b6:	ff 96       	adiw	r30, 0x3f	; 63
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	2c f4       	brge	.+10     	; 0x20da <Stepper_moter_enum_Move+0x604>
		__ticks = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9e af       	std	Y+62, r25	; 0x3e
    20d6:	8d af       	std	Y+61, r24	; 0x3d
    20d8:	46 c0       	rjmp	.+140    	; 0x2166 <Stepper_moter_enum_Move+0x690>
	else if (__tmp > 65535)
    20da:	fe 01       	movw	r30, r28
    20dc:	ff 96       	adiw	r30, 0x3f	; 63
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	3f ef       	ldi	r19, 0xFF	; 255
    20ea:	4f e7       	ldi	r20, 0x7F	; 127
    20ec:	57 e4       	ldi	r21, 0x47	; 71
    20ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f2:	18 16       	cp	r1, r24
    20f4:	64 f5       	brge	.+88     	; 0x214e <Stepper_moter_enum_Move+0x678>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f6:	fe 01       	movw	r30, r28
    20f8:	ed 5b       	subi	r30, 0xBD	; 189
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9e af       	std	Y+62, r25	; 0x3e
    2122:	8d af       	std	Y+61, r24	; 0x3d
    2124:	0f c0       	rjmp	.+30     	; 0x2144 <Stepper_moter_enum_Move+0x66e>
    2126:	89 e1       	ldi	r24, 0x19	; 25
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	9c af       	std	Y+60, r25	; 0x3c
    212c:	8b af       	std	Y+59, r24	; 0x3b
    212e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2130:	9c ad       	ldd	r25, Y+60	; 0x3c
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <Stepper_moter_enum_Move+0x65c>
    2136:	9c af       	std	Y+60, r25	; 0x3c
    2138:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213a:	8d ad       	ldd	r24, Y+61	; 0x3d
    213c:	9e ad       	ldd	r25, Y+62	; 0x3e
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	9e af       	std	Y+62, r25	; 0x3e
    2142:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2144:	8d ad       	ldd	r24, Y+61	; 0x3d
    2146:	9e ad       	ldd	r25, Y+62	; 0x3e
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	69 f7       	brne	.-38     	; 0x2126 <Stepper_moter_enum_Move+0x650>
    214c:	16 c0       	rjmp	.+44     	; 0x217a <Stepper_moter_enum_Move+0x6a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	fe 01       	movw	r30, r28
    2150:	ff 96       	adiw	r30, 0x3f	; 63
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e af       	std	Y+62, r25	; 0x3e
    2164:	8d af       	std	Y+61, r24	; 0x3d
    2166:	8d ad       	ldd	r24, Y+61	; 0x3d
    2168:	9e ad       	ldd	r25, Y+62	; 0x3e
    216a:	9a af       	std	Y+58, r25	; 0x3a
    216c:	89 af       	std	Y+57, r24	; 0x39
    216e:	89 ad       	ldd	r24, Y+57	; 0x39
    2170:	9a ad       	ldd	r25, Y+58	; 0x3a
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <Stepper_moter_enum_Move+0x69c>
    2176:	9a af       	std	Y+58, r25	; 0x3a
    2178:	89 af       	std	Y+57, r24	; 0x39
f32 Number_Of_Steps = ((copy_u8_Angle*Namber_Of_Steps_for_360degree)/degree_360);
u16 Number_Of_Forloop =Number_Of_Steps/number_of_steps_in_full_step;
//FOR LOOP TO ROTATE AT CUSTOM ANGLE

if(copy_u8_direction==CW){
for (u8 Local_u8_step_Counter=start;Local_u8_step_Counter<Number_Of_Forloop;Local_u8_step_Counter++){
    217a:	de 01       	movw	r26, r28
    217c:	ae 58       	subi	r26, 0x8E	; 142
    217e:	bf 4f       	sbci	r27, 0xFF	; 255
    2180:	fe 01       	movw	r30, r28
    2182:	ee 58       	subi	r30, 0x8E	; 142
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	8f 5f       	subi	r24, 0xFF	; 255
    218a:	8c 93       	st	X, r24
    218c:	fe 01       	movw	r30, r28
    218e:	ee 58       	subi	r30, 0x8E	; 142
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 81       	ld	r24, Z
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	fe 01       	movw	r30, r28
    219a:	ed 58       	subi	r30, 0x8D	; 141
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	80 81       	ld	r24, Z
    21a0:	91 81       	ldd	r25, Z+1	; 0x01
    21a2:	28 17       	cp	r18, r24
    21a4:	39 07       	cpc	r19, r25
    21a6:	08 f4       	brcc	.+2      	; 0x21aa <Stepper_moter_enum_Move+0x6d4>
    21a8:	fa cc       	rjmp	.-1548   	; 0x1b9e <Stepper_moter_enum_Move+0xc8>
    21aa:	3c c2       	rjmp	.+1144   	; 0x2624 <Stepper_moter_enum_Move+0xb4e>
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
	_delay_ms(periodic_time_delay);
}
}
else if (copy_u8_direction==CCW){
    21ac:	fe 01       	movw	r30, r28
    21ae:	e6 58       	subi	r30, 0x86	; 134
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 81       	ld	r24, Z
    21b4:	82 30       	cpi	r24, 0x02	; 2
    21b6:	09 f0       	breq	.+2      	; 0x21ba <Stepper_moter_enum_Move+0x6e4>
    21b8:	35 c2       	rjmp	.+1130   	; 0x2624 <Stepper_moter_enum_Move+0xb4e>
	for (u8 Local_u8_step_Counter=start;Local_u8_step_Counter<Number_Of_Forloop;Local_u8_step_Counter++){
    21ba:	fe 01       	movw	r30, r28
    21bc:	ef 58       	subi	r30, 0x8F	; 143
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	10 82       	st	Z, r1
    21c2:	21 c2       	rjmp	.+1090   	; 0x2606 <Stepper_moter_enum_Move+0xb30>

	     //step1 -------->BLUE PIN IS LOW
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    21c4:	83 e0       	ldi	r24, 0x03	; 3
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    21ce:	83 e0       	ldi	r24, 0x03	; 3
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	64 e0       	ldi	r22, 0x04	; 4
    21dc:	41 e0       	ldi	r20, 0x01	; 1
    21de:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
    21e2:	83 e0       	ldi	r24, 0x03	; 3
    21e4:	63 e0       	ldi	r22, 0x03	; 3
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e2       	ldi	r26, 0x20	; 32
    21f2:	b1 e4       	ldi	r27, 0x41	; 65
    21f4:	8d ab       	std	Y+53, r24	; 0x35
    21f6:	9e ab       	std	Y+54, r25	; 0x36
    21f8:	af ab       	std	Y+55, r26	; 0x37
    21fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	6d a9       	ldd	r22, Y+53	; 0x35
    21fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2200:	8f a9       	ldd	r24, Y+55	; 0x37
    2202:	98 ad       	ldd	r25, Y+56	; 0x38
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	4a e7       	ldi	r20, 0x7A	; 122
    220a:	53 e4       	ldi	r21, 0x43	; 67
    220c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	89 ab       	std	Y+49, r24	; 0x31
    2216:	9a ab       	std	Y+50, r25	; 0x32
    2218:	ab ab       	std	Y+51, r26	; 0x33
    221a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    221c:	69 a9       	ldd	r22, Y+49	; 0x31
    221e:	7a a9       	ldd	r23, Y+50	; 0x32
    2220:	8b a9       	ldd	r24, Y+51	; 0x33
    2222:	9c a9       	ldd	r25, Y+52	; 0x34
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	5f e3       	ldi	r21, 0x3F	; 63
    222c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2230:	88 23       	and	r24, r24
    2232:	2c f4       	brge	.+10     	; 0x223e <Stepper_moter_enum_Move+0x768>
		__ticks = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	98 ab       	std	Y+48, r25	; 0x30
    223a:	8f a7       	std	Y+47, r24	; 0x2f
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <Stepper_moter_enum_Move+0x7e6>
	else if (__tmp > 65535)
    223e:	69 a9       	ldd	r22, Y+49	; 0x31
    2240:	7a a9       	ldd	r23, Y+50	; 0x32
    2242:	8b a9       	ldd	r24, Y+51	; 0x33
    2244:	9c a9       	ldd	r25, Y+52	; 0x34
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	4c f5       	brge	.+82     	; 0x22a8 <Stepper_moter_enum_Move+0x7d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2256:	6d a9       	ldd	r22, Y+53	; 0x35
    2258:	7e a9       	ldd	r23, Y+54	; 0x36
    225a:	8f a9       	ldd	r24, Y+55	; 0x37
    225c:	98 ad       	ldd	r25, Y+56	; 0x38
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e2       	ldi	r20, 0x20	; 32
    2264:	51 e4       	ldi	r21, 0x41	; 65
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	98 ab       	std	Y+48, r25	; 0x30
    227c:	8f a7       	std	Y+47, r24	; 0x2f
    227e:	0f c0       	rjmp	.+30     	; 0x229e <Stepper_moter_enum_Move+0x7c8>
    2280:	89 e1       	ldi	r24, 0x19	; 25
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	9e a7       	std	Y+46, r25	; 0x2e
    2286:	8d a7       	std	Y+45, r24	; 0x2d
    2288:	8d a5       	ldd	r24, Y+45	; 0x2d
    228a:	9e a5       	ldd	r25, Y+46	; 0x2e
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <Stepper_moter_enum_Move+0x7b6>
    2290:	9e a7       	std	Y+46, r25	; 0x2e
    2292:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	8f a5       	ldd	r24, Y+47	; 0x2f
    2296:	98 a9       	ldd	r25, Y+48	; 0x30
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	98 ab       	std	Y+48, r25	; 0x30
    229c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a0:	98 a9       	ldd	r25, Y+48	; 0x30
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	69 f7       	brne	.-38     	; 0x2280 <Stepper_moter_enum_Move+0x7aa>
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <Stepper_moter_enum_Move+0x7fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a8:	69 a9       	ldd	r22, Y+49	; 0x31
    22aa:	7a a9       	ldd	r23, Y+50	; 0x32
    22ac:	8b a9       	ldd	r24, Y+51	; 0x33
    22ae:	9c a9       	ldd	r25, Y+52	; 0x34
    22b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	98 ab       	std	Y+48, r25	; 0x30
    22ba:	8f a7       	std	Y+47, r24	; 0x2f
    22bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22be:	98 a9       	ldd	r25, Y+48	; 0x30
    22c0:	9c a7       	std	Y+44, r25	; 0x2c
    22c2:	8b a7       	std	Y+43, r24	; 0x2b
    22c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <Stepper_moter_enum_Move+0x7f2>
    22cc:	9c a7       	std	Y+44, r25	; 0x2c
    22ce:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(periodic_time_delay);
	    //step1 -------->PINK PIN IS LOW
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    22d0:	83 e0       	ldi	r24, 0x03	; 3
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    22da:	83 e0       	ldi	r24, 0x03	; 3
    22dc:	61 e0       	ldi	r22, 0x01	; 1
    22de:	41 e0       	ldi	r20, 0x01	; 1
    22e0:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_LOW );
    22e4:	83 e0       	ldi	r24, 0x03	; 3
    22e6:	64 e0       	ldi	r22, 0x04	; 4
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	63 e0       	ldi	r22, 0x03	; 3
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a0 e2       	ldi	r26, 0x20	; 32
    22fe:	b1 e4       	ldi	r27, 0x41	; 65
    2300:	8f a3       	std	Y+39, r24	; 0x27
    2302:	98 a7       	std	Y+40, r25	; 0x28
    2304:	a9 a7       	std	Y+41, r26	; 0x29
    2306:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2308:	6f a1       	ldd	r22, Y+39	; 0x27
    230a:	78 a5       	ldd	r23, Y+40	; 0x28
    230c:	89 a5       	ldd	r24, Y+41	; 0x29
    230e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4a e7       	ldi	r20, 0x7A	; 122
    2316:	53 e4       	ldi	r21, 0x43	; 67
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8b a3       	std	Y+35, r24	; 0x23
    2322:	9c a3       	std	Y+36, r25	; 0x24
    2324:	ad a3       	std	Y+37, r26	; 0x25
    2326:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2328:	6b a1       	ldd	r22, Y+35	; 0x23
    232a:	7c a1       	ldd	r23, Y+36	; 0x24
    232c:	8d a1       	ldd	r24, Y+37	; 0x25
    232e:	9e a1       	ldd	r25, Y+38	; 0x26
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	2c f4       	brge	.+10     	; 0x234a <Stepper_moter_enum_Move+0x874>
		__ticks = 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9a a3       	std	Y+34, r25	; 0x22
    2346:	89 a3       	std	Y+33, r24	; 0x21
    2348:	3f c0       	rjmp	.+126    	; 0x23c8 <Stepper_moter_enum_Move+0x8f2>
	else if (__tmp > 65535)
    234a:	6b a1       	ldd	r22, Y+35	; 0x23
    234c:	7c a1       	ldd	r23, Y+36	; 0x24
    234e:	8d a1       	ldd	r24, Y+37	; 0x25
    2350:	9e a1       	ldd	r25, Y+38	; 0x26
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	3f ef       	ldi	r19, 0xFF	; 255
    2356:	4f e7       	ldi	r20, 0x7F	; 127
    2358:	57 e4       	ldi	r21, 0x47	; 71
    235a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    235e:	18 16       	cp	r1, r24
    2360:	4c f5       	brge	.+82     	; 0x23b4 <Stepper_moter_enum_Move+0x8de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2362:	6f a1       	ldd	r22, Y+39	; 0x27
    2364:	78 a5       	ldd	r23, Y+40	; 0x28
    2366:	89 a5       	ldd	r24, Y+41	; 0x29
    2368:	9a a5       	ldd	r25, Y+42	; 0x2a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9a a3       	std	Y+34, r25	; 0x22
    2388:	89 a3       	std	Y+33, r24	; 0x21
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <Stepper_moter_enum_Move+0x8d4>
    238c:	89 e1       	ldi	r24, 0x19	; 25
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	98 a3       	std	Y+32, r25	; 0x20
    2392:	8f 8f       	std	Y+31, r24	; 0x1f
    2394:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2396:	98 a1       	ldd	r25, Y+32	; 0x20
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <Stepper_moter_enum_Move+0x8c2>
    239c:	98 a3       	std	Y+32, r25	; 0x20
    239e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	89 a1       	ldd	r24, Y+33	; 0x21
    23a2:	9a a1       	ldd	r25, Y+34	; 0x22
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	9a a3       	std	Y+34, r25	; 0x22
    23a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23aa:	89 a1       	ldd	r24, Y+33	; 0x21
    23ac:	9a a1       	ldd	r25, Y+34	; 0x22
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	69 f7       	brne	.-38     	; 0x238c <Stepper_moter_enum_Move+0x8b6>
    23b2:	14 c0       	rjmp	.+40     	; 0x23dc <Stepper_moter_enum_Move+0x906>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b4:	6b a1       	ldd	r22, Y+35	; 0x23
    23b6:	7c a1       	ldd	r23, Y+36	; 0x24
    23b8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ba:	9e a1       	ldd	r25, Y+38	; 0x26
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9a a3       	std	Y+34, r25	; 0x22
    23c6:	89 a3       	std	Y+33, r24	; 0x21
    23c8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ca:	9a a1       	ldd	r25, Y+34	; 0x22
    23cc:	9e 8f       	std	Y+30, r25	; 0x1e
    23ce:	8d 8f       	std	Y+29, r24	; 0x1d
    23d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <Stepper_moter_enum_Move+0x8fe>
    23d8:	9e 8f       	std	Y+30, r25	; 0x1e
    23da:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(periodic_time_delay);
		//step1 -------->YELLOW PIN IS LOW
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_LOW );
    23e6:	83 e0       	ldi	r24, 0x03	; 3
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    23f0:	83 e0       	ldi	r24, 0x03	; 3
    23f2:	64 e0       	ldi	r22, 0x04	; 4
    23f4:	41 e0       	ldi	r20, 0x01	; 1
    23f6:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	63 e0       	ldi	r22, 0x03	; 3
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a0 e2       	ldi	r26, 0x20	; 32
    240a:	b1 e4       	ldi	r27, 0x41	; 65
    240c:	89 8f       	std	Y+25, r24	; 0x19
    240e:	9a 8f       	std	Y+26, r25	; 0x1a
    2410:	ab 8f       	std	Y+27, r26	; 0x1b
    2412:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	69 8d       	ldd	r22, Y+25	; 0x19
    2416:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a e7       	ldi	r20, 0x7A	; 122
    2422:	53 e4       	ldi	r21, 0x43	; 67
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8d 8b       	std	Y+21, r24	; 0x15
    242e:	9e 8b       	std	Y+22, r25	; 0x16
    2430:	af 8b       	std	Y+23, r26	; 0x17
    2432:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2434:	6d 89       	ldd	r22, Y+21	; 0x15
    2436:	7e 89       	ldd	r23, Y+22	; 0x16
    2438:	8f 89       	ldd	r24, Y+23	; 0x17
    243a:	98 8d       	ldd	r25, Y+24	; 0x18
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	2c f4       	brge	.+10     	; 0x2456 <Stepper_moter_enum_Move+0x980>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9c 8b       	std	Y+20, r25	; 0x14
    2452:	8b 8b       	std	Y+19, r24	; 0x13
    2454:	3f c0       	rjmp	.+126    	; 0x24d4 <Stepper_moter_enum_Move+0x9fe>
	else if (__tmp > 65535)
    2456:	6d 89       	ldd	r22, Y+21	; 0x15
    2458:	7e 89       	ldd	r23, Y+22	; 0x16
    245a:	8f 89       	ldd	r24, Y+23	; 0x17
    245c:	98 8d       	ldd	r25, Y+24	; 0x18
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	3f ef       	ldi	r19, 0xFF	; 255
    2462:	4f e7       	ldi	r20, 0x7F	; 127
    2464:	57 e4       	ldi	r21, 0x47	; 71
    2466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    246a:	18 16       	cp	r1, r24
    246c:	4c f5       	brge	.+82     	; 0x24c0 <Stepper_moter_enum_Move+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246e:	69 8d       	ldd	r22, Y+25	; 0x19
    2470:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e2       	ldi	r20, 0x20	; 32
    247c:	51 e4       	ldi	r21, 0x41	; 65
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9c 8b       	std	Y+20, r25	; 0x14
    2494:	8b 8b       	std	Y+19, r24	; 0x13
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <Stepper_moter_enum_Move+0x9e0>
    2498:	89 e1       	ldi	r24, 0x19	; 25
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9a 8b       	std	Y+18, r25	; 0x12
    249e:	89 8b       	std	Y+17, r24	; 0x11
    24a0:	89 89       	ldd	r24, Y+17	; 0x11
    24a2:	9a 89       	ldd	r25, Y+18	; 0x12
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <Stepper_moter_enum_Move+0x9ce>
    24a8:	9a 8b       	std	Y+18, r25	; 0x12
    24aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ac:	8b 89       	ldd	r24, Y+19	; 0x13
    24ae:	9c 89       	ldd	r25, Y+20	; 0x14
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b6:	8b 89       	ldd	r24, Y+19	; 0x13
    24b8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	69 f7       	brne	.-38     	; 0x2498 <Stepper_moter_enum_Move+0x9c2>
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <Stepper_moter_enum_Move+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c0:	6d 89       	ldd	r22, Y+21	; 0x15
    24c2:	7e 89       	ldd	r23, Y+22	; 0x16
    24c4:	8f 89       	ldd	r24, Y+23	; 0x17
    24c6:	98 8d       	ldd	r25, Y+24	; 0x18
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9c 8b       	std	Y+20, r25	; 0x14
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
    24d4:	8b 89       	ldd	r24, Y+19	; 0x13
    24d6:	9c 89       	ldd	r25, Y+20	; 0x14
    24d8:	98 8b       	std	Y+16, r25	; 0x10
    24da:	8f 87       	std	Y+15, r24	; 0x0f
    24dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    24de:	98 89       	ldd	r25, Y+16	; 0x10
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <Stepper_moter_enum_Move+0xa0a>
    24e4:	98 8b       	std	Y+16, r25	; 0x10
    24e6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(periodic_time_delay);
		//step1 -------->ORANGE PIN IS LOW
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_LOW );
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    24fc:	83 e0       	ldi	r24, 0x03	; 3
    24fe:	64 e0       	ldi	r22, 0x04	; 4
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    2506:	83 e0       	ldi	r24, 0x03	; 3
    2508:	63 e0       	ldi	r22, 0x03	; 3
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e2       	ldi	r26, 0x20	; 32
    2516:	b1 e4       	ldi	r27, 0x41	; 65
    2518:	8b 87       	std	Y+11, r24	; 0x0b
    251a:	9c 87       	std	Y+12, r25	; 0x0c
    251c:	ad 87       	std	Y+13, r26	; 0x0d
    251e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	6b 85       	ldd	r22, Y+11	; 0x0b
    2522:	7c 85       	ldd	r23, Y+12	; 0x0c
    2524:	8d 85       	ldd	r24, Y+13	; 0x0d
    2526:	9e 85       	ldd	r25, Y+14	; 0x0e
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a e7       	ldi	r20, 0x7A	; 122
    252e:	53 e4       	ldi	r21, 0x43	; 67
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8f 83       	std	Y+7, r24	; 0x07
    253a:	98 87       	std	Y+8, r25	; 0x08
    253c:	a9 87       	std	Y+9, r26	; 0x09
    253e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2540:	6f 81       	ldd	r22, Y+7	; 0x07
    2542:	78 85       	ldd	r23, Y+8	; 0x08
    2544:	89 85       	ldd	r24, Y+9	; 0x09
    2546:	9a 85       	ldd	r25, Y+10	; 0x0a
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	2c f4       	brge	.+10     	; 0x2562 <Stepper_moter_enum_Move+0xa8c>
		__ticks = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9e 83       	std	Y+6, r25	; 0x06
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <Stepper_moter_enum_Move+0xb0a>
	else if (__tmp > 65535)
    2562:	6f 81       	ldd	r22, Y+7	; 0x07
    2564:	78 85       	ldd	r23, Y+8	; 0x08
    2566:	89 85       	ldd	r24, Y+9	; 0x09
    2568:	9a 85       	ldd	r25, Y+10	; 0x0a
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	4c f5       	brge	.+82     	; 0x25cc <Stepper_moter_enum_Move+0xaf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	6b 85       	ldd	r22, Y+11	; 0x0b
    257c:	7c 85       	ldd	r23, Y+12	; 0x0c
    257e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2580:	9e 85       	ldd	r25, Y+14	; 0x0e
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <Stepper_moter_enum_Move+0xaec>
    25a4:	89 e1       	ldi	r24, 0x19	; 25
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9c 83       	std	Y+4, r25	; 0x04
    25aa:	8b 83       	std	Y+3, r24	; 0x03
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	9c 81       	ldd	r25, Y+4	; 0x04
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <Stepper_moter_enum_Move+0xada>
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	9e 81       	ldd	r25, Y+6	; 0x06
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <Stepper_moter_enum_Move+0xace>
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <Stepper_moter_enum_Move+0xb1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9e 83       	std	Y+6, r25	; 0x06
    25de:	8d 83       	std	Y+5, r24	; 0x05
    25e0:	8d 81       	ldd	r24, Y+5	; 0x05
    25e2:	9e 81       	ldd	r25, Y+6	; 0x06
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	9a 81       	ldd	r25, Y+2	; 0x02
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <Stepper_moter_enum_Move+0xb16>
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_LOW );
	_delay_ms(periodic_time_delay);
}
}
else if (copy_u8_direction==CCW){
	for (u8 Local_u8_step_Counter=start;Local_u8_step_Counter<Number_Of_Forloop;Local_u8_step_Counter++){
    25f4:	de 01       	movw	r26, r28
    25f6:	af 58       	subi	r26, 0x8F	; 143
    25f8:	bf 4f       	sbci	r27, 0xFF	; 255
    25fa:	fe 01       	movw	r30, r28
    25fc:	ef 58       	subi	r30, 0x8F	; 143
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	8c 93       	st	X, r24
    2606:	fe 01       	movw	r30, r28
    2608:	ef 58       	subi	r30, 0x8F	; 143
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	fe 01       	movw	r30, r28
    2614:	ed 58       	subi	r30, 0x8D	; 141
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	28 17       	cp	r18, r24
    261e:	39 07       	cpc	r19, r25
    2620:	08 f4       	brcc	.+2      	; 0x2624 <Stepper_moter_enum_Move+0xb4e>
    2622:	d0 cd       	rjmp	.-1120   	; 0x21c4 <Stepper_moter_enum_Move+0x6ee>
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
	DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
		_delay_ms(periodic_time_delay);
	}
}
	return Local_enu_Erorr_State;
    2624:	fe 01       	movw	r30, r28
    2626:	e7 58       	subi	r30, 0x87	; 135
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	80 81       	ld	r24, Z
}
    262c:	c2 58       	subi	r28, 0x82	; 130
    262e:	df 4f       	sbci	r29, 0xFF	; 255
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	1f 91       	pop	r17
    2640:	0f 91       	pop	r16
    2642:	08 95       	ret

00002644 <Stepper_motor_enum_STOP>:
ES_t Stepper_motor_enum_STOP (void)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	0f 92       	push	r0
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK;
    264e:	19 82       	std	Y+1, r1	; 0x01

	     DIO_u8_Set_Pin_Value (STEPPER_MOTOR_BLUE_PORT,STEPPER_MOTOR_BLUE_PIN ,DIO_u8_HIGH );
    2650:	83 e0       	ldi	r24, 0x03	; 3
    2652:	60 e0       	ldi	r22, 0x00	; 0
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
		 DIO_u8_Set_Pin_Value (STEPPER_MOTOR_PINK_PORT,STEPPER_MOTOR_PINK_PIN ,DIO_u8_HIGH );
    265a:	83 e0       	ldi	r24, 0x03	; 3
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	     DIO_u8_Set_Pin_Value (STEPPER_MOTOR_YELLOW_PORT,STEPPER_MOTOR_YELLOW_PIN ,DIO_u8_HIGH );
    2664:	83 e0       	ldi	r24, 0x03	; 3
    2666:	64 e0       	ldi	r22, 0x04	; 4
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	     DIO_u8_Set_Pin_Value (STEPPER_MOTOR_ORANGE_PORT,STEPPER_MOTOR_ORANGE_PIN ,DIO_u8_HIGH );
    266e:	83 e0       	ldi	r24, 0x03	; 3
    2670:	63 e0       	ldi	r22, 0x03	; 3
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	return Local_enu_Erorr_State;
    2678:	89 81       	ldd	r24, Y+1	; 0x01

}
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <DC_MOTOR_enum_INIT>:
#include "DC_MOTOR_private.h"

#include<util/delay.h>


ES_t DC_MOTOR_enum_INIT(){
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	0f 92       	push	r0
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK ;
    268c:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8_Set_Pin_Direction(DC_MOTOR_EN1_PORT , DC_MOTOR_EN1_PIN , DIO_u8_INTIAL_OUTPUT);
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	64 e0       	ldi	r22, 0x04	; 4
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(DC_MOTOR_INPUT1_PORT , DC_MOTOR_INPUT1_PIN , DIO_u8_INTIAL_OUTPUT);
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	66 e0       	ldi	r22, 0x06	; 6
    269c:	41 e0       	ldi	r20, 0x01	; 1
    269e:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
	DIO_u8_Set_Pin_Direction(DC_MOTOR_INPUT2_PORT , DC_MOTOR_INPUT2_PIN , DIO_u8_INTIAL_OUTPUT);
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	65 e0       	ldi	r22, 0x05	; 5
    26a6:	41 e0       	ldi	r20, 0x01	; 1
    26a8:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>

//	DIO_u8_Set_Pin_Value  (DC_MOTOR_EN1_PORT, DC_MOTOR_EN1_PIN,DIO_u8_INTIAL_LOW );
//	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_INTIAL_LOW );
//	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_INTIAL_LOW );

	return Local_enu_Erorr_State;
    26ac:	89 81       	ldd	r24, Y+1	; 0x01

}
    26ae:	0f 90       	pop	r0
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <DC_MOTOR_enum_Start>:

ES_t DC_MOTOR_enum_Start(u8 copy_u8_DC_MOTOT_Direction){
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <DC_MOTOR_enum_Start+0x6>
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enu_Erorr_State=ES_OK ;
    26c2:	19 82       	std	Y+1, r1	; 0x01
	DIO_u8_Set_Pin_Value  (DC_MOTOR_EN1_PORT, DC_MOTOR_EN1_PIN,DIO_u8_HIGH );
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	64 e0       	ldi	r22, 0x04	; 4
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>


if(copy_u8_DC_MOTOT_Direction == CW){
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	59 f4       	brne	.+22     	; 0x26ea <DC_MOTOR_enum_Start+0x34>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_HIGH );
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	66 e0       	ldi	r22, 0x06	; 6
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_LOW );
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	65 e0       	ldi	r22, 0x05	; 5
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    26e8:	10 c0       	rjmp	.+32     	; 0x270a <DC_MOTOR_enum_Start+0x54>

}
else if(copy_u8_DC_MOTOT_Direction== CCW){
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	82 30       	cpi	r24, 0x02	; 2
    26ee:	59 f4       	brne	.+22     	; 0x2706 <DC_MOTOR_enum_Start+0x50>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_LOW );
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	66 e0       	ldi	r22, 0x06	; 6
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_HIGH );
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	65 e0       	ldi	r22, 0x05	; 5
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    2704:	02 c0       	rjmp	.+4      	; 0x270a <DC_MOTOR_enum_Start+0x54>
}
	else{
		Local_enu_Erorr_State= ES_NOK ;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	89 83       	std	Y+1, r24	; 0x01
}
return Local_enu_Erorr_State;
    270a:	89 81       	ldd	r24, Y+1	; 0x01
}
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <DC_MOTOR_enum_Stop>:
ES_t DC_MOTOR_enum_Stop(){
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_Erorr_State=ES_OK;
    2720:	19 82       	std	Y+1, r1	; 0x01
//STOP DC MOTOR
	DIO_u8_Set_Pin_Value  (DC_MOTOR_EN1_PORT, DC_MOTOR_EN1_PIN,DIO_u8_LOW );
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	64 e0       	ldi	r22, 0x04	; 4
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT1_PORT, DC_MOTOR_INPUT1_PIN,DIO_u8_LOW );
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	66 e0       	ldi	r22, 0x06	; 6
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	DIO_u8_Set_Pin_Value  (DC_MOTOR_INPUT2_PORT, DC_MOTOR_INPUT2_PIN,DIO_u8_LOW );
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	65 e0       	ldi	r22, 0x05	; 5
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>

	Local_enu_Erorr_State=ES_NOK;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_Erorr_State;
    2744:	89 81       	ldd	r24, Y+1	; 0x01

}
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <KPD_enum_Init>:
     const u8 KPD_Au8_Keys[4][4]   = KPD_Keys ;
	 const u8 KPD_Au8_Rows_Pins[4] ={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
	 const u8 KPD_Au8_Cols_Pins[4] ={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};

	ES_t KPD_enum_Init(void)
	{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	0f 92       	push	r0
    2754:	cd b7       	in	r28, 0x3d	; 61
    2756:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enu_Erorr_State = ES_OK;
    2758:	19 82       	std	Y+1, r1	; 0x01
//		DIO_u8_Set_Pin_Value(2 , 0 , 0);

		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R1_PIN , DIO_u8_INTIAL_OUTPUT);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	60 e0       	ldi	r22, 0x00	; 0
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R2_PIN , DIO_u8_INTIAL_OUTPUT);
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	61 e0       	ldi	r22, 0x01	; 1
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R3_PIN , DIO_u8_INTIAL_OUTPUT);
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	62 e0       	ldi	r22, 0x02	; 2
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_R4_PIN , DIO_u8_INTIAL_OUTPUT);
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	63 e0       	ldi	r22, 0x03	; 3
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>

		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C1_PIN , DIO_u8_INTIAL_INPUT);
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	64 e0       	ldi	r22, 0x04	; 4
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C2_PIN , DIO_u8_INTIAL_INPUT);
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	65 e0       	ldi	r22, 0x05	; 5
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C3_PIN , DIO_u8_INTIAL_INPUT);
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	66 e0       	ldi	r22, 0x06	; 6
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>
		DIO_u8_Set_Pin_Direction(KPD_u8_PORT , KPD_u8_C4_PIN , DIO_u8_INTIAL_INPUT);
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	67 e0       	ldi	r22, 0x07	; 7
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	0e 94 81 08 	call	0x1102	; 0x1102 <DIO_u8_Set_Pin_Direction>

		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R1_PIN , DIO_u8_INTIAL_HIGH);
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	60 e0       	ldi	r22, 0x00	; 0
    27ae:	41 e0       	ldi	r20, 0x01	; 1
    27b0:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R2_PIN , DIO_u8_INTIAL_HIGH);
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	61 e0       	ldi	r22, 0x01	; 1
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R3_PIN , DIO_u8_INTIAL_HIGH);
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	62 e0       	ldi	r22, 0x02	; 2
    27c2:	41 e0       	ldi	r20, 0x01	; 1
    27c4:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_R4_PIN , DIO_u8_INTIAL_HIGH);
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	63 e0       	ldi	r22, 0x03	; 3
    27cc:	41 e0       	ldi	r20, 0x01	; 1
    27ce:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>

		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C1_PIN , DIO_u8_INTIAL_PULL_UP);
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	64 e0       	ldi	r22, 0x04	; 4
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C2_PIN , DIO_u8_INTIAL_PULL_UP);
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	65 e0       	ldi	r22, 0x05	; 5
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C3_PIN , DIO_u8_INTIAL_PULL_UP);
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	66 e0       	ldi	r22, 0x06	; 6
    27ea:	41 e0       	ldi	r20, 0x01	; 1
    27ec:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
		DIO_u8_Set_Pin_Value(KPD_u8_PORT , KPD_u8_C4_PIN , DIO_u8_INTIAL_PULL_UP);
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	67 e0       	ldi	r22, 0x07	; 7
    27f4:	41 e0       	ldi	r20, 0x01	; 1
    27f6:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>

		return Local_enu_Erorr_State;
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
	}
    27fc:	0f 90       	pop	r0
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <KPD_enum_Get_Key_State>:
ES_t KPD_enum_Get_Key_State(u8 *Copy_pu8_Returned_Key){
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	65 97       	sbiw	r28, 0x15	; 21
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	9d 8b       	std	Y+21, r25	; 0x15
    281a:	8c 8b       	std	Y+20, r24	; 0x14

 ES_t Local_enu_Erorr_State = ES_OK ;
    281c:	1a 8a       	std	Y+18, r1	; 0x12
 u8 Local_u8_Rows_Counter, Local_u8_Cols_Counter, Local_u8_Key_Value=0, Local_u8_Flag =DIO_u8_LOW;
    281e:	1b 8a       	std	Y+19, r1	; 0x13
    2820:	1f 86       	std	Y+15, r1	; 0x0f
 if ( Copy_pu8_Returned_Key != NULL ){
    2822:	8c 89       	ldd	r24, Y+20	; 0x14
    2824:	9d 89       	ldd	r25, Y+21	; 0x15
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	09 f4       	brne	.+2      	; 0x282c <KPD_enum_Get_Key_State+0x28>
    282a:	f0 c0       	rjmp	.+480    	; 0x2a0c <KPD_enum_Get_Key_State+0x208>
		*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;
    282c:	ec 89       	ldd	r30, Y+20	; 0x14
    282e:	fd 89       	ldd	r31, Y+21	; 0x15
    2830:	8f ef       	ldi	r24, 0xFF	; 255
    2832:	80 83       	st	Z, r24



/* activate each row by for loop */
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
    2834:	19 8a       	std	Y+17, r1	; 0x11
    2836:	e5 c0       	rjmp	.+458    	; 0x2a02 <KPD_enum_Get_Key_State+0x1fe>
		 DIO_u8_Set_Pin_Value (KPD_u8_PORT, KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],  DIO_u8_LOW );
    2838:	89 89       	ldd	r24, Y+17	; 0x11
    283a:	88 2f       	mov	r24, r24
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	fc 01       	movw	r30, r24
    2840:	ed 5c       	subi	r30, 0xCD	; 205
    2842:	fe 4f       	sbci	r31, 0xFE	; 254
    2844:	90 81       	ld	r25, Z
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	69 2f       	mov	r22, r25
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
//			DIO_u8_Set_Pin_Value(2 , 0 , 1);

		 /*check which input pin has zero		  */
		 for (Local_u8_Cols_Counter=KPD_u8_C1; Local_u8_Cols_Counter<=KPD_u8_C4; Local_u8_Cols_Counter++){
    2850:	18 8a       	std	Y+16, r1	; 0x10
    2852:	c1 c0       	rjmp	.+386    	; 0x29d6 <KPD_enum_Get_Key_State+0x1d2>
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
    2854:	88 89       	ldd	r24, Y+16	; 0x10
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	fc 01       	movw	r30, r24
    285c:	e9 5c       	subi	r30, 0xC9	; 201
    285e:	fe 4f       	sbci	r31, 0xFE	; 254
    2860:	90 81       	ld	r25, Z
    2862:	9e 01       	movw	r18, r28
    2864:	2d 5e       	subi	r18, 0xED	; 237
    2866:	3f 4f       	sbci	r19, 0xFF	; 255
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	69 2f       	mov	r22, r25
    286c:	a9 01       	movw	r20, r18
    286e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <DIO_u8_Get_Pin_Value>
//	 			DIO_u8_Set_Pin_Value(2 , 0 , 1);

//           if switch is pressed
			 if (Local_u8_Key_Value == DIO_u8_LOW)
    2872:	8b 89       	ldd	r24, Y+19	; 0x13
    2874:	88 23       	and	r24, r24
    2876:	09 f0       	breq	.+2      	; 0x287a <KPD_enum_Get_Key_State+0x76>
    2878:	ab c0       	rjmp	.+342    	; 0x29d0 <KPD_enum_Get_Key_State+0x1cc>
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a0 ea       	ldi	r26, 0xA0	; 160
    2880:	b1 e4       	ldi	r27, 0x41	; 65
    2882:	8b 87       	std	Y+11, r24	; 0x0b
    2884:	9c 87       	std	Y+12, r25	; 0x0c
    2886:	ad 87       	std	Y+13, r26	; 0x0d
    2888:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288a:	6b 85       	ldd	r22, Y+11	; 0x0b
    288c:	7c 85       	ldd	r23, Y+12	; 0x0c
    288e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2890:	9e 85       	ldd	r25, Y+14	; 0x0e
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	4a e7       	ldi	r20, 0x7A	; 122
    2898:	53 e4       	ldi	r21, 0x43	; 67
    289a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	8f 83       	std	Y+7, r24	; 0x07
    28a4:	98 87       	std	Y+8, r25	; 0x08
    28a6:	a9 87       	std	Y+9, r26	; 0x09
    28a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e8       	ldi	r20, 0x80	; 128
    28b8:	5f e3       	ldi	r21, 0x3F	; 63
    28ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28be:	88 23       	and	r24, r24
    28c0:	2c f4       	brge	.+10     	; 0x28cc <KPD_enum_Get_Key_State+0xc8>
		__ticks = 1;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	9e 83       	std	Y+6, r25	; 0x06
    28c8:	8d 83       	std	Y+5, r24	; 0x05
    28ca:	3f c0       	rjmp	.+126    	; 0x294a <KPD_enum_Get_Key_State+0x146>
	else if (__tmp > 65535)
    28cc:	6f 81       	ldd	r22, Y+7	; 0x07
    28ce:	78 85       	ldd	r23, Y+8	; 0x08
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	3f ef       	ldi	r19, 0xFF	; 255
    28d8:	4f e7       	ldi	r20, 0x7F	; 127
    28da:	57 e4       	ldi	r21, 0x47	; 71
    28dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e0:	18 16       	cp	r1, r24
    28e2:	4c f5       	brge	.+82     	; 0x2936 <KPD_enum_Get_Key_State+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e2       	ldi	r20, 0x20	; 32
    28f2:	51 e4       	ldi	r21, 0x41	; 65
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	bc 01       	movw	r22, r24
    28fe:	cd 01       	movw	r24, r26
    2900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	9e 83       	std	Y+6, r25	; 0x06
    290a:	8d 83       	std	Y+5, r24	; 0x05
    290c:	0f c0       	rjmp	.+30     	; 0x292c <KPD_enum_Get_Key_State+0x128>
    290e:	89 e1       	ldi	r24, 0x19	; 25
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9c 83       	std	Y+4, r25	; 0x04
    2914:	8b 83       	std	Y+3, r24	; 0x03
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	f1 f7       	brne	.-4      	; 0x291a <KPD_enum_Get_Key_State+0x116>
    291e:	9c 83       	std	Y+4, r25	; 0x04
    2920:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	9e 83       	std	Y+6, r25	; 0x06
    292a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292c:	8d 81       	ldd	r24, Y+5	; 0x05
    292e:	9e 81       	ldd	r25, Y+6	; 0x06
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	69 f7       	brne	.-38     	; 0x290e <KPD_enum_Get_Key_State+0x10a>
    2934:	14 c0       	rjmp	.+40     	; 0x295e <KPD_enum_Get_Key_State+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2936:	6f 81       	ldd	r22, Y+7	; 0x07
    2938:	78 85       	ldd	r23, Y+8	; 0x08
    293a:	89 85       	ldd	r24, Y+9	; 0x09
    293c:	9a 85       	ldd	r25, Y+10	; 0x0a
    293e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	9e 83       	std	Y+6, r25	; 0x06
    2948:	8d 83       	std	Y+5, r24	; 0x05
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
    294c:	9e 81       	ldd	r25, Y+6	; 0x06
    294e:	9a 83       	std	Y+2, r25	; 0x02
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	9a 81       	ldd	r25, Y+2	; 0x02
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	f1 f7       	brne	.-4      	; 0x2956 <KPD_enum_Get_Key_State+0x152>
    295a:	9a 83       	std	Y+2, r25	; 0x02
    295c:	89 83       	std	Y+1, r24	; 0x01
            {

          /*Debouncing */
         _delay_ms(20);
		 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
    295e:	88 89       	ldd	r24, Y+16	; 0x10
    2960:	88 2f       	mov	r24, r24
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	fc 01       	movw	r30, r24
    2966:	e9 5c       	subi	r30, 0xC9	; 201
    2968:	fe 4f       	sbci	r31, 0xFE	; 254
    296a:	90 81       	ld	r25, Z
    296c:	9e 01       	movw	r18, r28
    296e:	2d 5e       	subi	r18, 0xED	; 237
    2970:	3f 4f       	sbci	r19, 0xFF	; 255
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	69 2f       	mov	r22, r25
    2976:	a9 01       	movw	r20, r18
    2978:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <DIO_u8_Get_Pin_Value>
    297c:	0f c0       	rjmp	.+30     	; 0x299c <KPD_enum_Get_Key_State+0x198>
//			DIO_u8_Set_Pin_Value(2 , 1 , 1);

         /*check if the pin is still pressed */
		 while (Local_u8_Key_Value == DIO_u8_LOW){
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT,  KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
    297e:	88 89       	ldd	r24, Y+16	; 0x10
    2980:	88 2f       	mov	r24, r24
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	fc 01       	movw	r30, r24
    2986:	e9 5c       	subi	r30, 0xC9	; 201
    2988:	fe 4f       	sbci	r31, 0xFE	; 254
    298a:	90 81       	ld	r25, Z
    298c:	9e 01       	movw	r18, r28
    298e:	2d 5e       	subi	r18, 0xED	; 237
    2990:	3f 4f       	sbci	r19, 0xFF	; 255
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	69 2f       	mov	r22, r25
    2996:	a9 01       	movw	r20, r18
    2998:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <DIO_u8_Get_Pin_Value>
         _delay_ms(20);
		 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT, KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
//			DIO_u8_Set_Pin_Value(2 , 1 , 1);

         /*check if the pin is still pressed */
		 while (Local_u8_Key_Value == DIO_u8_LOW){
    299c:	8b 89       	ldd	r24, Y+19	; 0x13
    299e:	88 23       	and	r24, r24
    29a0:	71 f3       	breq	.-36     	; 0x297e <KPD_enum_Get_Key_State+0x17a>
			 DIO_u8_Get_Pin_Value  ( KPD_u8_PORT,  KPD_Au8_Cols_Pins[Local_u8_Cols_Counter], &Local_u8_Key_Value );
//			 Local_enu_Erorr_State= ES_OK;
		 }
      *Copy_pu8_Returned_Key = KPD_Au8_Keys[Local_u8_Rows_Counter][Local_u8_Cols_Counter];
    29a2:	89 89       	ldd	r24, Y+17	; 0x11
    29a4:	48 2f       	mov	r20, r24
    29a6:	50 e0       	ldi	r21, 0x00	; 0
    29a8:	88 89       	ldd	r24, Y+16	; 0x10
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	ca 01       	movw	r24, r20
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	88 0f       	add	r24, r24
    29b6:	99 1f       	adc	r25, r25
    29b8:	82 0f       	add	r24, r18
    29ba:	93 1f       	adc	r25, r19
    29bc:	fc 01       	movw	r30, r24
    29be:	ed 5d       	subi	r30, 0xDD	; 221
    29c0:	fe 4f       	sbci	r31, 0xFE	; 254
    29c2:	80 81       	ld	r24, Z
    29c4:	ec 89       	ldd	r30, Y+20	; 0x14
    29c6:	fd 89       	ldd	r31, Y+21	; 0x15
    29c8:	80 83       	st	Z, r24
       Local_u8_Flag =DIO_u8_HIGH;
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	8f 87       	std	Y+15, r24	; 0x0f
    29ce:	07 c0       	rjmp	.+14     	; 0x29de <KPD_enum_Get_Key_State+0x1da>
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
		 DIO_u8_Set_Pin_Value (KPD_u8_PORT, KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],  DIO_u8_LOW );
//			DIO_u8_Set_Pin_Value(2 , 0 , 1);

		 /*check which input pin has zero		  */
		 for (Local_u8_Cols_Counter=KPD_u8_C1; Local_u8_Cols_Counter<=KPD_u8_C4; Local_u8_Cols_Counter++){
    29d0:	88 89       	ldd	r24, Y+16	; 0x10
    29d2:	8f 5f       	subi	r24, 0xFF	; 255
    29d4:	88 8b       	std	Y+16, r24	; 0x10
    29d6:	88 89       	ldd	r24, Y+16	; 0x10
    29d8:	84 30       	cpi	r24, 0x04	; 4
    29da:	08 f4       	brcc	.+2      	; 0x29de <KPD_enum_Get_Key_State+0x1da>
    29dc:	3b cf       	rjmp	.-394    	; 0x2854 <KPD_enum_Get_Key_State+0x50>
       Local_u8_Flag =DIO_u8_HIGH;
        break;
            }
		 }
/*deactivate rows */
		 DIO_u8_Set_Pin_Value(KPD_u8_PORT,KPD_Au8_Rows_Pins[Local_u8_Rows_Counter],DIO_u8_HIGH);
    29de:	89 89       	ldd	r24, Y+17	; 0x11
    29e0:	88 2f       	mov	r24, r24
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	fc 01       	movw	r30, r24
    29e6:	ed 5c       	subi	r30, 0xCD	; 205
    29e8:	fe 4f       	sbci	r31, 0xFE	; 254
    29ea:	90 81       	ld	r25, Z
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	69 2f       	mov	r22, r25
    29f0:	41 e0       	ldi	r20, 0x01	; 1
    29f2:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
		 			if(Local_u8_Flag == DIO_u8_HIGH)
    29f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f8:	81 30       	cpi	r24, 0x01	; 1
    29fa:	51 f0       	breq	.+20     	; 0x2a10 <KPD_enum_Get_Key_State+0x20c>
		*Copy_pu8_Returned_Key = KPD_u8_Keys_NO_Pressed;



/* activate each row by for loop */
	 for (Local_u8_Rows_Counter=KPD_u8_R1; Local_u8_Rows_Counter<=KPD_u8_R4; Local_u8_Rows_Counter++){
    29fc:	89 89       	ldd	r24, Y+17	; 0x11
    29fe:	8f 5f       	subi	r24, 0xFF	; 255
    2a00:	89 8b       	std	Y+17, r24	; 0x11
    2a02:	89 89       	ldd	r24, Y+17	; 0x11
    2a04:	84 30       	cpi	r24, 0x04	; 4
    2a06:	08 f4       	brcc	.+2      	; 0x2a0a <KPD_enum_Get_Key_State+0x206>
    2a08:	17 cf       	rjmp	.-466    	; 0x2838 <KPD_enum_Get_Key_State+0x34>
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <KPD_enum_Get_Key_State+0x20c>
		 				break;
	 }
 }
 else
     {
	 Local_enu_Erorr_State = ES_NOK;
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	8a 8b       	std	Y+18, r24	; 0x12
     }
 return Local_enu_Erorr_State;
    2a10:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2a12:	65 96       	adiw	r28, 0x15	; 21
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <LCD_enum_INIT>:
#include"LCD_private.h"

//#define F_CPU 8000000UL
#include<util/delay.h>

ES_t LCD_enum_INIT (void){
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	c2 54       	subi	r28, 0x42	; 66
    2a2e:	d0 40       	sbci	r29, 0x00	; 0
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	ff 96       	adiw	r30, 0x3f	; 63
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	ac e0       	ldi	r26, 0x0C	; 12
    2a44:	b2 e4       	ldi	r27, 0x42	; 66
    2a46:	80 83       	st	Z, r24
    2a48:	91 83       	std	Z+1, r25	; 0x01
    2a4a:	a2 83       	std	Z+2, r26	; 0x02
    2a4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ff 96       	adiw	r30, 0x3f	; 63
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	82 81       	ldd	r24, Z+2	; 0x02
    2a58:	93 81       	ldd	r25, Z+3	; 0x03
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a e7       	ldi	r20, 0x7A	; 122
    2a60:	53 e4       	ldi	r21, 0x43	; 67
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	8b af       	std	Y+59, r24	; 0x3b
    2a6c:	9c af       	std	Y+60, r25	; 0x3c
    2a6e:	ad af       	std	Y+61, r26	; 0x3d
    2a70:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    2a72:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a74:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a76:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a78:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <LCD_enum_INIT+0x70>
		__ticks = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9a af       	std	Y+58, r25	; 0x3a
    2a90:	89 af       	std	Y+57, r24	; 0x39
    2a92:	41 c0       	rjmp	.+130    	; 0x2b16 <LCD_enum_INIT+0xf2>
	else if (__tmp > 65535)
    2a94:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a96:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a98:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	5c f5       	brge	.+86     	; 0x2b02 <LCD_enum_INIT+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aac:	fe 01       	movw	r30, r28
    2aae:	ff 96       	adiw	r30, 0x3f	; 63
    2ab0:	60 81       	ld	r22, Z
    2ab2:	71 81       	ldd	r23, Z+1	; 0x01
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e2       	ldi	r20, 0x20	; 32
    2abe:	51 e4       	ldi	r21, 0x41	; 65
    2ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	bc 01       	movw	r22, r24
    2aca:	cd 01       	movw	r24, r26
    2acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	9a af       	std	Y+58, r25	; 0x3a
    2ad6:	89 af       	std	Y+57, r24	; 0x39
    2ad8:	0f c0       	rjmp	.+30     	; 0x2af8 <LCD_enum_INIT+0xd4>
    2ada:	89 e1       	ldi	r24, 0x19	; 25
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	98 af       	std	Y+56, r25	; 0x38
    2ae0:	8f ab       	std	Y+55, r24	; 0x37
    2ae2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ae4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <LCD_enum_INIT+0xc2>
    2aea:	98 af       	std	Y+56, r25	; 0x38
    2aec:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aee:	89 ad       	ldd	r24, Y+57	; 0x39
    2af0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	9a af       	std	Y+58, r25	; 0x3a
    2af6:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af8:	89 ad       	ldd	r24, Y+57	; 0x39
    2afa:	9a ad       	ldd	r25, Y+58	; 0x3a
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	69 f7       	brne	.-38     	; 0x2ada <LCD_enum_INIT+0xb6>
    2b00:	14 c0       	rjmp	.+40     	; 0x2b2a <LCD_enum_INIT+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b02:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b04:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b06:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b08:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	9a af       	std	Y+58, r25	; 0x3a
    2b14:	89 af       	std	Y+57, r24	; 0x39
    2b16:	89 ad       	ldd	r24, Y+57	; 0x39
    2b18:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b1a:	9e ab       	std	Y+54, r25	; 0x36
    2b1c:	8d ab       	std	Y+53, r24	; 0x35
    2b1e:	8d a9       	ldd	r24, Y+53	; 0x35
    2b20:	9e a9       	ldd	r25, Y+54	; 0x36
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	f1 f7       	brne	.-4      	; 0x2b22 <LCD_enum_INIT+0xfe>
    2b26:	9e ab       	std	Y+54, r25	; 0x36
    2b28:	8d ab       	std	Y+53, r24	; 0x35
	_delay_ms(35);
//to set CMND
	LCD_enum_Send_Comnd(FUN_SET_8BIT_2LINES_5X7);
    2b2a:	88 e3       	ldi	r24, 0x38	; 56
    2b2c:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <LCD_enum_Send_Comnd>
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 e2       	ldi	r26, 0x20	; 32
    2b36:	b2 e4       	ldi	r27, 0x42	; 66
    2b38:	89 ab       	std	Y+49, r24	; 0x31
    2b3a:	9a ab       	std	Y+50, r25	; 0x32
    2b3c:	ab ab       	std	Y+51, r26	; 0x33
    2b3e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b40:	69 a9       	ldd	r22, Y+49	; 0x31
    2b42:	7a a9       	ldd	r23, Y+50	; 0x32
    2b44:	8b a9       	ldd	r24, Y+51	; 0x33
    2b46:	9c a9       	ldd	r25, Y+52	; 0x34
    2b48:	2b ea       	ldi	r18, 0xAB	; 171
    2b4a:	3a ea       	ldi	r19, 0xAA	; 170
    2b4c:	4a ea       	ldi	r20, 0xAA	; 170
    2b4e:	5e e3       	ldi	r21, 0x3E	; 62
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	8d a7       	std	Y+45, r24	; 0x2d
    2b5a:	9e a7       	std	Y+46, r25	; 0x2e
    2b5c:	af a7       	std	Y+47, r26	; 0x2f
    2b5e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2b60:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b62:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b66:	98 a9       	ldd	r25, Y+48	; 0x30
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	40 e8       	ldi	r20, 0x80	; 128
    2b6e:	5f e3       	ldi	r21, 0x3F	; 63
    2b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b74:	88 23       	and	r24, r24
    2b76:	1c f4       	brge	.+6      	; 0x2b7e <LCD_enum_INIT+0x15a>
		__ticks = 1;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	8c a7       	std	Y+44, r24	; 0x2c
    2b7c:	91 c0       	rjmp	.+290    	; 0x2ca0 <LCD_enum_INIT+0x27c>
	else if (__tmp > 255)
    2b7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2b80:	7e a5       	ldd	r23, Y+46	; 0x2e
    2b82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b84:	98 a9       	ldd	r25, Y+48	; 0x30
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	4f e7       	ldi	r20, 0x7F	; 127
    2b8c:	53 e4       	ldi	r21, 0x43	; 67
    2b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b92:	18 16       	cp	r1, r24
    2b94:	0c f0       	brlt	.+2      	; 0x2b98 <LCD_enum_INIT+0x174>
    2b96:	7b c0       	rjmp	.+246    	; 0x2c8e <LCD_enum_INIT+0x26a>
	{
		_delay_ms(__us / 1000.0);
    2b98:	69 a9       	ldd	r22, Y+49	; 0x31
    2b9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	4a e7       	ldi	r20, 0x7A	; 122
    2ba6:	54 e4       	ldi	r21, 0x44	; 68
    2ba8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	88 a7       	std	Y+40, r24	; 0x28
    2bb2:	99 a7       	std	Y+41, r25	; 0x29
    2bb4:	aa a7       	std	Y+42, r26	; 0x2a
    2bb6:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb8:	68 a5       	ldd	r22, Y+40	; 0x28
    2bba:	79 a5       	ldd	r23, Y+41	; 0x29
    2bbc:	8a a5       	ldd	r24, Y+42	; 0x2a
    2bbe:	9b a5       	ldd	r25, Y+43	; 0x2b
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	4a e7       	ldi	r20, 0x7A	; 122
    2bc6:	53 e4       	ldi	r21, 0x43	; 67
    2bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	8c a3       	std	Y+36, r24	; 0x24
    2bd2:	9d a3       	std	Y+37, r25	; 0x25
    2bd4:	ae a3       	std	Y+38, r26	; 0x26
    2bd6:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    2bd8:	6c a1       	ldd	r22, Y+36	; 0x24
    2bda:	7d a1       	ldd	r23, Y+37	; 0x25
    2bdc:	8e a1       	ldd	r24, Y+38	; 0x26
    2bde:	9f a1       	ldd	r25, Y+39	; 0x27
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	40 e8       	ldi	r20, 0x80	; 128
    2be6:	5f e3       	ldi	r21, 0x3F	; 63
    2be8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bec:	88 23       	and	r24, r24
    2bee:	2c f4       	brge	.+10     	; 0x2bfa <LCD_enum_INIT+0x1d6>
		__ticks = 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9b a3       	std	Y+35, r25	; 0x23
    2bf6:	8a a3       	std	Y+34, r24	; 0x22
    2bf8:	3f c0       	rjmp	.+126    	; 0x2c78 <LCD_enum_INIT+0x254>
	else if (__tmp > 65535)
    2bfa:	6c a1       	ldd	r22, Y+36	; 0x24
    2bfc:	7d a1       	ldd	r23, Y+37	; 0x25
    2bfe:	8e a1       	ldd	r24, Y+38	; 0x26
    2c00:	9f a1       	ldd	r25, Y+39	; 0x27
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	3f ef       	ldi	r19, 0xFF	; 255
    2c06:	4f e7       	ldi	r20, 0x7F	; 127
    2c08:	57 e4       	ldi	r21, 0x47	; 71
    2c0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c0e:	18 16       	cp	r1, r24
    2c10:	4c f5       	brge	.+82     	; 0x2c64 <LCD_enum_INIT+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c12:	68 a5       	ldd	r22, Y+40	; 0x28
    2c14:	79 a5       	ldd	r23, Y+41	; 0x29
    2c16:	8a a5       	ldd	r24, Y+42	; 0x2a
    2c18:	9b a5       	ldd	r25, Y+43	; 0x2b
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	40 e2       	ldi	r20, 0x20	; 32
    2c20:	51 e4       	ldi	r21, 0x41	; 65
    2c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	bc 01       	movw	r22, r24
    2c2c:	cd 01       	movw	r24, r26
    2c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9b a3       	std	Y+35, r25	; 0x23
    2c38:	8a a3       	std	Y+34, r24	; 0x22
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <LCD_enum_INIT+0x236>
    2c3c:	89 e1       	ldi	r24, 0x19	; 25
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	99 a3       	std	Y+33, r25	; 0x21
    2c42:	88 a3       	std	Y+32, r24	; 0x20
    2c44:	88 a1       	ldd	r24, Y+32	; 0x20
    2c46:	99 a1       	ldd	r25, Y+33	; 0x21
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <LCD_enum_INIT+0x224>
    2c4c:	99 a3       	std	Y+33, r25	; 0x21
    2c4e:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c50:	8a a1       	ldd	r24, Y+34	; 0x22
    2c52:	9b a1       	ldd	r25, Y+35	; 0x23
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	9b a3       	std	Y+35, r25	; 0x23
    2c58:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5a:	8a a1       	ldd	r24, Y+34	; 0x22
    2c5c:	9b a1       	ldd	r25, Y+35	; 0x23
    2c5e:	00 97       	sbiw	r24, 0x00	; 0
    2c60:	69 f7       	brne	.-38     	; 0x2c3c <LCD_enum_INIT+0x218>
    2c62:	24 c0       	rjmp	.+72     	; 0x2cac <LCD_enum_INIT+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c64:	6c a1       	ldd	r22, Y+36	; 0x24
    2c66:	7d a1       	ldd	r23, Y+37	; 0x25
    2c68:	8e a1       	ldd	r24, Y+38	; 0x26
    2c6a:	9f a1       	ldd	r25, Y+39	; 0x27
    2c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	9b a3       	std	Y+35, r25	; 0x23
    2c76:	8a a3       	std	Y+34, r24	; 0x22
    2c78:	8a a1       	ldd	r24, Y+34	; 0x22
    2c7a:	9b a1       	ldd	r25, Y+35	; 0x23
    2c7c:	9f 8f       	std	Y+31, r25	; 0x1f
    2c7e:	8e 8f       	std	Y+30, r24	; 0x1e
    2c80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c82:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <LCD_enum_INIT+0x260>
    2c88:	9f 8f       	std	Y+31, r25	; 0x1f
    2c8a:	8e 8f       	std	Y+30, r24	; 0x1e
    2c8c:	0f c0       	rjmp	.+30     	; 0x2cac <LCD_enum_INIT+0x288>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c8e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2c90:	7e a5       	ldd	r23, Y+46	; 0x2e
    2c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c94:	98 a9       	ldd	r25, Y+48	; 0x30
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	8c a7       	std	Y+44, r24	; 0x2c
    2ca0:	8c a5       	ldd	r24, Y+44	; 0x2c
    2ca2:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ca4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ca6:	8a 95       	dec	r24
    2ca8:	f1 f7       	brne	.-4      	; 0x2ca6 <LCD_enum_INIT+0x282>
    2caa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(40);
	LCD_enum_Send_Comnd(DIS_ON_CURSOR_ON_BLINKING);
    2cac:	8f e0       	ldi	r24, 0x0F	; 15
    2cae:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <LCD_enum_Send_Comnd>
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	a0 e2       	ldi	r26, 0x20	; 32
    2cb8:	b2 e4       	ldi	r27, 0x42	; 66
    2cba:	89 8f       	std	Y+25, r24	; 0x19
    2cbc:	9a 8f       	std	Y+26, r25	; 0x1a
    2cbe:	ab 8f       	std	Y+27, r26	; 0x1b
    2cc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc2:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	4a e7       	ldi	r20, 0x7A	; 122
    2cd0:	53 e4       	ldi	r21, 0x43	; 67
    2cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	8d 8b       	std	Y+21, r24	; 0x15
    2cdc:	9e 8b       	std	Y+22, r25	; 0x16
    2cde:	af 8b       	std	Y+23, r26	; 0x17
    2ce0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e8       	ldi	r20, 0x80	; 128
    2cf0:	5f e3       	ldi	r21, 0x3F	; 63
    2cf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf6:	88 23       	and	r24, r24
    2cf8:	2c f4       	brge	.+10     	; 0x2d04 <LCD_enum_INIT+0x2e0>
		__ticks = 1;
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	9c 8b       	std	Y+20, r25	; 0x14
    2d00:	8b 8b       	std	Y+19, r24	; 0x13
    2d02:	3f c0       	rjmp	.+126    	; 0x2d82 <LCD_enum_INIT+0x35e>
	else if (__tmp > 65535)
    2d04:	6d 89       	ldd	r22, Y+21	; 0x15
    2d06:	7e 89       	ldd	r23, Y+22	; 0x16
    2d08:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	4f e7       	ldi	r20, 0x7F	; 127
    2d12:	57 e4       	ldi	r21, 0x47	; 71
    2d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d18:	18 16       	cp	r1, r24
    2d1a:	4c f5       	brge	.+82     	; 0x2d6e <LCD_enum_INIT+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e2       	ldi	r20, 0x20	; 32
    2d2a:	51 e4       	ldi	r21, 0x41	; 65
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	9c 8b       	std	Y+20, r25	; 0x14
    2d42:	8b 8b       	std	Y+19, r24	; 0x13
    2d44:	0f c0       	rjmp	.+30     	; 0x2d64 <LCD_enum_INIT+0x340>
    2d46:	89 e1       	ldi	r24, 0x19	; 25
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	9a 8b       	std	Y+18, r25	; 0x12
    2d4c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d4e:	89 89       	ldd	r24, Y+17	; 0x11
    2d50:	9a 89       	ldd	r25, Y+18	; 0x12
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <LCD_enum_INIT+0x32e>
    2d56:	9a 8b       	std	Y+18, r25	; 0x12
    2d58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	9c 8b       	std	Y+20, r25	; 0x14
    2d62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d64:	8b 89       	ldd	r24, Y+19	; 0x13
    2d66:	9c 89       	ldd	r25, Y+20	; 0x14
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	69 f7       	brne	.-38     	; 0x2d46 <LCD_enum_INIT+0x322>
    2d6c:	14 c0       	rjmp	.+40     	; 0x2d96 <LCD_enum_INIT+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d70:	7e 89       	ldd	r23, Y+22	; 0x16
    2d72:	8f 89       	ldd	r24, Y+23	; 0x17
    2d74:	98 8d       	ldd	r25, Y+24	; 0x18
    2d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	9c 8b       	std	Y+20, r25	; 0x14
    2d80:	8b 8b       	std	Y+19, r24	; 0x13
    2d82:	8b 89       	ldd	r24, Y+19	; 0x13
    2d84:	9c 89       	ldd	r25, Y+20	; 0x14
    2d86:	98 8b       	std	Y+16, r25	; 0x10
    2d88:	8f 87       	std	Y+15, r24	; 0x0f
    2d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d8c:	98 89       	ldd	r25, Y+16	; 0x10
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	f1 f7       	brne	.-4      	; 0x2d8e <LCD_enum_INIT+0x36a>
    2d92:	98 8b       	std	Y+16, r25	; 0x10
    2d94:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <LCD_enum_Send_Comnd>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a0 e8       	ldi	r26, 0x80	; 128
    2da2:	bf e3       	ldi	r27, 0x3F	; 63
    2da4:	8b 87       	std	Y+11, r24	; 0x0b
    2da6:	9c 87       	std	Y+12, r25	; 0x0c
    2da8:	ad 87       	std	Y+13, r26	; 0x0d
    2daa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a e7       	ldi	r20, 0x7A	; 122
    2dba:	53 e4       	ldi	r21, 0x43	; 67
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	8f 83       	std	Y+7, r24	; 0x07
    2dc6:	98 87       	std	Y+8, r25	; 0x08
    2dc8:	a9 87       	std	Y+9, r26	; 0x09
    2dca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dce:	78 85       	ldd	r23, Y+8	; 0x08
    2dd0:	89 85       	ldd	r24, Y+9	; 0x09
    2dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e8       	ldi	r20, 0x80	; 128
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de0:	88 23       	and	r24, r24
    2de2:	2c f4       	brge	.+10     	; 0x2dee <LCD_enum_INIT+0x3ca>
		__ticks = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	3f c0       	rjmp	.+126    	; 0x2e6c <LCD_enum_INIT+0x448>
	else if (__tmp > 65535)
    2dee:	6f 81       	ldd	r22, Y+7	; 0x07
    2df0:	78 85       	ldd	r23, Y+8	; 0x08
    2df2:	89 85       	ldd	r24, Y+9	; 0x09
    2df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	3f ef       	ldi	r19, 0xFF	; 255
    2dfa:	4f e7       	ldi	r20, 0x7F	; 127
    2dfc:	57 e4       	ldi	r21, 0x47	; 71
    2dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	4c f5       	brge	.+82     	; 0x2e58 <LCD_enum_INIT+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9e 83       	std	Y+6, r25	; 0x06
    2e2c:	8d 83       	std	Y+5, r24	; 0x05
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <LCD_enum_INIT+0x42a>
    2e30:	89 e1       	ldi	r24, 0x19	; 25
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9c 83       	std	Y+4, r25	; 0x04
    2e36:	8b 83       	std	Y+3, r24	; 0x03
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <LCD_enum_INIT+0x418>
    2e40:	9c 83       	std	Y+4, r25	; 0x04
    2e42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	9e 83       	std	Y+6, r25	; 0x06
    2e4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e50:	9e 81       	ldd	r25, Y+6	; 0x06
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <LCD_enum_INIT+0x40c>
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <LCD_enum_INIT+0x45c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5a:	78 85       	ldd	r23, Y+8	; 0x08
    2e5c:	89 85       	ldd	r24, Y+9	; 0x09
    2e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	9a 83       	std	Y+2, r25	; 0x02
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	89 81       	ldd	r24, Y+1	; 0x01
    2e76:	9a 81       	ldd	r25, Y+2	; 0x02
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <LCD_enum_INIT+0x454>
    2e7c:	9a 83       	std	Y+2, r25	; 0x02
    2e7e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_enum_Send_Comnd(ENTRY_MOOD);
    2e80:	86 e0       	ldi	r24, 0x06	; 6
    2e82:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <LCD_enum_Send_Comnd>
    return ES_OK;
    2e86:	80 e0       	ldi	r24, 0x00	; 0
}
    2e88:	ce 5b       	subi	r28, 0xBE	; 190
    2e8a:	df 4f       	sbci	r29, 0xFF	; 255
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	08 95       	ret

00002e9c <LCD_enum_Send_Comnd>:
//to send a command
ES_t LCD_enum_Send_Comnd(u8 Copy_u8_Comnd){
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	69 97       	sbiw	r28, 0x19	; 25
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	89 8f       	std	Y+25, r24	; 0x19
#if  LCD_u8_MODE == LCD_u8_MODE_8_bit
//RS =0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_LOW );
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
//RW = 0

 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	61 e0       	ldi	r22, 0x01	; 1
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>

//Write Command
 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_Comnd);
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	69 8d       	ldd	r22, Y+25	; 0x19
    2eca:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_u8_Set_Port_Value>

//E = 1
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	62 e0       	ldi	r22, 0x02	; 2
    2ed2:	41 e0       	ldi	r20, 0x01	; 1
    2ed4:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	a0 e8       	ldi	r26, 0x80	; 128
    2ede:	bf e3       	ldi	r27, 0x3F	; 63
    2ee0:	8d 8b       	std	Y+21, r24	; 0x15
    2ee2:	9e 8b       	std	Y+22, r25	; 0x16
    2ee4:	af 8b       	std	Y+23, r26	; 0x17
    2ee6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ee8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eea:	7e 89       	ldd	r23, Y+22	; 0x16
    2eec:	8f 89       	ldd	r24, Y+23	; 0x17
    2eee:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef0:	2b ea       	ldi	r18, 0xAB	; 171
    2ef2:	3a ea       	ldi	r19, 0xAA	; 170
    2ef4:	4a ea       	ldi	r20, 0xAA	; 170
    2ef6:	5e e3       	ldi	r21, 0x3E	; 62
    2ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	89 8b       	std	Y+17, r24	; 0x11
    2f02:	9a 8b       	std	Y+18, r25	; 0x12
    2f04:	ab 8b       	std	Y+19, r26	; 0x13
    2f06:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f08:	69 89       	ldd	r22, Y+17	; 0x11
    2f0a:	7a 89       	ldd	r23, Y+18	; 0x12
    2f0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	40 e8       	ldi	r20, 0x80	; 128
    2f16:	5f e3       	ldi	r21, 0x3F	; 63
    2f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f1c:	88 23       	and	r24, r24
    2f1e:	1c f4       	brge	.+6      	; 0x2f26 <LCD_enum_Send_Comnd+0x8a>
		__ticks = 1;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	88 8b       	std	Y+16, r24	; 0x10
    2f24:	91 c0       	rjmp	.+290    	; 0x3048 <LCD_enum_Send_Comnd+0x1ac>
	else if (__tmp > 255)
    2f26:	69 89       	ldd	r22, Y+17	; 0x11
    2f28:	7a 89       	ldd	r23, Y+18	; 0x12
    2f2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	53 e4       	ldi	r21, 0x43	; 67
    2f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	0c f0       	brlt	.+2      	; 0x2f40 <LCD_enum_Send_Comnd+0xa4>
    2f3e:	7b c0       	rjmp	.+246    	; 0x3036 <LCD_enum_Send_Comnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2f40:	6d 89       	ldd	r22, Y+21	; 0x15
    2f42:	7e 89       	ldd	r23, Y+22	; 0x16
    2f44:	8f 89       	ldd	r24, Y+23	; 0x17
    2f46:	98 8d       	ldd	r25, Y+24	; 0x18
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4a e7       	ldi	r20, 0x7A	; 122
    2f4e:	54 e4       	ldi	r21, 0x44	; 68
    2f50:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	8c 87       	std	Y+12, r24	; 0x0c
    2f5a:	9d 87       	std	Y+13, r25	; 0x0d
    2f5c:	ae 87       	std	Y+14, r26	; 0x0e
    2f5e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f60:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f62:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f64:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f66:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	4a e7       	ldi	r20, 0x7A	; 122
    2f6e:	53 e4       	ldi	r21, 0x43	; 67
    2f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	88 87       	std	Y+8, r24	; 0x08
    2f7a:	99 87       	std	Y+9, r25	; 0x09
    2f7c:	aa 87       	std	Y+10, r26	; 0x0a
    2f7e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f80:	68 85       	ldd	r22, Y+8	; 0x08
    2f82:	79 85       	ldd	r23, Y+9	; 0x09
    2f84:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f86:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e8       	ldi	r20, 0x80	; 128
    2f8e:	5f e3       	ldi	r21, 0x3F	; 63
    2f90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f94:	88 23       	and	r24, r24
    2f96:	2c f4       	brge	.+10     	; 0x2fa2 <LCD_enum_Send_Comnd+0x106>
		__ticks = 1;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	9f 83       	std	Y+7, r25	; 0x07
    2f9e:	8e 83       	std	Y+6, r24	; 0x06
    2fa0:	3f c0       	rjmp	.+126    	; 0x3020 <LCD_enum_Send_Comnd+0x184>
	else if (__tmp > 65535)
    2fa2:	68 85       	ldd	r22, Y+8	; 0x08
    2fa4:	79 85       	ldd	r23, Y+9	; 0x09
    2fa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	3f ef       	ldi	r19, 0xFF	; 255
    2fae:	4f e7       	ldi	r20, 0x7F	; 127
    2fb0:	57 e4       	ldi	r21, 0x47	; 71
    2fb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fb6:	18 16       	cp	r1, r24
    2fb8:	4c f5       	brge	.+82     	; 0x300c <LCD_enum_Send_Comnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fba:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e2       	ldi	r20, 0x20	; 32
    2fc8:	51 e4       	ldi	r21, 0x41	; 65
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9f 83       	std	Y+7, r25	; 0x07
    2fe0:	8e 83       	std	Y+6, r24	; 0x06
    2fe2:	0f c0       	rjmp	.+30     	; 0x3002 <LCD_enum_Send_Comnd+0x166>
    2fe4:	89 e1       	ldi	r24, 0x19	; 25
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9d 83       	std	Y+5, r25	; 0x05
    2fea:	8c 83       	std	Y+4, r24	; 0x04
    2fec:	8c 81       	ldd	r24, Y+4	; 0x04
    2fee:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <LCD_enum_Send_Comnd+0x154>
    2ff4:	9d 83       	std	Y+5, r25	; 0x05
    2ff6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff8:	8e 81       	ldd	r24, Y+6	; 0x06
    2ffa:	9f 81       	ldd	r25, Y+7	; 0x07
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9f 83       	std	Y+7, r25	; 0x07
    3000:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3002:	8e 81       	ldd	r24, Y+6	; 0x06
    3004:	9f 81       	ldd	r25, Y+7	; 0x07
    3006:	00 97       	sbiw	r24, 0x00	; 0
    3008:	69 f7       	brne	.-38     	; 0x2fe4 <LCD_enum_Send_Comnd+0x148>
    300a:	24 c0       	rjmp	.+72     	; 0x3054 <LCD_enum_Send_Comnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300c:	68 85       	ldd	r22, Y+8	; 0x08
    300e:	79 85       	ldd	r23, Y+9	; 0x09
    3010:	8a 85       	ldd	r24, Y+10	; 0x0a
    3012:	9b 85       	ldd	r25, Y+11	; 0x0b
    3014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9f 83       	std	Y+7, r25	; 0x07
    301e:	8e 83       	std	Y+6, r24	; 0x06
    3020:	8e 81       	ldd	r24, Y+6	; 0x06
    3022:	9f 81       	ldd	r25, Y+7	; 0x07
    3024:	9b 83       	std	Y+3, r25	; 0x03
    3026:	8a 83       	std	Y+2, r24	; 0x02
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	9b 81       	ldd	r25, Y+3	; 0x03
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <LCD_enum_Send_Comnd+0x190>
    3030:	9b 83       	std	Y+3, r25	; 0x03
    3032:	8a 83       	std	Y+2, r24	; 0x02
    3034:	0f c0       	rjmp	.+30     	; 0x3054 <LCD_enum_Send_Comnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3036:	69 89       	ldd	r22, Y+17	; 0x11
    3038:	7a 89       	ldd	r23, Y+18	; 0x12
    303a:	8b 89       	ldd	r24, Y+19	; 0x13
    303c:	9c 89       	ldd	r25, Y+20	; 0x14
    303e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	88 8b       	std	Y+16, r24	; 0x10
    3048:	88 89       	ldd	r24, Y+16	; 0x10
    304a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	8a 95       	dec	r24
    3050:	f1 f7       	brne	.-4      	; 0x304e <LCD_enum_Send_Comnd+0x1b2>
    3052:	89 83       	std	Y+1, r24	; 0x01
_delay_us(1);

//E = 0
 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	62 e0       	ldi	r22, 0x02	; 2
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
 return ES_OK;
    305e:	80 e0       	ldi	r24, 0x00	; 0
    DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
return ES_OK;

#endif

}
    3060:	69 96       	adiw	r28, 0x19	; 25
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	08 95       	ret

00003072 <LCD_enum_Send_char>:
//function to send a character
ES_t LCD_enum_Send_char(u8 Copy_u8_char){
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	69 97       	sbiw	r28, 0x19	; 25
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	89 8f       	std	Y+25, r24	; 0x19
	//RS =0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RS_PIN,  DIO_u8_HIGH );
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	60 e0       	ldi	r22, 0x00	; 0
    308c:	41 e0       	ldi	r20, 0x01	; 1
    308e:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	//RW = 0

	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_RW_PIN,  DIO_u8_LOW );
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	61 e0       	ldi	r22, 0x01	; 1
    3096:	40 e0       	ldi	r20, 0x00	; 0
    3098:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>

	//Write char
	 DIO_u8_Set_Port_Value ( LCD_u8_DATA_PORT,  Copy_u8_char);
    309c:	82 e0       	ldi	r24, 0x02	; 2
    309e:	69 8d       	ldd	r22, Y+25	; 0x19
    30a0:	0e 94 48 0c 	call	0x1890	; 0x1890 <DIO_u8_Set_Port_Value>

	//E = 1
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_HIGH );
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	62 e0       	ldi	r22, 0x02	; 2
    30a8:	41 e0       	ldi	r20, 0x01	; 1
    30aa:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	a0 e8       	ldi	r26, 0x80	; 128
    30b4:	bf e3       	ldi	r27, 0x3F	; 63
    30b6:	8d 8b       	std	Y+21, r24	; 0x15
    30b8:	9e 8b       	std	Y+22, r25	; 0x16
    30ba:	af 8b       	std	Y+23, r26	; 0x17
    30bc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30be:	6d 89       	ldd	r22, Y+21	; 0x15
    30c0:	7e 89       	ldd	r23, Y+22	; 0x16
    30c2:	8f 89       	ldd	r24, Y+23	; 0x17
    30c4:	98 8d       	ldd	r25, Y+24	; 0x18
    30c6:	2b ea       	ldi	r18, 0xAB	; 171
    30c8:	3a ea       	ldi	r19, 0xAA	; 170
    30ca:	4a ea       	ldi	r20, 0xAA	; 170
    30cc:	5e e3       	ldi	r21, 0x3E	; 62
    30ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	89 8b       	std	Y+17, r24	; 0x11
    30d8:	9a 8b       	std	Y+18, r25	; 0x12
    30da:	ab 8b       	std	Y+19, r26	; 0x13
    30dc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30de:	69 89       	ldd	r22, Y+17	; 0x11
    30e0:	7a 89       	ldd	r23, Y+18	; 0x12
    30e2:	8b 89       	ldd	r24, Y+19	; 0x13
    30e4:	9c 89       	ldd	r25, Y+20	; 0x14
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e8       	ldi	r20, 0x80	; 128
    30ec:	5f e3       	ldi	r21, 0x3F	; 63
    30ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f2:	88 23       	and	r24, r24
    30f4:	1c f4       	brge	.+6      	; 0x30fc <LCD_enum_Send_char+0x8a>
		__ticks = 1;
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	88 8b       	std	Y+16, r24	; 0x10
    30fa:	91 c0       	rjmp	.+290    	; 0x321e <LCD_enum_Send_char+0x1ac>
	else if (__tmp > 255)
    30fc:	69 89       	ldd	r22, Y+17	; 0x11
    30fe:	7a 89       	ldd	r23, Y+18	; 0x12
    3100:	8b 89       	ldd	r24, Y+19	; 0x13
    3102:	9c 89       	ldd	r25, Y+20	; 0x14
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4f e7       	ldi	r20, 0x7F	; 127
    310a:	53 e4       	ldi	r21, 0x43	; 67
    310c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3110:	18 16       	cp	r1, r24
    3112:	0c f0       	brlt	.+2      	; 0x3116 <LCD_enum_Send_char+0xa4>
    3114:	7b c0       	rjmp	.+246    	; 0x320c <LCD_enum_Send_char+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3116:	6d 89       	ldd	r22, Y+21	; 0x15
    3118:	7e 89       	ldd	r23, Y+22	; 0x16
    311a:	8f 89       	ldd	r24, Y+23	; 0x17
    311c:	98 8d       	ldd	r25, Y+24	; 0x18
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	4a e7       	ldi	r20, 0x7A	; 122
    3124:	54 e4       	ldi	r21, 0x44	; 68
    3126:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	8c 87       	std	Y+12, r24	; 0x0c
    3130:	9d 87       	std	Y+13, r25	; 0x0d
    3132:	ae 87       	std	Y+14, r26	; 0x0e
    3134:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3136:	6c 85       	ldd	r22, Y+12	; 0x0c
    3138:	7d 85       	ldd	r23, Y+13	; 0x0d
    313a:	8e 85       	ldd	r24, Y+14	; 0x0e
    313c:	9f 85       	ldd	r25, Y+15	; 0x0f
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	4a e7       	ldi	r20, 0x7A	; 122
    3144:	53 e4       	ldi	r21, 0x43	; 67
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	88 87       	std	Y+8, r24	; 0x08
    3150:	99 87       	std	Y+9, r25	; 0x09
    3152:	aa 87       	std	Y+10, r26	; 0x0a
    3154:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3156:	68 85       	ldd	r22, Y+8	; 0x08
    3158:	79 85       	ldd	r23, Y+9	; 0x09
    315a:	8a 85       	ldd	r24, Y+10	; 0x0a
    315c:	9b 85       	ldd	r25, Y+11	; 0x0b
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e8       	ldi	r20, 0x80	; 128
    3164:	5f e3       	ldi	r21, 0x3F	; 63
    3166:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    316a:	88 23       	and	r24, r24
    316c:	2c f4       	brge	.+10     	; 0x3178 <LCD_enum_Send_char+0x106>
		__ticks = 1;
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	9f 83       	std	Y+7, r25	; 0x07
    3174:	8e 83       	std	Y+6, r24	; 0x06
    3176:	3f c0       	rjmp	.+126    	; 0x31f6 <LCD_enum_Send_char+0x184>
	else if (__tmp > 65535)
    3178:	68 85       	ldd	r22, Y+8	; 0x08
    317a:	79 85       	ldd	r23, Y+9	; 0x09
    317c:	8a 85       	ldd	r24, Y+10	; 0x0a
    317e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	3f ef       	ldi	r19, 0xFF	; 255
    3184:	4f e7       	ldi	r20, 0x7F	; 127
    3186:	57 e4       	ldi	r21, 0x47	; 71
    3188:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318c:	18 16       	cp	r1, r24
    318e:	4c f5       	brge	.+82     	; 0x31e2 <LCD_enum_Send_char+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3190:	6c 85       	ldd	r22, Y+12	; 0x0c
    3192:	7d 85       	ldd	r23, Y+13	; 0x0d
    3194:	8e 85       	ldd	r24, Y+14	; 0x0e
    3196:	9f 85       	ldd	r25, Y+15	; 0x0f
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	40 e2       	ldi	r20, 0x20	; 32
    319e:	51 e4       	ldi	r21, 0x41	; 65
    31a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9f 83       	std	Y+7, r25	; 0x07
    31b6:	8e 83       	std	Y+6, r24	; 0x06
    31b8:	0f c0       	rjmp	.+30     	; 0x31d8 <LCD_enum_Send_char+0x166>
    31ba:	89 e1       	ldi	r24, 0x19	; 25
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	9d 83       	std	Y+5, r25	; 0x05
    31c0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31c2:	8c 81       	ldd	r24, Y+4	; 0x04
    31c4:	9d 81       	ldd	r25, Y+5	; 0x05
    31c6:	01 97       	sbiw	r24, 0x01	; 1
    31c8:	f1 f7       	brne	.-4      	; 0x31c6 <LCD_enum_Send_char+0x154>
    31ca:	9d 83       	std	Y+5, r25	; 0x05
    31cc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ce:	8e 81       	ldd	r24, Y+6	; 0x06
    31d0:	9f 81       	ldd	r25, Y+7	; 0x07
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	9f 83       	std	Y+7, r25	; 0x07
    31d6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d8:	8e 81       	ldd	r24, Y+6	; 0x06
    31da:	9f 81       	ldd	r25, Y+7	; 0x07
    31dc:	00 97       	sbiw	r24, 0x00	; 0
    31de:	69 f7       	brne	.-38     	; 0x31ba <LCD_enum_Send_char+0x148>
    31e0:	24 c0       	rjmp	.+72     	; 0x322a <LCD_enum_Send_char+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e2:	68 85       	ldd	r22, Y+8	; 0x08
    31e4:	79 85       	ldd	r23, Y+9	; 0x09
    31e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	9f 83       	std	Y+7, r25	; 0x07
    31f4:	8e 83       	std	Y+6, r24	; 0x06
    31f6:	8e 81       	ldd	r24, Y+6	; 0x06
    31f8:	9f 81       	ldd	r25, Y+7	; 0x07
    31fa:	9b 83       	std	Y+3, r25	; 0x03
    31fc:	8a 83       	std	Y+2, r24	; 0x02
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	9b 81       	ldd	r25, Y+3	; 0x03
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <LCD_enum_Send_char+0x190>
    3206:	9b 83       	std	Y+3, r25	; 0x03
    3208:	8a 83       	std	Y+2, r24	; 0x02
    320a:	0f c0       	rjmp	.+30     	; 0x322a <LCD_enum_Send_char+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    320c:	69 89       	ldd	r22, Y+17	; 0x11
    320e:	7a 89       	ldd	r23, Y+18	; 0x12
    3210:	8b 89       	ldd	r24, Y+19	; 0x13
    3212:	9c 89       	ldd	r25, Y+20	; 0x14
    3214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	88 8b       	std	Y+16, r24	; 0x10
    321e:	88 89       	ldd	r24, Y+16	; 0x10
    3220:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	8a 95       	dec	r24
    3226:	f1 f7       	brne	.-4      	; 0x3224 <LCD_enum_Send_char+0x1b2>
    3228:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(1);

	//E = 0
	 DIO_u8_Set_Pin_Value ( LCD_u8_CONTROL_PORT,  LCD_u8_E_PIN,  DIO_u8_LOW );
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	62 e0       	ldi	r22, 0x02	; 2
    322e:	40 e0       	ldi	r20, 0x00	; 0
    3230:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8_Set_Pin_Value>
	    return ES_OK;
    3234:	80 e0       	ldi	r24, 0x00	; 0

}
    3236:	69 96       	adiw	r28, 0x19	; 25
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <LCD_enum_GO_TO_XY>:
//function to set a location
ES_t LCD_enum_GO_TO_XY (u8 Copy_u8_line_Num , u8 Copy_u8_Location ){
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	00 d0       	rcall	.+0      	; 0x324e <LCD_enum_GO_TO_XY+0x6>
    324e:	00 d0       	rcall	.+0      	; 0x3250 <LCD_enum_GO_TO_XY+0x8>
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	89 83       	std	Y+1, r24	; 0x01
    3258:	6a 83       	std	Y+2, r22	; 0x02
//	u8 Local_u8_Erorr_State = ES_OK;
	if(Copy_u8_Location <= 39 ){
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	88 32       	cpi	r24, 0x28	; 40
    325e:	f8 f4       	brcc	.+62     	; 0x329e <LCD_enum_GO_TO_XY+0x56>
		switch (Copy_u8_line_Num)
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	3d 83       	std	Y+5, r19	; 0x05
    3268:	2c 83       	std	Y+4, r18	; 0x04
    326a:	8c 81       	ldd	r24, Y+4	; 0x04
    326c:	9d 81       	ldd	r25, Y+5	; 0x05
    326e:	81 30       	cpi	r24, 0x01	; 1
    3270:	91 05       	cpc	r25, r1
    3272:	31 f0       	breq	.+12     	; 0x3280 <LCD_enum_GO_TO_XY+0x38>
    3274:	2c 81       	ldd	r18, Y+4	; 0x04
    3276:	3d 81       	ldd	r19, Y+5	; 0x05
    3278:	22 30       	cpi	r18, 0x02	; 2
    327a:	31 05       	cpc	r19, r1
    327c:	31 f0       	breq	.+12     	; 0x328a <LCD_enum_GO_TO_XY+0x42>
    327e:	0a c0       	rjmp	.+20     	; 0x3294 <LCD_enum_GO_TO_XY+0x4c>
		{
		case LCD_u8_LINE1 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE1+Copy_u8_Location);break;
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	80 58       	subi	r24, 0x80	; 128
    3284:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <LCD_enum_Send_Comnd>
    3288:	08 c0       	rjmp	.+16     	; 0x329a <LCD_enum_GO_TO_XY+0x52>
		case LCD_u8_LINE2 : LCD_enum_Send_Comnd(ADDRESS_OF_LINE2+Copy_u8_Location);break;
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	80 54       	subi	r24, 0x40	; 64
    328e:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <LCD_enum_Send_Comnd>
    3292:	03 c0       	rjmp	.+6      	; 0x329a <LCD_enum_GO_TO_XY+0x52>
        default   :  return ES_NOK;
    3294:	31 e0       	ldi	r19, 0x01	; 1
    3296:	3b 83       	std	Y+3, r19	; 0x03
    3298:	04 c0       	rjmp	.+8      	; 0x32a2 <LCD_enum_GO_TO_XY+0x5a>
		else {
			return ES_NOK;


	}
    return ES_OK;
    329a:	1b 82       	std	Y+3, r1	; 0x03
    329c:	02 c0       	rjmp	.+4      	; 0x32a2 <LCD_enum_GO_TO_XY+0x5a>

		}

	}
		else {
			return ES_NOK;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	8b 83       	std	Y+3, r24	; 0x03
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03


	}
    return ES_OK;
}
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	0f 90       	pop	r0
    32ac:	0f 90       	pop	r0
    32ae:	cf 91       	pop	r28
    32b0:	df 91       	pop	r29
    32b2:	08 95       	ret

000032b4 <LCD_enum_Send_String>:
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
    32b4:	df 93       	push	r29
    32b6:	cf 93       	push	r28
    32b8:	00 d0       	rcall	.+0      	; 0x32ba <LCD_enum_Send_String+0x6>
    32ba:	0f 92       	push	r0
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
    32c0:	9b 83       	std	Y+3, r25	; 0x03
    32c2:	8a 83       	std	Y+2, r24	; 0x02
    32c4:	0e c0       	rjmp	.+28     	; 0x32e2 <LCD_enum_Send_String+0x2e>
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
		LCD_enum_Send_char(copy_pu8_string[i]);
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	28 2f       	mov	r18, r24
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	8a 81       	ldd	r24, Y+2	; 0x02
    32ce:	9b 81       	ldd	r25, Y+3	; 0x03
    32d0:	fc 01       	movw	r30, r24
    32d2:	e2 0f       	add	r30, r18
    32d4:	f3 1f       	adc	r31, r19
    32d6:	80 81       	ld	r24, Z
    32d8:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_enum_Send_char>
	}
    return ES_OK;
}
//function to send string
ES_t LCD_enum_Send_String(u8 *copy_pu8_string){
	for (u8 i ; copy_pu8_string[i] != '\0'; i++){
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	8f 5f       	subi	r24, 0xFF	; 255
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	28 2f       	mov	r18, r24
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	fc 01       	movw	r30, r24
    32ee:	e2 0f       	add	r30, r18
    32f0:	f3 1f       	adc	r31, r19
    32f2:	80 81       	ld	r24, Z
    32f4:	88 23       	and	r24, r24
    32f6:	39 f7       	brne	.-50     	; 0x32c6 <LCD_enum_Send_String+0x12>
		LCD_enum_Send_char(copy_pu8_string[i]);
	}
	return ES_OK;
    32f8:	80 e0       	ldi	r24, 0x00	; 0
}
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	cf 91       	pop	r28
    3302:	df 91       	pop	r29
    3304:	08 95       	ret

00003306 <LCD_enum_Clear>:

//function to clear
ES_t LCD_enum_Clear (void){
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	2e 97       	sbiw	r28, 0x0e	; 14
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
	LCD_enum_Send_Comnd(DISPLAY_CLEAR);
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <LCD_enum_Send_Comnd>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	a0 e8       	ldi	r26, 0x80	; 128
    3326:	bf e3       	ldi	r27, 0x3F	; 63
    3328:	8b 87       	std	Y+11, r24	; 0x0b
    332a:	9c 87       	std	Y+12, r25	; 0x0c
    332c:	ad 87       	std	Y+13, r26	; 0x0d
    332e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3330:	6b 85       	ldd	r22, Y+11	; 0x0b
    3332:	7c 85       	ldd	r23, Y+12	; 0x0c
    3334:	8d 85       	ldd	r24, Y+13	; 0x0d
    3336:	9e 85       	ldd	r25, Y+14	; 0x0e
    3338:	20 e0       	ldi	r18, 0x00	; 0
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	4a e7       	ldi	r20, 0x7A	; 122
    333e:	53 e4       	ldi	r21, 0x43	; 67
    3340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	8f 83       	std	Y+7, r24	; 0x07
    334a:	98 87       	std	Y+8, r25	; 0x08
    334c:	a9 87       	std	Y+9, r26	; 0x09
    334e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3350:	6f 81       	ldd	r22, Y+7	; 0x07
    3352:	78 85       	ldd	r23, Y+8	; 0x08
    3354:	89 85       	ldd	r24, Y+9	; 0x09
    3356:	9a 85       	ldd	r25, Y+10	; 0x0a
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	40 e8       	ldi	r20, 0x80	; 128
    335e:	5f e3       	ldi	r21, 0x3F	; 63
    3360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3364:	88 23       	and	r24, r24
    3366:	2c f4       	brge	.+10     	; 0x3372 <LCD_enum_Clear+0x6c>
		__ticks = 1;
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	8d 83       	std	Y+5, r24	; 0x05
    3370:	3f c0       	rjmp	.+126    	; 0x33f0 <LCD_enum_Clear+0xea>
	else if (__tmp > 65535)
    3372:	6f 81       	ldd	r22, Y+7	; 0x07
    3374:	78 85       	ldd	r23, Y+8	; 0x08
    3376:	89 85       	ldd	r24, Y+9	; 0x09
    3378:	9a 85       	ldd	r25, Y+10	; 0x0a
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	3f ef       	ldi	r19, 0xFF	; 255
    337e:	4f e7       	ldi	r20, 0x7F	; 127
    3380:	57 e4       	ldi	r21, 0x47	; 71
    3382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3386:	18 16       	cp	r1, r24
    3388:	4c f5       	brge	.+82     	; 0x33dc <LCD_enum_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338a:	6b 85       	ldd	r22, Y+11	; 0x0b
    338c:	7c 85       	ldd	r23, Y+12	; 0x0c
    338e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3390:	9e 85       	ldd	r25, Y+14	; 0x0e
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	40 e2       	ldi	r20, 0x20	; 32
    3398:	51 e4       	ldi	r21, 0x41	; 65
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	bc 01       	movw	r22, r24
    33a4:	cd 01       	movw	r24, r26
    33a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	9e 83       	std	Y+6, r25	; 0x06
    33b0:	8d 83       	std	Y+5, r24	; 0x05
    33b2:	0f c0       	rjmp	.+30     	; 0x33d2 <LCD_enum_Clear+0xcc>
    33b4:	89 e1       	ldi	r24, 0x19	; 25
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9c 83       	std	Y+4, r25	; 0x04
    33ba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	9c 81       	ldd	r25, Y+4	; 0x04
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <LCD_enum_Clear+0xba>
    33c4:	9c 83       	std	Y+4, r25	; 0x04
    33c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ca:	9e 81       	ldd	r25, Y+6	; 0x06
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	9e 83       	std	Y+6, r25	; 0x06
    33d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d2:	8d 81       	ldd	r24, Y+5	; 0x05
    33d4:	9e 81       	ldd	r25, Y+6	; 0x06
    33d6:	00 97       	sbiw	r24, 0x00	; 0
    33d8:	69 f7       	brne	.-38     	; 0x33b4 <LCD_enum_Clear+0xae>
    33da:	14 c0       	rjmp	.+40     	; 0x3404 <LCD_enum_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33dc:	6f 81       	ldd	r22, Y+7	; 0x07
    33de:	78 85       	ldd	r23, Y+8	; 0x08
    33e0:	89 85       	ldd	r24, Y+9	; 0x09
    33e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	9e 83       	std	Y+6, r25	; 0x06
    33ee:	8d 83       	std	Y+5, r24	; 0x05
    33f0:	8d 81       	ldd	r24, Y+5	; 0x05
    33f2:	9e 81       	ldd	r25, Y+6	; 0x06
    33f4:	9a 83       	std	Y+2, r25	; 0x02
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	9a 81       	ldd	r25, Y+2	; 0x02
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <LCD_enum_Clear+0xf6>
    3400:	9a 83       	std	Y+2, r25	; 0x02
    3402:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	return ES_OK;
    3404:	80 e0       	ldi	r24, 0x00	; 0
}
    3406:	2e 96       	adiw	r28, 0x0e	; 14
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	cf 91       	pop	r28
    3414:	df 91       	pop	r29
    3416:	08 95       	ret

00003418 <LCD_enum_Send_Custom_char>:

//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
    3418:	df 93       	push	r29
    341a:	cf 93       	push	r28
    341c:	00 d0       	rcall	.+0      	; 0x341e <LCD_enum_Send_Custom_char+0x6>
    341e:	00 d0       	rcall	.+0      	; 0x3420 <LCD_enum_Send_Custom_char+0x8>
    3420:	0f 92       	push	r0
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	8a 83       	std	Y+2, r24	; 0x02
    3428:	7c 83       	std	Y+4, r23	; 0x04
    342a:	6b 83       	std	Y+3, r22	; 0x03
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	9c 81       	ldd	r25, Y+4	; 0x04
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	41 f1       	breq	.+80     	; 0x3484 <LCD_enum_Send_Custom_char+0x6c>
    3434:	8a 81       	ldd	r24, Y+2	; 0x02
    3436:	88 30       	cpi	r24, 0x08	; 8
    3438:	28 f5       	brcc	.+74     	; 0x3484 <LCD_enum_Send_Custom_char+0x6c>
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
    343a:	8a 81       	ldd	r24, Y+2	; 0x02
    343c:	88 2f       	mov	r24, r24
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	08 96       	adiw	r24, 0x08	; 8
    3442:	88 0f       	add	r24, r24
    3444:	99 1f       	adc	r25, r25
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <LCD_enum_Send_Comnd>
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    3452:	19 82       	std	Y+1, r1	; 0x01
    3454:	0e c0       	rjmp	.+28     	; 0x3472 <LCD_enum_Send_Custom_char+0x5a>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	28 2f       	mov	r18, r24
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	fc 01       	movw	r30, r24
    3462:	e2 0f       	add	r30, r18
    3464:	f3 1f       	adc	r31, r19
    3466:	80 81       	ld	r24, Z
    3468:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_enum_Send_char>
//function to send custom char
ES_t LCD_enum_Send_Custom_char(u8 Copy_u8_Location , u8 * Copy_pu8_char_Array){
	if(Copy_pu8_char_Array != NULL && Copy_u8_Location < MAX_CHARACTERS )
	    {
		LCD_enum_Send_Comnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS ));
	        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS ; Local_u8_Counter++)
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	8f 5f       	subi	r24, 0xFF	; 255
    3470:	89 83       	std	Y+1, r24	; 0x01
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	88 30       	cpi	r24, 0x08	; 8
    3476:	78 f3       	brcs	.-34     	; 0x3456 <LCD_enum_Send_Custom_char+0x3e>
	        {
	        	LCD_enum_Send_char(Copy_pu8_char_Array[Local_u8_Counter]);
	        }
	        LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
//	        LCD_enum_Send_char(Copy_u8_Location);
	        return ES_OK;
    3480:	1d 82       	std	Y+5, r1	; 0x05
    3482:	02 c0       	rjmp	.+4      	; 0x3488 <LCD_enum_Send_Custom_char+0x70>

	    }
	    else
	    {
	        return ES_NOK;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	8d 83       	std	Y+5, r24	; 0x05
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
	    }

}
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	08 95       	ret

0000349a <LCD_enum_Send_Num>:
ES_t LCD_enum_Send_Num(u32 Copy_LCD_u32_Num)
{
    349a:	0f 93       	push	r16
    349c:	1f 93       	push	r17
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
    34a6:	60 97       	sbiw	r28, 0x10	; 16
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	6d 87       	std	Y+13, r22	; 0x0d
    34b4:	7e 87       	std	Y+14, r23	; 0x0e
    34b6:	8f 87       	std	Y+15, r24	; 0x0f
    34b8:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[10], i = 0, j = 0;
    34ba:	1a 82       	std	Y+2, r1	; 0x02
    34bc:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_LCD_u32_Num == 0)
    34be:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34c2:	af 85       	ldd	r26, Y+15	; 0x0f
    34c4:	b8 89       	ldd	r27, Y+16	; 0x10
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	a1 05       	cpc	r26, r1
    34ca:	b1 05       	cpc	r27, r1
    34cc:	91 f5       	brne	.+100    	; 0x3532 <LCD_enum_Send_Num+0x98>
	{
		LCD_enum_Send_char('0');
    34ce:	80 e3       	ldi	r24, 0x30	; 48
    34d0:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_enum_Send_char>
    34d4:	4d c0       	rjmp	.+154    	; 0x3570 <LCD_enum_Send_Num+0xd6>
	}
	else
	{
		while (Copy_LCD_u32_Num)
		{
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
    34d6:	8a 81       	ldd	r24, Y+2	; 0x02
    34d8:	08 2f       	mov	r16, r24
    34da:	10 e0       	ldi	r17, 0x00	; 0
    34dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34de:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e0:	af 85       	ldd	r26, Y+15	; 0x0f
    34e2:	b8 89       	ldd	r27, Y+16	; 0x10
    34e4:	2a e0       	ldi	r18, 0x0A	; 10
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 e0       	ldi	r20, 0x00	; 0
    34ea:	50 e0       	ldi	r21, 0x00	; 0
    34ec:	bc 01       	movw	r22, r24
    34ee:	cd 01       	movw	r24, r26
    34f0:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__udivmodsi4>
    34f4:	dc 01       	movw	r26, r24
    34f6:	cb 01       	movw	r24, r22
    34f8:	28 2f       	mov	r18, r24
    34fa:	20 5d       	subi	r18, 0xD0	; 208
    34fc:	ce 01       	movw	r24, r28
    34fe:	03 96       	adiw	r24, 0x03	; 3
    3500:	fc 01       	movw	r30, r24
    3502:	e0 0f       	add	r30, r16
    3504:	f1 1f       	adc	r31, r17
    3506:	20 83       	st	Z, r18
			Copy_LCD_u32_Num /= 10;
    3508:	8d 85       	ldd	r24, Y+13	; 0x0d
    350a:	9e 85       	ldd	r25, Y+14	; 0x0e
    350c:	af 85       	ldd	r26, Y+15	; 0x0f
    350e:	b8 89       	ldd	r27, Y+16	; 0x10
    3510:	2a e0       	ldi	r18, 0x0A	; 10
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e0       	ldi	r20, 0x00	; 0
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	bc 01       	movw	r22, r24
    351a:	cd 01       	movw	r24, r26
    351c:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__udivmodsi4>
    3520:	da 01       	movw	r26, r20
    3522:	c9 01       	movw	r24, r18
    3524:	8d 87       	std	Y+13, r24	; 0x0d
    3526:	9e 87       	std	Y+14, r25	; 0x0e
    3528:	af 87       	std	Y+15, r26	; 0x0f
    352a:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    352c:	8a 81       	ldd	r24, Y+2	; 0x02
    352e:	8f 5f       	subi	r24, 0xFF	; 255
    3530:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_enum_Send_char('0');
	}
	else
	{
		while (Copy_LCD_u32_Num)
    3532:	8d 85       	ldd	r24, Y+13	; 0x0d
    3534:	9e 85       	ldd	r25, Y+14	; 0x0e
    3536:	af 85       	ldd	r26, Y+15	; 0x0f
    3538:	b8 89       	ldd	r27, Y+16	; 0x10
    353a:	00 97       	sbiw	r24, 0x00	; 0
    353c:	a1 05       	cpc	r26, r1
    353e:	b1 05       	cpc	r27, r1
    3540:	51 f6       	brne	.-108    	; 0x34d6 <LCD_enum_Send_Num+0x3c>
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
			Copy_LCD_u32_Num /= 10;
			i++;
		}

		for (j = i; j > 0; j--)
    3542:	8a 81       	ldd	r24, Y+2	; 0x02
    3544:	89 83       	std	Y+1, r24	; 0x01
    3546:	11 c0       	rjmp	.+34     	; 0x356a <LCD_enum_Send_Num+0xd0>
		{
			LCD_enum_Send_char(arr[j - 1]);
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	88 2f       	mov	r24, r24
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	9c 01       	movw	r18, r24
    3550:	21 50       	subi	r18, 0x01	; 1
    3552:	30 40       	sbci	r19, 0x00	; 0
    3554:	ce 01       	movw	r24, r28
    3556:	03 96       	adiw	r24, 0x03	; 3
    3558:	fc 01       	movw	r30, r24
    355a:	e2 0f       	add	r30, r18
    355c:	f3 1f       	adc	r31, r19
    355e:	80 81       	ld	r24, Z
    3560:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_enum_Send_char>
			arr[i] = Copy_LCD_u32_Num % 10 + '0';
			Copy_LCD_u32_Num /= 10;
			i++;
		}

		for (j = i; j > 0; j--)
    3564:	89 81       	ldd	r24, Y+1	; 0x01
    3566:	81 50       	subi	r24, 0x01	; 1
    3568:	89 83       	std	Y+1, r24	; 0x01
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	88 23       	and	r24, r24
    356e:	61 f7       	brne	.-40     	; 0x3548 <LCD_enum_Send_Num+0xae>
		{
			LCD_enum_Send_char(arr[j - 1]);
		}
	}
    return ES_NOK;
    3570:	81 e0       	ldi	r24, 0x01	; 1
}
    3572:	60 96       	adiw	r28, 0x10	; 16
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	f8 94       	cli
    3578:	de bf       	out	0x3e, r29	; 62
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	cf 91       	pop	r28
    3580:	df 91       	pop	r29
    3582:	1f 91       	pop	r17
    3584:	0f 91       	pop	r16
    3586:	08 95       	ret

00003588 <main>:

#include "main.h"
/**************************************************************************************************/
int main(void){
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	c6 54       	subi	r28, 0x46	; 70
    3592:	d0 40       	sbci	r29, 0x00	; 0
    3594:	0f b6       	in	r0, 0x3f	; 63
    3596:	f8 94       	cli
    3598:	de bf       	out	0x3e, r29	; 62
    359a:	0f be       	out	0x3f, r0	; 63
    359c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_Key,Local_u8_Counter=0;
    359e:	1b ae       	std	Y+59, r1	; 0x3b
	u8 spass[]=pass;
    35a0:	ce 01       	movw	r24, r28
    35a2:	cd 96       	adiw	r24, 0x3d	; 61
    35a4:	24 96       	adiw	r28, 0x04	; 4
    35a6:	9f af       	std	Y+63, r25	; 0x3f
    35a8:	8e af       	std	Y+62, r24	; 0x3e
    35aa:	24 97       	sbiw	r28, 0x04	; 4
    35ac:	ee eb       	ldi	r30, 0xBE	; 190
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	26 96       	adiw	r28, 0x06	; 6
    35b2:	ff af       	std	Y+63, r31	; 0x3f
    35b4:	ee af       	std	Y+62, r30	; 0x3e
    35b6:	26 97       	sbiw	r28, 0x06	; 6
    35b8:	f5 e0       	ldi	r31, 0x05	; 5
    35ba:	27 96       	adiw	r28, 0x07	; 7
    35bc:	ff af       	std	Y+63, r31	; 0x3f
    35be:	27 97       	sbiw	r28, 0x07	; 7
    35c0:	26 96       	adiw	r28, 0x06	; 6
    35c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    35c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    35c6:	26 97       	sbiw	r28, 0x06	; 6
    35c8:	00 80       	ld	r0, Z
    35ca:	26 96       	adiw	r28, 0x06	; 6
    35cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    35ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    35d0:	26 97       	sbiw	r28, 0x06	; 6
    35d2:	01 96       	adiw	r24, 0x01	; 1
    35d4:	26 96       	adiw	r28, 0x06	; 6
    35d6:	9f af       	std	Y+63, r25	; 0x3f
    35d8:	8e af       	std	Y+62, r24	; 0x3e
    35da:	26 97       	sbiw	r28, 0x06	; 6
    35dc:	24 96       	adiw	r28, 0x04	; 4
    35de:	ee ad       	ldd	r30, Y+62	; 0x3e
    35e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    35e2:	24 97       	sbiw	r28, 0x04	; 4
    35e4:	00 82       	st	Z, r0
    35e6:	24 96       	adiw	r28, 0x04	; 4
    35e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    35ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    35ec:	24 97       	sbiw	r28, 0x04	; 4
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	24 96       	adiw	r28, 0x04	; 4
    35f2:	9f af       	std	Y+63, r25	; 0x3f
    35f4:	8e af       	std	Y+62, r24	; 0x3e
    35f6:	24 97       	sbiw	r28, 0x04	; 4
    35f8:	27 96       	adiw	r28, 0x07	; 7
    35fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    35fc:	27 97       	sbiw	r28, 0x07	; 7
    35fe:	91 50       	subi	r25, 0x01	; 1
    3600:	27 96       	adiw	r28, 0x07	; 7
    3602:	9f af       	std	Y+63, r25	; 0x3f
    3604:	27 97       	sbiw	r28, 0x07	; 7
    3606:	27 96       	adiw	r28, 0x07	; 7
    3608:	ef ad       	ldd	r30, Y+63	; 0x3f
    360a:	27 97       	sbiw	r28, 0x07	; 7
    360c:	ee 23       	and	r30, r30
    360e:	c1 f6       	brne	.-80     	; 0x35c0 <main+0x38>
	u8 Local_u8_index_input ;
u8 try_check=0;
    3610:	19 ae       	std	Y+57, r1	; 0x39

	            DIO_voidInit();
    3612:	0e 94 5f 08 	call	0x10be	; 0x10be <DIO_voidInit>
				LCD_enum_INIT();
    3616:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_enum_INIT>
				KPD_enum_Init();
    361a:	0e 94 a7 13 	call	0x274e	; 0x274e <KPD_enum_Init>
				DC_MOTOR_enum_INIT();
    361e:	0e 94 41 13 	call	0x2682	; 0x2682 <DC_MOTOR_enum_INIT>
				LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	60 e0       	ldi	r22, 0x00	; 0
    3626:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
								LCD_enum_Send_String("Enter Password");
    362a:	80 e6       	ldi	r24, 0x60	; 96
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	aa e7       	ldi	r26, 0x7A	; 122
    3638:	b4 e4       	ldi	r27, 0x44	; 68
    363a:	8d ab       	std	Y+53, r24	; 0x35
    363c:	9e ab       	std	Y+54, r25	; 0x36
    363e:	af ab       	std	Y+55, r26	; 0x37
    3640:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3642:	6d a9       	ldd	r22, Y+53	; 0x35
    3644:	7e a9       	ldd	r23, Y+54	; 0x36
    3646:	8f a9       	ldd	r24, Y+55	; 0x37
    3648:	98 ad       	ldd	r25, Y+56	; 0x38
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	4a e7       	ldi	r20, 0x7A	; 122
    3650:	53 e4       	ldi	r21, 0x43	; 67
    3652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	89 ab       	std	Y+49, r24	; 0x31
    365c:	9a ab       	std	Y+50, r25	; 0x32
    365e:	ab ab       	std	Y+51, r26	; 0x33
    3660:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3662:	69 a9       	ldd	r22, Y+49	; 0x31
    3664:	7a a9       	ldd	r23, Y+50	; 0x32
    3666:	8b a9       	ldd	r24, Y+51	; 0x33
    3668:	9c a9       	ldd	r25, Y+52	; 0x34
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	40 e8       	ldi	r20, 0x80	; 128
    3670:	5f e3       	ldi	r21, 0x3F	; 63
    3672:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3676:	88 23       	and	r24, r24
    3678:	2c f4       	brge	.+10     	; 0x3684 <main+0xfc>
		__ticks = 1;
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	98 ab       	std	Y+48, r25	; 0x30
    3680:	8f a7       	std	Y+47, r24	; 0x2f
    3682:	3f c0       	rjmp	.+126    	; 0x3702 <main+0x17a>
	else if (__tmp > 65535)
    3684:	69 a9       	ldd	r22, Y+49	; 0x31
    3686:	7a a9       	ldd	r23, Y+50	; 0x32
    3688:	8b a9       	ldd	r24, Y+51	; 0x33
    368a:	9c a9       	ldd	r25, Y+52	; 0x34
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	3f ef       	ldi	r19, 0xFF	; 255
    3690:	4f e7       	ldi	r20, 0x7F	; 127
    3692:	57 e4       	ldi	r21, 0x47	; 71
    3694:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3698:	18 16       	cp	r1, r24
    369a:	4c f5       	brge	.+82     	; 0x36ee <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369c:	6d a9       	ldd	r22, Y+53	; 0x35
    369e:	7e a9       	ldd	r23, Y+54	; 0x36
    36a0:	8f a9       	ldd	r24, Y+55	; 0x37
    36a2:	98 ad       	ldd	r25, Y+56	; 0x38
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	40 e2       	ldi	r20, 0x20	; 32
    36aa:	51 e4       	ldi	r21, 0x41	; 65
    36ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	bc 01       	movw	r22, r24
    36b6:	cd 01       	movw	r24, r26
    36b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36bc:	dc 01       	movw	r26, r24
    36be:	cb 01       	movw	r24, r22
    36c0:	98 ab       	std	Y+48, r25	; 0x30
    36c2:	8f a7       	std	Y+47, r24	; 0x2f
    36c4:	0f c0       	rjmp	.+30     	; 0x36e4 <main+0x15c>
    36c6:	89 e1       	ldi	r24, 0x19	; 25
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	9e a7       	std	Y+46, r25	; 0x2e
    36cc:	8d a7       	std	Y+45, r24	; 0x2d
    36ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    36d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	f1 f7       	brne	.-4      	; 0x36d2 <main+0x14a>
    36d6:	9e a7       	std	Y+46, r25	; 0x2e
    36d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36da:	8f a5       	ldd	r24, Y+47	; 0x2f
    36dc:	98 a9       	ldd	r25, Y+48	; 0x30
    36de:	01 97       	sbiw	r24, 0x01	; 1
    36e0:	98 ab       	std	Y+48, r25	; 0x30
    36e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36e6:	98 a9       	ldd	r25, Y+48	; 0x30
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	69 f7       	brne	.-38     	; 0x36c6 <main+0x13e>
    36ec:	14 c0       	rjmp	.+40     	; 0x3716 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ee:	69 a9       	ldd	r22, Y+49	; 0x31
    36f0:	7a a9       	ldd	r23, Y+50	; 0x32
    36f2:	8b a9       	ldd	r24, Y+51	; 0x33
    36f4:	9c a9       	ldd	r25, Y+52	; 0x34
    36f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	98 ab       	std	Y+48, r25	; 0x30
    3700:	8f a7       	std	Y+47, r24	; 0x2f
    3702:	8f a5       	ldd	r24, Y+47	; 0x2f
    3704:	98 a9       	ldd	r25, Y+48	; 0x30
    3706:	9c a7       	std	Y+44, r25	; 0x2c
    3708:	8b a7       	std	Y+43, r24	; 0x2b
    370a:	8b a5       	ldd	r24, Y+43	; 0x2b
    370c:	9c a5       	ldd	r25, Y+44	; 0x2c
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	f1 f7       	brne	.-4      	; 0x370e <main+0x186>
    3712:	9c a7       	std	Y+44, r25	; 0x2c
    3714:	8b a7       	std	Y+43, r24	; 0x2b
								_delay_ms(1000);
									LCD_enum_Clear ();
    3716:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>


	while(1){
       	KPD_enum_Get_Key_State(&Local_u8_Key);
    371a:	ce 01       	movw	r24, r28
    371c:	cc 96       	adiw	r24, 0x3c	; 60
    371e:	0e 94 02 14 	call	0x2804	; 0x2804 <KPD_enum_Get_Key_State>
/*is there is no keys pressed*/
	/*no displaying on LCD*/
	if(Local_u8_Key != KPD_u8_Keys_NO_Pressed  ){
    3722:	8c ad       	ldd	r24, Y+60	; 0x3c
    3724:	8f 3f       	cpi	r24, 0xFF	; 255
    3726:	89 f0       	breq	.+34     	; 0x374a <main+0x1c2>
         LCD_enum_Send_char('*');
    3728:	8a e2       	ldi	r24, 0x2A	; 42
    372a:	0e 94 39 18 	call	0x3072	; 0x3072 <LCD_enum_Send_char>

         Local_u8_input[Local_u8_index_input] = Local_u8_Key;
    372e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3730:	88 2f       	mov	r24, r24
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	2c ad       	ldd	r18, Y+60	; 0x3c
    3736:	fc 01       	movw	r30, r24
    3738:	eb 5b       	subi	r30, 0xBB	; 187
    373a:	fe 4f       	sbci	r31, 0xFE	; 254
    373c:	20 83       	st	Z, r18
         Local_u8_index_input++;
    373e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3740:	8f 5f       	subi	r24, 0xFF	; 255
    3742:	8a af       	std	Y+58, r24	; 0x3a
         Local_u8_Counter++;
    3744:	8b ad       	ldd	r24, Y+59	; 0x3b
    3746:	8f 5f       	subi	r24, 0xFF	; 255
    3748:	8b af       	std	Y+59, r24	; 0x3b
	}
    	 if (Local_u8_Counter == len) {
    374a:	8b ad       	ldd	r24, Y+59	; 0x3b
    374c:	84 30       	cpi	r24, 0x04	; 4
    374e:	29 f7       	brne	.-54     	; 0x371a <main+0x192>
    		 for(Local_u8_index_input =0 ;Local_u8_index_input<=len ; Local_u8_index_input++){
    3750:	1a ae       	std	Y+58, r1	; 0x3a
    3752:	9e c1       	rjmp	.+828    	; 0x3a90 <main+0x508>
    		 				if(Local_u8_input[Local_u8_index_input] == spass[Local_u8_index_input]){
    3754:	8a ad       	ldd	r24, Y+58	; 0x3a
    3756:	88 2f       	mov	r24, r24
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	fc 01       	movw	r30, r24
    375c:	eb 5b       	subi	r30, 0xBB	; 187
    375e:	fe 4f       	sbci	r31, 0xFE	; 254
    3760:	40 81       	ld	r20, Z
    3762:	8a ad       	ldd	r24, Y+58	; 0x3a
    3764:	28 2f       	mov	r18, r24
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	ce 01       	movw	r24, r28
    376a:	cd 96       	adiw	r24, 0x3d	; 61
    376c:	fc 01       	movw	r30, r24
    376e:	e2 0f       	add	r30, r18
    3770:	f3 1f       	adc	r31, r19
    3772:	80 81       	ld	r24, Z
    3774:	48 17       	cp	r20, r24
    3776:	09 f0       	breq	.+2      	; 0x377a <main+0x1f2>
    3778:	7f c0       	rjmp	.+254    	; 0x3878 <main+0x2f0>
    		 					LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
    		 					 LCD_enum_Send_String ("Correct Password");
    3782:	8f e6       	ldi	r24, 0x6F	; 111
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	aa e7       	ldi	r26, 0x7A	; 122
    3790:	b4 e4       	ldi	r27, 0x44	; 68
    3792:	8f a3       	std	Y+39, r24	; 0x27
    3794:	98 a7       	std	Y+40, r25	; 0x28
    3796:	a9 a7       	std	Y+41, r26	; 0x29
    3798:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    379a:	6f a1       	ldd	r22, Y+39	; 0x27
    379c:	78 a5       	ldd	r23, Y+40	; 0x28
    379e:	89 a5       	ldd	r24, Y+41	; 0x29
    37a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    37a2:	20 e0       	ldi	r18, 0x00	; 0
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	4a e7       	ldi	r20, 0x7A	; 122
    37a8:	53 e4       	ldi	r21, 0x43	; 67
    37aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	8b a3       	std	Y+35, r24	; 0x23
    37b4:	9c a3       	std	Y+36, r25	; 0x24
    37b6:	ad a3       	std	Y+37, r26	; 0x25
    37b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37ba:	6b a1       	ldd	r22, Y+35	; 0x23
    37bc:	7c a1       	ldd	r23, Y+36	; 0x24
    37be:	8d a1       	ldd	r24, Y+37	; 0x25
    37c0:	9e a1       	ldd	r25, Y+38	; 0x26
    37c2:	20 e0       	ldi	r18, 0x00	; 0
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	40 e8       	ldi	r20, 0x80	; 128
    37c8:	5f e3       	ldi	r21, 0x3F	; 63
    37ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ce:	88 23       	and	r24, r24
    37d0:	2c f4       	brge	.+10     	; 0x37dc <main+0x254>
		__ticks = 1;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	9a a3       	std	Y+34, r25	; 0x22
    37d8:	89 a3       	std	Y+33, r24	; 0x21
    37da:	3f c0       	rjmp	.+126    	; 0x385a <main+0x2d2>
	else if (__tmp > 65535)
    37dc:	6b a1       	ldd	r22, Y+35	; 0x23
    37de:	7c a1       	ldd	r23, Y+36	; 0x24
    37e0:	8d a1       	ldd	r24, Y+37	; 0x25
    37e2:	9e a1       	ldd	r25, Y+38	; 0x26
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	3f ef       	ldi	r19, 0xFF	; 255
    37e8:	4f e7       	ldi	r20, 0x7F	; 127
    37ea:	57 e4       	ldi	r21, 0x47	; 71
    37ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f0:	18 16       	cp	r1, r24
    37f2:	4c f5       	brge	.+82     	; 0x3846 <main+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f4:	6f a1       	ldd	r22, Y+39	; 0x27
    37f6:	78 a5       	ldd	r23, Y+40	; 0x28
    37f8:	89 a5       	ldd	r24, Y+41	; 0x29
    37fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 e2       	ldi	r20, 0x20	; 32
    3802:	51 e4       	ldi	r21, 0x41	; 65
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	bc 01       	movw	r22, r24
    380e:	cd 01       	movw	r24, r26
    3810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	9a a3       	std	Y+34, r25	; 0x22
    381a:	89 a3       	std	Y+33, r24	; 0x21
    381c:	0f c0       	rjmp	.+30     	; 0x383c <main+0x2b4>
    381e:	89 e1       	ldi	r24, 0x19	; 25
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	98 a3       	std	Y+32, r25	; 0x20
    3824:	8f 8f       	std	Y+31, r24	; 0x1f
    3826:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3828:	98 a1       	ldd	r25, Y+32	; 0x20
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	f1 f7       	brne	.-4      	; 0x382a <main+0x2a2>
    382e:	98 a3       	std	Y+32, r25	; 0x20
    3830:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3832:	89 a1       	ldd	r24, Y+33	; 0x21
    3834:	9a a1       	ldd	r25, Y+34	; 0x22
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	9a a3       	std	Y+34, r25	; 0x22
    383a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    383c:	89 a1       	ldd	r24, Y+33	; 0x21
    383e:	9a a1       	ldd	r25, Y+34	; 0x22
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	69 f7       	brne	.-38     	; 0x381e <main+0x296>
    3844:	14 c0       	rjmp	.+40     	; 0x386e <main+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3846:	6b a1       	ldd	r22, Y+35	; 0x23
    3848:	7c a1       	ldd	r23, Y+36	; 0x24
    384a:	8d a1       	ldd	r24, Y+37	; 0x25
    384c:	9e a1       	ldd	r25, Y+38	; 0x26
    384e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	9a a3       	std	Y+34, r25	; 0x22
    3858:	89 a3       	std	Y+33, r24	; 0x21
    385a:	89 a1       	ldd	r24, Y+33	; 0x21
    385c:	9a a1       	ldd	r25, Y+34	; 0x22
    385e:	9e 8f       	std	Y+30, r25	; 0x1e
    3860:	8d 8f       	std	Y+29, r24	; 0x1d
    3862:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3864:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <main+0x2de>
    386a:	9e 8f       	std	Y+30, r25	; 0x1e
    386c:	8d 8f       	std	Y+29, r24	; 0x1d
    		 					_delay_ms(1000);
    		 				 LCD_enum_Clear ();
    386e:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
    		 				motor_option();
    3872:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <motor_option>
    3876:	51 cf       	rjmp	.-350    	; 0x371a <main+0x192>
    		 				 break;
    		 				}
    		 				else{
    		 								LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	60 e0       	ldi	r22, 0x00	; 0
    387c:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
    		 				    			 LCD_enum_Send_String ("wrong Password,");
    3880:	80 e8       	ldi	r24, 0x80	; 128
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
    		 				    			 LCD_enum_GO_TO_XY(2,0);
    3888:	82 e0       	ldi	r24, 0x02	; 2
    388a:	60 e0       	ldi	r22, 0x00	; 0
    388c:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
    		 				    			LCD_enum_Send_String ("please try again");
    3890:	80 e9       	ldi	r24, 0x90	; 144
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	aa e7       	ldi	r26, 0x7A	; 122
    389e:	b4 e4       	ldi	r27, 0x44	; 68
    38a0:	89 8f       	std	Y+25, r24	; 0x19
    38a2:	9a 8f       	std	Y+26, r25	; 0x1a
    38a4:	ab 8f       	std	Y+27, r26	; 0x1b
    38a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a8:	69 8d       	ldd	r22, Y+25	; 0x19
    38aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	4a e7       	ldi	r20, 0x7A	; 122
    38b6:	53 e4       	ldi	r21, 0x43	; 67
    38b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	8d 8b       	std	Y+21, r24	; 0x15
    38c2:	9e 8b       	std	Y+22, r25	; 0x16
    38c4:	af 8b       	std	Y+23, r26	; 0x17
    38c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38c8:	6d 89       	ldd	r22, Y+21	; 0x15
    38ca:	7e 89       	ldd	r23, Y+22	; 0x16
    38cc:	8f 89       	ldd	r24, Y+23	; 0x17
    38ce:	98 8d       	ldd	r25, Y+24	; 0x18
    38d0:	20 e0       	ldi	r18, 0x00	; 0
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	40 e8       	ldi	r20, 0x80	; 128
    38d6:	5f e3       	ldi	r21, 0x3F	; 63
    38d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38dc:	88 23       	and	r24, r24
    38de:	2c f4       	brge	.+10     	; 0x38ea <main+0x362>
		__ticks = 1;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	9c 8b       	std	Y+20, r25	; 0x14
    38e6:	8b 8b       	std	Y+19, r24	; 0x13
    38e8:	3f c0       	rjmp	.+126    	; 0x3968 <main+0x3e0>
	else if (__tmp > 65535)
    38ea:	6d 89       	ldd	r22, Y+21	; 0x15
    38ec:	7e 89       	ldd	r23, Y+22	; 0x16
    38ee:	8f 89       	ldd	r24, Y+23	; 0x17
    38f0:	98 8d       	ldd	r25, Y+24	; 0x18
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	3f ef       	ldi	r19, 0xFF	; 255
    38f6:	4f e7       	ldi	r20, 0x7F	; 127
    38f8:	57 e4       	ldi	r21, 0x47	; 71
    38fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38fe:	18 16       	cp	r1, r24
    3900:	4c f5       	brge	.+82     	; 0x3954 <main+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3902:	69 8d       	ldd	r22, Y+25	; 0x19
    3904:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3908:	9c 8d       	ldd	r25, Y+28	; 0x1c
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	40 e2       	ldi	r20, 0x20	; 32
    3910:	51 e4       	ldi	r21, 0x41	; 65
    3912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	bc 01       	movw	r22, r24
    391c:	cd 01       	movw	r24, r26
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9c 8b       	std	Y+20, r25	; 0x14
    3928:	8b 8b       	std	Y+19, r24	; 0x13
    392a:	0f c0       	rjmp	.+30     	; 0x394a <main+0x3c2>
    392c:	89 e1       	ldi	r24, 0x19	; 25
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	9a 8b       	std	Y+18, r25	; 0x12
    3932:	89 8b       	std	Y+17, r24	; 0x11
    3934:	89 89       	ldd	r24, Y+17	; 0x11
    3936:	9a 89       	ldd	r25, Y+18	; 0x12
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <main+0x3b0>
    393c:	9a 8b       	std	Y+18, r25	; 0x12
    393e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3940:	8b 89       	ldd	r24, Y+19	; 0x13
    3942:	9c 89       	ldd	r25, Y+20	; 0x14
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	9c 8b       	std	Y+20, r25	; 0x14
    3948:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394a:	8b 89       	ldd	r24, Y+19	; 0x13
    394c:	9c 89       	ldd	r25, Y+20	; 0x14
    394e:	00 97       	sbiw	r24, 0x00	; 0
    3950:	69 f7       	brne	.-38     	; 0x392c <main+0x3a4>
    3952:	14 c0       	rjmp	.+40     	; 0x397c <main+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3954:	6d 89       	ldd	r22, Y+21	; 0x15
    3956:	7e 89       	ldd	r23, Y+22	; 0x16
    3958:	8f 89       	ldd	r24, Y+23	; 0x17
    395a:	98 8d       	ldd	r25, Y+24	; 0x18
    395c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	9c 8b       	std	Y+20, r25	; 0x14
    3966:	8b 8b       	std	Y+19, r24	; 0x13
    3968:	8b 89       	ldd	r24, Y+19	; 0x13
    396a:	9c 89       	ldd	r25, Y+20	; 0x14
    396c:	98 8b       	std	Y+16, r25	; 0x10
    396e:	8f 87       	std	Y+15, r24	; 0x0f
    3970:	8f 85       	ldd	r24, Y+15	; 0x0f
    3972:	98 89       	ldd	r25, Y+16	; 0x10
    3974:	01 97       	sbiw	r24, 0x01	; 1
    3976:	f1 f7       	brne	.-4      	; 0x3974 <main+0x3ec>
    3978:	98 8b       	std	Y+16, r25	; 0x10
    397a:	8f 87       	std	Y+15, r24	; 0x0f
    		 				    			_delay_ms(1000);
    		 				    			LCD_enum_Clear ();
    397c:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
    		 				    			main();
    3980:	0e 94 c4 1a 	call	0x3588	; 0x3588 <main>
    		 				    			try_check++;
    3984:	89 ad       	ldd	r24, Y+57	; 0x39
    3986:	8f 5f       	subi	r24, 0xFF	; 255
    3988:	89 af       	std	Y+57, r24	; 0x39

    		 				    				     	 if(try_check==MAX_try_check){
    398a:	89 ad       	ldd	r24, Y+57	; 0x39
    398c:	83 30       	cpi	r24, 0x03	; 3
    398e:	09 f0       	breq	.+2      	; 0x3992 <main+0x40a>
    3990:	7c c0       	rjmp	.+248    	; 0x3a8a <main+0x502>
    		 				    				   		  LCD_enum_Clear ();
    3992:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
    		 		  	 	       		       			 LCD_enum_Send_String ("please try again after 1 min");
    3996:	81 ea       	ldi	r24, 0xA1	; 161
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e6       	ldi	r25, 0x60	; 96
    39a2:	aa e6       	ldi	r26, 0x6A	; 106
    39a4:	b7 e4       	ldi	r27, 0x47	; 71
    39a6:	8b 87       	std	Y+11, r24	; 0x0b
    39a8:	9c 87       	std	Y+12, r25	; 0x0c
    39aa:	ad 87       	std	Y+13, r26	; 0x0d
    39ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    39b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b6:	20 e0       	ldi	r18, 0x00	; 0
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	4a e7       	ldi	r20, 0x7A	; 122
    39bc:	53 e4       	ldi	r21, 0x43	; 67
    39be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	8f 83       	std	Y+7, r24	; 0x07
    39c8:	98 87       	std	Y+8, r25	; 0x08
    39ca:	a9 87       	std	Y+9, r26	; 0x09
    39cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39ce:	6f 81       	ldd	r22, Y+7	; 0x07
    39d0:	78 85       	ldd	r23, Y+8	; 0x08
    39d2:	89 85       	ldd	r24, Y+9	; 0x09
    39d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e8       	ldi	r20, 0x80	; 128
    39dc:	5f e3       	ldi	r21, 0x3F	; 63
    39de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e2:	88 23       	and	r24, r24
    39e4:	2c f4       	brge	.+10     	; 0x39f0 <main+0x468>
		__ticks = 1;
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	9e 83       	std	Y+6, r25	; 0x06
    39ec:	8d 83       	std	Y+5, r24	; 0x05
    39ee:	3f c0       	rjmp	.+126    	; 0x3a6e <main+0x4e6>
	else if (__tmp > 65535)
    39f0:	6f 81       	ldd	r22, Y+7	; 0x07
    39f2:	78 85       	ldd	r23, Y+8	; 0x08
    39f4:	89 85       	ldd	r24, Y+9	; 0x09
    39f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	3f ef       	ldi	r19, 0xFF	; 255
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	57 e4       	ldi	r21, 0x47	; 71
    3a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a04:	18 16       	cp	r1, r24
    3a06:	4c f5       	brge	.+82     	; 0x3a5a <main+0x4d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	40 e2       	ldi	r20, 0x20	; 32
    3a16:	51 e4       	ldi	r21, 0x41	; 65
    3a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	bc 01       	movw	r22, r24
    3a22:	cd 01       	movw	r24, r26
    3a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a28:	dc 01       	movw	r26, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
    3a30:	0f c0       	rjmp	.+30     	; 0x3a50 <main+0x4c8>
    3a32:	89 e1       	ldi	r24, 0x19	; 25
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	9c 83       	std	Y+4, r25	; 0x04
    3a38:	8b 83       	std	Y+3, r24	; 0x03
    3a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	f1 f7       	brne	.-4      	; 0x3a3e <main+0x4b6>
    3a42:	9c 83       	std	Y+4, r25	; 0x04
    3a44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a46:	8d 81       	ldd	r24, Y+5	; 0x05
    3a48:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	9e 83       	std	Y+6, r25	; 0x06
    3a4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a50:	8d 81       	ldd	r24, Y+5	; 0x05
    3a52:	9e 81       	ldd	r25, Y+6	; 0x06
    3a54:	00 97       	sbiw	r24, 0x00	; 0
    3a56:	69 f7       	brne	.-38     	; 0x3a32 <main+0x4aa>
    3a58:	14 c0       	rjmp	.+40     	; 0x3a82 <main+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5c:	78 85       	ldd	r23, Y+8	; 0x08
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
    3a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a70:	9e 81       	ldd	r25, Y+6	; 0x06
    3a72:	9a 83       	std	Y+2, r25	; 0x02
    3a74:	89 83       	std	Y+1, r24	; 0x01
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <main+0x4f2>
    3a7e:	9a 83       	std	Y+2, r25	; 0x02
    3a80:	89 83       	std	Y+1, r24	; 0x01
		    		     	 			      			 _delay_ms(60000);
    		 			   	 			      			LCD_enum_Clear ();
    3a82:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
    		 			   	 			      		try_check=0;
    3a86:	19 ae       	std	Y+57, r1	; 0x39
    3a88:	48 ce       	rjmp	.-880    	; 0x371a <main+0x192>
         Local_u8_input[Local_u8_index_input] = Local_u8_Key;
         Local_u8_index_input++;
         Local_u8_Counter++;
	}
    	 if (Local_u8_Counter == len) {
    		 for(Local_u8_index_input =0 ;Local_u8_index_input<=len ; Local_u8_index_input++){
    3a8a:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a8c:	8f 5f       	subi	r24, 0xFF	; 255
    3a8e:	8a af       	std	Y+58, r24	; 0x3a
    3a90:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a92:	85 30       	cpi	r24, 0x05	; 5
    3a94:	08 f4       	brcc	.+2      	; 0x3a98 <main+0x510>
    3a96:	5e ce       	rjmp	.-836    	; 0x3754 <main+0x1cc>
    3a98:	40 ce       	rjmp	.-896    	; 0x371a <main+0x192>

00003a9a <motor_option>:
    	 return 0;
    	 	}


/***************************************************************************************************/
void motor_option(){
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	0f 92       	push	r0
    3aa0:	cd b7       	in	r28, 0x3d	; 61
    3aa2:	de b7       	in	r29, 0x3e	; 62

u8 option;
                                        LCD_enum_Clear();
    3aa4:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
                                        LCD_enum_GO_TO_XY(LCD_u8_LINE1,0);
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	60 e0       	ldi	r22, 0x00	; 0
    3aac:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
    		                		    LCD_enum_Send_String ("1-DC ");
    3ab0:	83 ec       	ldi	r24, 0xC3	; 195
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
    		                		    LCD_enum_GO_TO_XY (2 , 0);
    3ab8:	82 e0       	ldi	r24, 0x02	; 2
    3aba:	60 e0       	ldi	r22, 0x00	; 0
    3abc:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
    		                		    LCD_enum_Send_String ("2-STEPPER ");
    3ac0:	89 ec       	ldi	r24, 0xC9	; 201
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
    		                		    LCD_enum_GO_TO_XY (1 , 6);
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	66 e0       	ldi	r22, 0x06	; 6
    3acc:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
    		                		     LCD_enum_Send_String ("3-SERVO ");
    3ad0:	84 ed       	ldi	r24, 0xD4	; 212
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
    		                		    while(1){
    		                		    	KPD_enum_Get_Key_State(&option);
    3ad8:	ce 01       	movw	r24, r28
    3ada:	01 96       	adiw	r24, 0x01	; 1
    3adc:	0e 94 02 14 	call	0x2804	; 0x2804 <KPD_enum_Get_Key_State>
    		                		    			if (option != KPD_u8_Keys_NO_Pressed) {
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	8f 3f       	cpi	r24, 0xFF	; 255
    3ae4:	c9 f3       	breq	.-14     	; 0x3ad8 <motor_option+0x3e>
    		                		    				if (option == '1') {
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	81 33       	cpi	r24, 0x31	; 49
    3aea:	29 f4       	brne	.+10     	; 0x3af6 <motor_option+0x5c>
    		                		    					LCD_enum_Clear ();
    3aec:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
    		                		    					DC_MOTOR_void_direction() ;
    3af0:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <DC_MOTOR_void_direction>
    3af4:	0f c0       	rjmp	.+30     	; 0x3b14 <motor_option+0x7a>
    		                		    					break;
    		                		    				} else if (option == '2') {
    3af6:	89 81       	ldd	r24, Y+1	; 0x01
    3af8:	82 33       	cpi	r24, 0x32	; 50
    3afa:	29 f4       	brne	.+10     	; 0x3b06 <motor_option+0x6c>
    		                		    					LCD_enum_Clear ();
    3afc:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
      		                		    					stepper_MOTOR_void_direction();
    3b00:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <stepper_MOTOR_void_direction>
    3b04:	07 c0       	rjmp	.+14     	; 0x3b14 <motor_option+0x7a>
    		                		    					break;
    		                		    				}
    		                		    				 else if (option == '3') {
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	83 33       	cpi	r24, 0x33	; 51
    3b0a:	31 f7       	brne	.-52     	; 0x3ad8 <motor_option+0x3e>
    		                    		    					LCD_enum_Clear ();
    3b0c:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
    		                    		    					choice_angle_servo();
    3b10:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <choice_angle_servo>
    		     	                		    					break;
    		                		    				    		                		    				}

    		                		    }
    		                		    }
}
    3b14:	0f 90       	pop	r0
    3b16:	cf 91       	pop	r28
    3b18:	df 91       	pop	r29
    3b1a:	08 95       	ret

00003b1c <stepper_MOTOR_void_direction>:
/****************************************************************************************************************/
void stepper_MOTOR_void_direction() {
    3b1c:	df 93       	push	r29
    3b1e:	cf 93       	push	r28
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
//	u8 stepper_direction;

	                                      LCD_enum_Clear ();
    3b24:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
	    		                		   	LCD_enum_GO_TO_XY (1 , 0);
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	60 e0       	ldi	r22, 0x00	; 0
    3b2c:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
	    		                	    LCD_enum_Send_String ("1-CW");
    3b30:	8d ed       	ldi	r24, 0xDD	; 221
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
	    		               	   		 LCD_enum_GO_TO_XY (1 , 5);
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	65 e0       	ldi	r22, 0x05	; 5
    3b3c:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
	    		                	   	    LCD_enum_Send_String ("2-CCW");
    3b40:	82 ee       	ldi	r24, 0xE2	; 226
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>
	    		                	   	 LCD_enum_GO_TO_XY (2 , 0);
    3b48:	82 e0       	ldi	r24, 0x02	; 2
    3b4a:	60 e0       	ldi	r22, 0x00	; 0
    3b4c:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
	    		                	   	 	LCD_enum_Send_String ("3-STOP");
    3b50:	88 ee       	ldi	r24, 0xE8	; 232
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

	while (1) {

		KPD_enum_Get_Key_State(&stepper_direction);
    3b58:	84 e4       	ldi	r24, 0x44	; 68
    3b5a:	91 e0       	ldi	r25, 0x01	; 1
    3b5c:	0e 94 02 14 	call	0x2804	; 0x2804 <KPD_enum_Get_Key_State>
		if (stepper_direction != KPD_u8_Keys_NO_Pressed) {
    3b60:	80 91 44 01 	lds	r24, 0x0144
    3b64:	8f 3f       	cpi	r24, 0xFF	; 255
    3b66:	c1 f3       	breq	.-16     	; 0x3b58 <stepper_MOTOR_void_direction+0x3c>
			if (stepper_direction == '1') {
    3b68:	80 91 44 01 	lds	r24, 0x0144
    3b6c:	81 33       	cpi	r24, 0x31	; 49
    3b6e:	51 f4       	brne	.+20     	; 0x3b84 <stepper_MOTOR_void_direction+0x68>
				LCD_enum_Clear ();
    3b70:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
				Stepper_motor_enum_INIT ();
    3b74:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Stepper_motor_enum_INIT>
				stepper_direction=CW;
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	80 93 44 01 	sts	0x0144, r24
				choice_angle_stepper();
    3b7e:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <choice_angle_stepper>
    3b82:	16 c0       	rjmp	.+44     	; 0x3bb0 <stepper_MOTOR_void_direction+0x94>

				break;
			} else if (stepper_direction == '2') {
    3b84:	80 91 44 01 	lds	r24, 0x0144
    3b88:	82 33       	cpi	r24, 0x32	; 50
    3b8a:	51 f4       	brne	.+20     	; 0x3ba0 <stepper_MOTOR_void_direction+0x84>
				LCD_enum_Clear ();
    3b8c:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
				Stepper_motor_enum_INIT ();
    3b90:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Stepper_motor_enum_INIT>
				stepper_direction=CCW;
    3b94:	82 e0       	ldi	r24, 0x02	; 2
    3b96:	80 93 44 01 	sts	0x0144, r24
				choice_angle_stepper();
    3b9a:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <choice_angle_stepper>
    3b9e:	08 c0       	rjmp	.+16     	; 0x3bb0 <stepper_MOTOR_void_direction+0x94>

				break;
			}
			else if (stepper_direction == '3') {
    3ba0:	80 91 44 01 	lds	r24, 0x0144
    3ba4:	83 33       	cpi	r24, 0x33	; 51
    3ba6:	c1 f6       	brne	.-80     	; 0x3b58 <stepper_MOTOR_void_direction+0x3c>
							LCD_enum_Clear ();
    3ba8:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
							Stepper_motor_enum_STOP ();
    3bac:	0e 94 22 13 	call	0x2644	; 0x2644 <Stepper_motor_enum_STOP>
							break;
						}

		}
	}
}
    3bb0:	cf 91       	pop	r28
    3bb2:	df 91       	pop	r29
    3bb4:	08 95       	ret

00003bb6 <DC_MOTOR_void_direction>:
/*****************************************************************************************************/
void DC_MOTOR_void_direction(void)
{
    3bb6:	df 93       	push	r29
    3bb8:	cf 93       	push	r28
    3bba:	0f 92       	push	r0
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR_enum_INIT();
    3bc0:	0e 94 41 13 	call	0x2682	; 0x2682 <DC_MOTOR_enum_INIT>
	u8 direction;
	LCD_enum_Clear();
    3bc4:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
	LCD_enum_GO_TO_XY(LCD_u8_LINE1, 0);
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	60 e0       	ldi	r22, 0x00	; 0
    3bcc:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String("1-CW");
    3bd0:	8d ed       	ldi	r24, 0xDD	; 221
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

	LCD_enum_GO_TO_XY(LCD_u8_LINE1, 5);
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	65 e0       	ldi	r22, 0x05	; 5
    3bdc:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String("2-CCW");
    3be0:	82 ee       	ldi	r24, 0xE2	; 226
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

	LCD_enum_GO_TO_XY (2 , 0);
    3be8:	82 e0       	ldi	r24, 0x02	; 2
    3bea:	60 e0       	ldi	r22, 0x00	; 0
    3bec:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
	LCD_enum_Send_String ("3-STOP");
    3bf0:	88 ee       	ldi	r24, 0xE8	; 232
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

	while (1) {
		KPD_enum_Get_Key_State(&direction);
    3bf8:	ce 01       	movw	r24, r28
    3bfa:	01 96       	adiw	r24, 0x01	; 1
    3bfc:	0e 94 02 14 	call	0x2804	; 0x2804 <KPD_enum_Get_Key_State>
		if (direction != KPD_u8_Keys_NO_Pressed) {
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	8f 3f       	cpi	r24, 0xFF	; 255
    3c04:	c9 f3       	breq	.-14     	; 0x3bf8 <DC_MOTOR_void_direction+0x42>
			if (direction == '1') {
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	81 33       	cpi	r24, 0x31	; 49
    3c0a:	31 f4       	brne	.+12     	; 0x3c18 <DC_MOTOR_void_direction+0x62>
				LCD_enum_Clear ();
    3c0c:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
				DC_MOTOR_enum_Start(CW);
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <DC_MOTOR_enum_Start>
    3c16:	10 c0       	rjmp	.+32     	; 0x3c38 <DC_MOTOR_void_direction+0x82>
				break;
			} else if (direction == '2') {
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	82 33       	cpi	r24, 0x32	; 50
    3c1c:	31 f4       	brne	.+12     	; 0x3c2a <DC_MOTOR_void_direction+0x74>
				LCD_enum_Clear ();
    3c1e:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
				DC_MOTOR_enum_Start(CCW);
    3c22:	82 e0       	ldi	r24, 0x02	; 2
    3c24:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <DC_MOTOR_enum_Start>
    3c28:	07 c0       	rjmp	.+14     	; 0x3c38 <DC_MOTOR_void_direction+0x82>
				break;
			}
			else if(direction=='3'){
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	83 33       	cpi	r24, 0x33	; 51
    3c2e:	21 f7       	brne	.-56     	; 0x3bf8 <DC_MOTOR_void_direction+0x42>
				LCD_enum_Clear ();
    3c30:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
				DC_MOTOR_enum_Stop();
    3c34:	0e 94 8b 13 	call	0x2716	; 0x2716 <DC_MOTOR_enum_Stop>
				break;

			}
		}
	}
}
    3c38:	0f 90       	pop	r0
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	08 95       	ret

00003c40 <choice_angle_stepper>:
/********************************************************************************************************/
void choice_angle_stepper(){
    3c40:	df 93       	push	r29
    3c42:	cf 93       	push	r28
    3c44:	0f 92       	push	r0
    3c46:	cd b7       	in	r28, 0x3d	; 61
    3c48:	de b7       	in	r29, 0x3e	; 62
	u8 angle;
		LCD_enum_Clear();
    3c4a:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
		LCD_enum_GO_TO_XY(LCD_u8_LINE1, 0);
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	60 e0       	ldi	r22, 0x00	; 0
    3c52:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
		LCD_enum_Send_String("1-90");
    3c56:	8f ee       	ldi	r24, 0xEF	; 239
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

		LCD_enum_GO_TO_XY(LCD_u8_LINE1, 7);
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	67 e0       	ldi	r22, 0x07	; 7
    3c62:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
		LCD_enum_Send_String("2-180");
    3c66:	84 ef       	ldi	r24, 0xF4	; 244
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

		LCD_enum_GO_TO_XY (2 , 0);
    3c6e:	82 e0       	ldi	r24, 0x02	; 2
    3c70:	60 e0       	ldi	r22, 0x00	; 0
    3c72:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
		LCD_enum_Send_String ("3-270");
    3c76:	8a ef       	ldi	r24, 0xFA	; 250
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

		LCD_enum_GO_TO_XY (2 , 7);
    3c7e:	82 e0       	ldi	r24, 0x02	; 2
    3c80:	67 e0       	ldi	r22, 0x07	; 7
    3c82:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
		LCD_enum_Send_String ("4-360");
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	91 e0       	ldi	r25, 0x01	; 1
    3c8a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>


		while (1) {
			KPD_enum_Get_Key_State(&angle);
    3c8e:	ce 01       	movw	r24, r28
    3c90:	01 96       	adiw	r24, 0x01	; 1
    3c92:	0e 94 02 14 	call	0x2804	; 0x2804 <KPD_enum_Get_Key_State>
			if (angle != KPD_u8_Keys_NO_Pressed) {
    3c96:	89 81       	ldd	r24, Y+1	; 0x01
    3c98:	8f 3f       	cpi	r24, 0xFF	; 255
    3c9a:	c9 f3       	breq	.-14     	; 0x3c8e <choice_angle_stepper+0x4e>
				if (angle == '1') {
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	81 33       	cpi	r24, 0x31	; 49
    3ca0:	59 f4       	brne	.+22     	; 0x3cb8 <choice_angle_stepper+0x78>
					Stepper_motor_enum_INIT();
    3ca2:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Stepper_motor_enum_INIT>
					Stepper_moter_enum_Move(stepper_direction,90);
    3ca6:	80 91 44 01 	lds	r24, 0x0144
    3caa:	40 e0       	ldi	r20, 0x00	; 0
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	64 eb       	ldi	r22, 0xB4	; 180
    3cb0:	72 e4       	ldi	r23, 0x42	; 66
    3cb2:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Stepper_moter_enum_Move>
    3cb6:	eb cf       	rjmp	.-42     	; 0x3c8e <choice_angle_stepper+0x4e>
//					break;
				} else if (angle == '2') {
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	82 33       	cpi	r24, 0x32	; 50
    3cbc:	59 f4       	brne	.+22     	; 0x3cd4 <choice_angle_stepper+0x94>
					Stepper_motor_enum_INIT();
    3cbe:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Stepper_motor_enum_INIT>
					Stepper_moter_enum_Move(stepper_direction,180);
    3cc2:	80 91 44 01 	lds	r24, 0x0144
    3cc6:	40 e0       	ldi	r20, 0x00	; 0
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	64 e3       	ldi	r22, 0x34	; 52
    3ccc:	73 e4       	ldi	r23, 0x43	; 67
    3cce:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Stepper_moter_enum_Move>
    3cd2:	dd cf       	rjmp	.-70     	; 0x3c8e <choice_angle_stepper+0x4e>
//					break;
				}
				else if(angle=='3'){
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	83 33       	cpi	r24, 0x33	; 51
    3cd8:	59 f4       	brne	.+22     	; 0x3cf0 <choice_angle_stepper+0xb0>
					Stepper_motor_enum_INIT();
    3cda:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Stepper_motor_enum_INIT>
					Stepper_moter_enum_Move(stepper_direction,270);
    3cde:	80 91 44 01 	lds	r24, 0x0144
    3ce2:	40 e0       	ldi	r20, 0x00	; 0
    3ce4:	50 e0       	ldi	r21, 0x00	; 0
    3ce6:	67 e8       	ldi	r22, 0x87	; 135
    3ce8:	73 e4       	ldi	r23, 0x43	; 67
    3cea:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Stepper_moter_enum_Move>
    3cee:	cf cf       	rjmp	.-98     	; 0x3c8e <choice_angle_stepper+0x4e>
//					break;

				}
				else if(angle=='4'){
    3cf0:	89 81       	ldd	r24, Y+1	; 0x01
    3cf2:	84 33       	cpi	r24, 0x34	; 52
    3cf4:	61 f6       	brne	.-104    	; 0x3c8e <choice_angle_stepper+0x4e>
				Stepper_motor_enum_INIT();
    3cf6:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Stepper_motor_enum_INIT>
				Stepper_moter_enum_Move(stepper_direction,360);
    3cfa:	80 91 44 01 	lds	r24, 0x0144
    3cfe:	40 e0       	ldi	r20, 0x00	; 0
    3d00:	50 e0       	ldi	r21, 0x00	; 0
    3d02:	64 eb       	ldi	r22, 0xB4	; 180
    3d04:	73 e4       	ldi	r23, 0x43	; 67
    3d06:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Stepper_moter_enum_Move>
    3d0a:	c1 cf       	rjmp	.-126    	; 0x3c8e <choice_angle_stepper+0x4e>

00003d0c <choice_angle_servo>:
		}
}


/********************************************************************************************************/
void choice_angle_servo(){
    3d0c:	df 93       	push	r29
    3d0e:	cf 93       	push	r28
    3d10:	0f 92       	push	r0
    3d12:	cd b7       	in	r28, 0x3d	; 61
    3d14:	de b7       	in	r29, 0x3e	; 62
	u8 angleS=0;
    3d16:	19 82       	std	Y+1, r1	; 0x01
	SERVO_motor_enum_INIT();
    3d18:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <SERVO_motor_enum_INIT>

			LCD_enum_Clear();
    3d1c:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
			LCD_enum_GO_TO_XY(LCD_u8_LINE1, 0);
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	60 e0       	ldi	r22, 0x00	; 0
    3d24:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
			LCD_enum_Send_String("1-45");
    3d28:	86 e0       	ldi	r24, 0x06	; 6
    3d2a:	91 e0       	ldi	r25, 0x01	; 1
    3d2c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

			LCD_enum_GO_TO_XY(LCD_u8_LINE1, 7);
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	67 e0       	ldi	r22, 0x07	; 7
    3d34:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
			LCD_enum_Send_String("2-60");
    3d38:	8b e0       	ldi	r24, 0x0B	; 11
    3d3a:	91 e0       	ldi	r25, 0x01	; 1
    3d3c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

			LCD_enum_GO_TO_XY (2 , 0);
    3d40:	82 e0       	ldi	r24, 0x02	; 2
    3d42:	60 e0       	ldi	r22, 0x00	; 0
    3d44:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
			LCD_enum_Send_String ("3-90");
    3d48:	80 e1       	ldi	r24, 0x10	; 16
    3d4a:	91 e0       	ldi	r25, 0x01	; 1
    3d4c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>

			LCD_enum_GO_TO_XY (2 , 7);
    3d50:	82 e0       	ldi	r24, 0x02	; 2
    3d52:	67 e0       	ldi	r22, 0x07	; 7
    3d54:	0e 94 24 19 	call	0x3248	; 0x3248 <LCD_enum_GO_TO_XY>
			LCD_enum_Send_String ("4-180");
    3d58:	85 e1       	ldi	r24, 0x15	; 21
    3d5a:	91 e0       	ldi	r25, 0x01	; 1
    3d5c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <LCD_enum_Send_String>


			while (1) {
				KPD_enum_Get_Key_State(&angleS);
    3d60:	ce 01       	movw	r24, r28
    3d62:	01 96       	adiw	r24, 0x01	; 1
    3d64:	0e 94 02 14 	call	0x2804	; 0x2804 <KPD_enum_Get_Key_State>
				if (angleS != KPD_u8_Keys_NO_Pressed) {
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d6c:	c9 f3       	breq	.-14     	; 0x3d60 <choice_angle_servo+0x54>
					if (angleS == '1') {
    3d6e:	89 81       	ldd	r24, Y+1	; 0x01
    3d70:	81 33       	cpi	r24, 0x31	; 49
    3d72:	31 f4       	brne	.+12     	; 0x3d80 <choice_angle_servo+0x74>
						LCD_enum_Clear();
    3d74:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
 						SERVO_MOTOR_enum_SET_Servo_Motor_Angle(45);
    3d78:	8d e2       	ldi	r24, 0x2D	; 45
    3d7a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <SERVO_MOTOR_enum_SET_Servo_Motor_Angle>
    3d7e:	18 c0       	rjmp	.+48     	; 0x3db0 <choice_angle_servo+0xa4>
						break;
					} else if (angleS == '2') {
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
    3d82:	82 33       	cpi	r24, 0x32	; 50
    3d84:	31 f4       	brne	.+12     	; 0x3d92 <choice_angle_servo+0x86>
						LCD_enum_Clear();
    3d86:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
						SERVO_MOTOR_enum_SET_Servo_Motor_Angle(60);
    3d8a:	8c e3       	ldi	r24, 0x3C	; 60
    3d8c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <SERVO_MOTOR_enum_SET_Servo_Motor_Angle>
    3d90:	0f c0       	rjmp	.+30     	; 0x3db0 <choice_angle_servo+0xa4>
						break;
					}
					else if(angleS=='3'){
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	83 33       	cpi	r24, 0x33	; 51
    3d96:	31 f4       	brne	.+12     	; 0x3da4 <choice_angle_servo+0x98>
						LCD_enum_Clear();
    3d98:	0e 94 83 19 	call	0x3306	; 0x3306 <LCD_enum_Clear>
						SERVO_MOTOR_enum_SET_Servo_Motor_Angle(90);
    3d9c:	8a e5       	ldi	r24, 0x5A	; 90
    3d9e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <SERVO_MOTOR_enum_SET_Servo_Motor_Angle>
    3da2:	06 c0       	rjmp	.+12     	; 0x3db0 <choice_angle_servo+0xa4>
						break;

					}
					else if(angleS=='4'){
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	84 33       	cpi	r24, 0x34	; 52
    3da8:	d9 f6       	brne	.-74     	; 0x3d60 <choice_angle_servo+0x54>
						SERVO_MOTOR_enum_SET_Servo_Motor_Angle(180);
    3daa:	84 eb       	ldi	r24, 0xB4	; 180
    3dac:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <SERVO_MOTOR_enum_SET_Servo_Motor_Angle>

									}
				}
			}

}
    3db0:	0f 90       	pop	r0
    3db2:	cf 91       	pop	r28
    3db4:	df 91       	pop	r29
    3db6:	08 95       	ret

00003db8 <__mulsi3>:
    3db8:	62 9f       	mul	r22, r18
    3dba:	d0 01       	movw	r26, r0
    3dbc:	73 9f       	mul	r23, r19
    3dbe:	f0 01       	movw	r30, r0
    3dc0:	82 9f       	mul	r24, r18
    3dc2:	e0 0d       	add	r30, r0
    3dc4:	f1 1d       	adc	r31, r1
    3dc6:	64 9f       	mul	r22, r20
    3dc8:	e0 0d       	add	r30, r0
    3dca:	f1 1d       	adc	r31, r1
    3dcc:	92 9f       	mul	r25, r18
    3dce:	f0 0d       	add	r31, r0
    3dd0:	83 9f       	mul	r24, r19
    3dd2:	f0 0d       	add	r31, r0
    3dd4:	74 9f       	mul	r23, r20
    3dd6:	f0 0d       	add	r31, r0
    3dd8:	65 9f       	mul	r22, r21
    3dda:	f0 0d       	add	r31, r0
    3ddc:	99 27       	eor	r25, r25
    3dde:	72 9f       	mul	r23, r18
    3de0:	b0 0d       	add	r27, r0
    3de2:	e1 1d       	adc	r30, r1
    3de4:	f9 1f       	adc	r31, r25
    3de6:	63 9f       	mul	r22, r19
    3de8:	b0 0d       	add	r27, r0
    3dea:	e1 1d       	adc	r30, r1
    3dec:	f9 1f       	adc	r31, r25
    3dee:	bd 01       	movw	r22, r26
    3df0:	cf 01       	movw	r24, r30
    3df2:	11 24       	eor	r1, r1
    3df4:	08 95       	ret

00003df6 <__udivmodsi4>:
    3df6:	a1 e2       	ldi	r26, 0x21	; 33
    3df8:	1a 2e       	mov	r1, r26
    3dfa:	aa 1b       	sub	r26, r26
    3dfc:	bb 1b       	sub	r27, r27
    3dfe:	fd 01       	movw	r30, r26
    3e00:	0d c0       	rjmp	.+26     	; 0x3e1c <__udivmodsi4_ep>

00003e02 <__udivmodsi4_loop>:
    3e02:	aa 1f       	adc	r26, r26
    3e04:	bb 1f       	adc	r27, r27
    3e06:	ee 1f       	adc	r30, r30
    3e08:	ff 1f       	adc	r31, r31
    3e0a:	a2 17       	cp	r26, r18
    3e0c:	b3 07       	cpc	r27, r19
    3e0e:	e4 07       	cpc	r30, r20
    3e10:	f5 07       	cpc	r31, r21
    3e12:	20 f0       	brcs	.+8      	; 0x3e1c <__udivmodsi4_ep>
    3e14:	a2 1b       	sub	r26, r18
    3e16:	b3 0b       	sbc	r27, r19
    3e18:	e4 0b       	sbc	r30, r20
    3e1a:	f5 0b       	sbc	r31, r21

00003e1c <__udivmodsi4_ep>:
    3e1c:	66 1f       	adc	r22, r22
    3e1e:	77 1f       	adc	r23, r23
    3e20:	88 1f       	adc	r24, r24
    3e22:	99 1f       	adc	r25, r25
    3e24:	1a 94       	dec	r1
    3e26:	69 f7       	brne	.-38     	; 0x3e02 <__udivmodsi4_loop>
    3e28:	60 95       	com	r22
    3e2a:	70 95       	com	r23
    3e2c:	80 95       	com	r24
    3e2e:	90 95       	com	r25
    3e30:	9b 01       	movw	r18, r22
    3e32:	ac 01       	movw	r20, r24
    3e34:	bd 01       	movw	r22, r26
    3e36:	cf 01       	movw	r24, r30
    3e38:	08 95       	ret

00003e3a <__prologue_saves__>:
    3e3a:	2f 92       	push	r2
    3e3c:	3f 92       	push	r3
    3e3e:	4f 92       	push	r4
    3e40:	5f 92       	push	r5
    3e42:	6f 92       	push	r6
    3e44:	7f 92       	push	r7
    3e46:	8f 92       	push	r8
    3e48:	9f 92       	push	r9
    3e4a:	af 92       	push	r10
    3e4c:	bf 92       	push	r11
    3e4e:	cf 92       	push	r12
    3e50:	df 92       	push	r13
    3e52:	ef 92       	push	r14
    3e54:	ff 92       	push	r15
    3e56:	0f 93       	push	r16
    3e58:	1f 93       	push	r17
    3e5a:	cf 93       	push	r28
    3e5c:	df 93       	push	r29
    3e5e:	cd b7       	in	r28, 0x3d	; 61
    3e60:	de b7       	in	r29, 0x3e	; 62
    3e62:	ca 1b       	sub	r28, r26
    3e64:	db 0b       	sbc	r29, r27
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	de bf       	out	0x3e, r29	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	cd bf       	out	0x3d, r28	; 61
    3e70:	09 94       	ijmp

00003e72 <__epilogue_restores__>:
    3e72:	2a 88       	ldd	r2, Y+18	; 0x12
    3e74:	39 88       	ldd	r3, Y+17	; 0x11
    3e76:	48 88       	ldd	r4, Y+16	; 0x10
    3e78:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e80:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e82:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e84:	b9 84       	ldd	r11, Y+9	; 0x09
    3e86:	c8 84       	ldd	r12, Y+8	; 0x08
    3e88:	df 80       	ldd	r13, Y+7	; 0x07
    3e8a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e8c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e8e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e90:	1b 81       	ldd	r17, Y+3	; 0x03
    3e92:	aa 81       	ldd	r26, Y+2	; 0x02
    3e94:	b9 81       	ldd	r27, Y+1	; 0x01
    3e96:	ce 0f       	add	r28, r30
    3e98:	d1 1d       	adc	r29, r1
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	cd bf       	out	0x3d, r28	; 61
    3ea4:	ed 01       	movw	r28, r26
    3ea6:	08 95       	ret

00003ea8 <_exit>:
    3ea8:	f8 94       	cli

00003eaa <__stop_program>:
    3eaa:	ff cf       	rjmp	.-2      	; 0x3eaa <__stop_program>
